[{"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\index.js":"1","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\store.js":"2","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\serviceWorker.js":"3","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\App.js":"4","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\polyfill.js":"5","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\index.js":"6","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\sessionCookie.js":"7","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheLayout.js":"8","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\page500\\Page500.js":"9","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\page404\\Page404.js":"10","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\register\\Register.js":"11","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\Login.js":"12","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\logo.js":"13","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\logo-negative.js":"14","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\sygnet.js":"15","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\DataAPI.js":"16","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\index.js":"17","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheSidebar.js":"18","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownTasks.js":"19","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownNotif.js":"20","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownMssg.js":"21","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdown.js":"22","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheFooter.js":"23","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheContent.js":"24","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeader.js":"25","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\_nav.js":"26","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\routes.js":"27","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\utils.js":"28","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\Users.js":"29","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\User.js":"30","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\dashboard\\Dashboard.js":"31","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\Charts.js":"32","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\Widgets.js":"33","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\theme\\colors\\Colors.js":"34","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\modals\\Modals.js":"35","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\brands\\Brands.js":"36","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\theme\\typography\\Typography.js":"37","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\badges\\Badges.js":"38","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\toaster\\Toaster.js":"39","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\alerts\\Alerts.js":"40","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js":"41","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\buttons\\Buttons.js":"42","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\brand-buttons\\BrandButtons.js":"43","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\flags\\Flags.js":"44","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js":"45","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\button-groups\\ButtonGroups.js":"46","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tooltips\\Tooltips.js":"47","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tabs\\Tabs.js":"48","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\progress-bar\\ProgressBar.js":"49","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\popovers\\Popovers.js":"50","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\paginations\\Pagnations.js":"51","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\navbars\\Navbars.js":"52","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\jumbotrons\\Jumbotrons.js":"53","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\navs\\Navs.js":"54","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\carousels\\Carousels.js":"55","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\collapses\\Collapses.js":"56","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\cards\\Cards.js":"57","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\switches\\Switches.js":"58","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\list-groups\\ListGroups.js":"59","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js":"60","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\forms\\BasicForms.js":"61","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tables\\Tables.js":"62","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\WidgetsBrand.js":"63","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\MainChartExample.js":"64","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\reusable\\index.js":"65","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\WidgetsDropdown.js":"66","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\ChartBarSimple.js":"67","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\ChartLineSimple.js":"68","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\UsersData.js":"69","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\reusable\\DocsLink.js":"70","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\others\\ChartLoading.js":"71","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\SessionTimeout.js":"72","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\ResetPassword.js":"73","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\RequestPasswordReset.js":"74","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\reports\\settings.js":"75","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\reports\\generate.js":"76","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\mocks\\solar-battery.js":"77","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\constants.js":"78","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\ai-analytics\\fault-analysis.js":"79","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\ai-analytics\\energy-generation.js":"80","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\alerts.js":"81","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\overview.js":"82","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\Widgets.js":"83","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\budget\\budget.js":"84","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\summary.js":"85","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\analysis.js":"86","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\benchmark.js":"87","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\availability-and-losses\\availability-and-losses.js":"88","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\performance\\performance.js":"89","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\diagnostics\\diagnostics.js":"90","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\summary.js":"91","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\trends.js":"92","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\forecast.js":"93","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\data-availability\\data-availability.js":"94","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\alarms\\alarms.js":"95","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\curtailments\\curtailments.js":"96","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\maintenance\\maintenance.js":"97","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\overview\\overview.js":"98","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\overview\\Widgets.js":"99","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\performance\\performance.js":"100","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\climate\\trends.js":"101","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\climate\\forecast.js":"102","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\status\\ten-min-average.js":"103","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\user\\settings.js":"104","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\client\\settings.js":"105","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\index.js":"106","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\store.js":"107","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\App.js":"108","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\serviceWorker.js":"109","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\polyfill.js":"110","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\sessionCookie.js":"111","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\index.js":"112","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\SessionTimeout.js":"113","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheLayout.js":"114","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\RequestPasswordReset.js":"115","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\page404\\Page404.js":"116","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\ResetPassword.js":"117","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\page500\\Page500.js":"118","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\register\\Register.js":"119","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\Login.js":"120","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\DataAPI.js":"121","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\logo-negative.js":"122","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\logo.js":"123","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\sygnet.js":"124","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\index.js":"125","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheSidebar.js":"126","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownTasks.js":"127","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdown.js":"128","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheFooter.js":"129","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownNotif.js":"130","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeader.js":"131","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheContent.js":"132","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownMssg.js":"133","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\_nav.js":"134","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\routes.js":"135","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\revenue\\sales.js":"136","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\revenue\\certificates-and-offsets.js":"137","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\trends.js":"138","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\utils.js":"139","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\performance.js":"140","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\overview.js":"141","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\client\\settings.js":"142","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\user\\settings.js":"143","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\User.js":"144","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\Users.js":"145","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\Widgets.js":"146","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\theme\\typography\\Typography.js":"147","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\dashboard\\Dashboard.js":"148","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\Charts.js":"149","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\theme\\colors\\Colors.js":"150","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\badges\\Badges.js":"151","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\toaster\\Toaster.js":"152","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\alerts\\Alerts.js":"153","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\modals\\Modals.js":"154","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\flags\\Flags.js":"155","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\brands\\Brands.js":"156","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js":"157","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\button-groups\\ButtonGroups.js":"158","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\brand-buttons\\BrandButtons.js":"159","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\buttons\\Buttons.js":"160","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\switches\\Switches.js":"161","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tabs\\Tabs.js":"162","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\progress-bar\\ProgressBar.js":"163","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tooltips\\Tooltips.js":"164","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\paginations\\Pagnations.js":"165","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\list-groups\\ListGroups.js":"166","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\jumbotrons\\Jumbotrons.js":"167","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\navbars\\Navbars.js":"168","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\cards\\Cards.js":"169","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\navs\\Navs.js":"170","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\collapses\\Collapses.js":"171","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\forms\\BasicForms.js":"172","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tables\\Tables.js":"173","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js":"174","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js":"175","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\popovers\\Popovers.js":"176","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\UsersData.js":"177","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\ChartLineSimple.js":"178","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\ChartBarSimple.js":"179","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\WidgetsDropdown.js":"180","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\WidgetsBrand.js":"181","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\reusable\\index.js":"182","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\reusable\\DocsLink.js":"183","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\i18n.js":"184","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\others\\LanguageSwitcher.js":"185"},{"size":762,"mtime":1628356985092,"results":"186","hashOfConfig":"187"},{"size":340,"mtime":1628356985099,"results":"188","hashOfConfig":"187"},{"size":4813,"mtime":1628356985098,"results":"189","hashOfConfig":"187"},{"size":2654,"mtime":1651159515488,"results":"190","hashOfConfig":"187"},{"size":1958,"mtime":1628356985093,"results":"191","hashOfConfig":"187"},{"size":4129,"mtime":1651159515492,"results":"192","hashOfConfig":"187"},{"size":349,"mtime":1642772877418,"results":"193","hashOfConfig":"187"},{"size":716,"mtime":1651159818716,"results":"194","hashOfConfig":"187"},{"size":1357,"mtime":1628356985156,"results":"195","hashOfConfig":"187"},{"size":1338,"mtime":1628356985154,"results":"196","hashOfConfig":"187"},{"size":2944,"mtime":1628356985160,"results":"197","hashOfConfig":"187"},{"size":4413,"mtime":1672097549244,"results":"198","hashOfConfig":"187"},{"size":2256,"mtime":1628356985082,"results":"199","hashOfConfig":"187"},{"size":2255,"mtime":1628356985082,"results":"200","hashOfConfig":"187"},{"size":987,"mtime":1628356985083,"results":"201","hashOfConfig":"187"},{"size":1780,"mtime":1660628700507,"results":"202","hashOfConfig":"187"},{"size":617,"mtime":1628357286768,"results":"203","hashOfConfig":"187"},{"size":1074,"mtime":1651159515498,"results":"204","hashOfConfig":"187"},{"size":2311,"mtime":1628356985088,"results":"205","hashOfConfig":"187"},{"size":2612,"mtime":1628356985087,"results":"206","hashOfConfig":"187"},{"size":4914,"mtime":1628356985087,"results":"207","hashOfConfig":"187"},{"size":2950,"mtime":1665582318639,"results":"208","hashOfConfig":"187"},{"size":604,"mtime":1628356985085,"results":"209","hashOfConfig":"187"},{"size":1141,"mtime":1628356985084,"results":"210","hashOfConfig":"187"},{"size":8488,"mtime":1670349407437,"results":"211","hashOfConfig":"187"},{"size":9281,"mtime":1672860931232,"results":"212","hashOfConfig":"187"},{"size":14784,"mtime":1670349536982,"results":"213","hashOfConfig":"187"},{"size":6344,"mtime":1665578381338,"results":"214","hashOfConfig":"187"},{"size":2218,"mtime":1628356985170,"results":"215","hashOfConfig":"187"},{"size":1241,"mtime":1628356985169,"results":"216","hashOfConfig":"187"},{"size":15487,"mtime":1672097775515,"results":"217","hashOfConfig":"187"},{"size":5994,"mtime":1628356985128,"results":"218","hashOfConfig":"187"},{"size":12671,"mtime":1628356985172,"results":"219","hashOfConfig":"187"},{"size":3813,"mtime":1628356985166,"results":"220","hashOfConfig":"187"},{"size":11236,"mtime":1628356985143,"results":"221","hashOfConfig":"187"},{"size":999,"mtime":1628356985134,"results":"222","hashOfConfig":"187"},{"size":7178,"mtime":1628356985168,"results":"223","hashOfConfig":"187"},{"size":3697,"mtime":1628356985141,"results":"224","hashOfConfig":"187"},{"size":5513,"mtime":1628356985144,"results":"225","hashOfConfig":"187"},{"size":6087,"mtime":1628356985139,"results":"226","hashOfConfig":"187"},{"size":629,"mtime":1628356985135,"results":"227","hashOfConfig":"187"},{"size":33892,"mtime":1628356985125,"results":"228","hashOfConfig":"187"},{"size":15568,"mtime":1628356985121,"results":"229","hashOfConfig":"187"},{"size":613,"mtime":1628356985136,"results":"230","hashOfConfig":"187"},{"size":16914,"mtime":1628356985122,"results":"231","hashOfConfig":"187"},{"size":6366,"mtime":1628356985123,"results":"232","hashOfConfig":"187"},{"size":2816,"mtime":1628356985119,"results":"233","hashOfConfig":"187"},{"size":5808,"mtime":1628356985118,"results":"234","hashOfConfig":"187"},{"size":3069,"mtime":1628356985115,"results":"235","hashOfConfig":"187"},{"size":3011,"mtime":1628356985114,"results":"236","hashOfConfig":"187"},{"size":2259,"mtime":1628356985113,"results":"237","hashOfConfig":"187"},{"size":5977,"mtime":1628356985110,"results":"238","hashOfConfig":"187"},{"size":2156,"mtime":1628356985108,"results":"239","hashOfConfig":"187"},{"size":9733,"mtime":1628356985112,"results":"240","hashOfConfig":"187"},{"size":7017,"mtime":1643897085638,"results":"241","hashOfConfig":"187"},{"size":9481,"mtime":1628356985104,"results":"242","hashOfConfig":"187"},{"size":18597,"mtime":1628356985101,"results":"243","hashOfConfig":"187"},{"size":25145,"mtime":1628356985116,"results":"244","hashOfConfig":"187"},{"size":13135,"mtime":1628356985109,"results":"245","hashOfConfig":"187"},{"size":1792,"mtime":1643897090458,"results":"246","hashOfConfig":"187"},{"size":52739,"mtime":1628356985105,"results":"247","hashOfConfig":"187"},{"size":5262,"mtime":1628356985117,"results":"248","hashOfConfig":"187"},{"size":4208,"mtime":1628356985173,"results":"249","hashOfConfig":"187"},{"size":2970,"mtime":1642772877437,"results":"250","hashOfConfig":"187"},{"size":60,"mtime":1628356985094,"results":"251","hashOfConfig":"187"},{"size":4963,"mtime":1628356985174,"results":"252","hashOfConfig":"187"},{"size":1866,"mtime":1642772877430,"results":"253","hashOfConfig":"187"},{"size":4062,"mtime":1642772877435,"results":"254","hashOfConfig":"187"},{"size":2471,"mtime":1628356985171,"results":"255","hashOfConfig":"187"},{"size":608,"mtime":1628356985093,"results":"256","hashOfConfig":"187"},{"size":438,"mtime":1642772877441,"results":"257","hashOfConfig":"187"},{"size":2541,"mtime":1651234821119,"results":"258","hashOfConfig":"187"},{"size":4246,"mtime":1651159515536,"results":"259","hashOfConfig":"187"},{"size":3405,"mtime":1651159515534,"results":"260","hashOfConfig":"187"},{"size":6290,"mtime":1672175631337,"results":"261","hashOfConfig":"187"},{"size":7324,"mtime":1651690585692,"results":"262","hashOfConfig":"187"},{"size":2374,"mtime":1651159818781,"results":"263","hashOfConfig":"187"},{"size":756,"mtime":1656527392610,"results":"264","hashOfConfig":"187"},{"size":1888,"mtime":1660191287041,"results":"265","hashOfConfig":"187"},{"size":10812,"mtime":1670361164524,"results":"266","hashOfConfig":"187"},{"size":9894,"mtime":1670420187563,"results":"267","hashOfConfig":"187"},{"size":14725,"mtime":1661856749607,"results":"268","hashOfConfig":"187"},{"size":4346,"mtime":1660191131465,"results":"269","hashOfConfig":"187"},{"size":23167,"mtime":1665585591725,"results":"270","hashOfConfig":"187"},{"size":16841,"mtime":1670350391673,"results":"271","hashOfConfig":"187"},{"size":19104,"mtime":1660191287062,"results":"272","hashOfConfig":"187"},{"size":11112,"mtime":1660191131464,"results":"273","hashOfConfig":"187"},{"size":9583,"mtime":1660191131474,"results":"274","hashOfConfig":"187"},{"size":21719,"mtime":1670350601524,"results":"275","hashOfConfig":"187"},{"size":30209,"mtime":1665586109641,"results":"276","hashOfConfig":"187"},{"size":25686,"mtime":1669326961857,"results":"277","hashOfConfig":"187"},{"size":18375,"mtime":1660191131466,"results":"278","hashOfConfig":"187"},{"size":8065,"mtime":1670362616310,"results":"279","hashOfConfig":"187"},{"size":8622,"mtime":1670417883041,"results":"280","hashOfConfig":"187"},{"size":18453,"mtime":1660191131475,"results":"281","hashOfConfig":"187"},{"size":4377,"mtime":1660191131466,"results":"282","hashOfConfig":"187"},{"size":14799,"mtime":1662015420987,"results":"283","hashOfConfig":"187"},{"size":10958,"mtime":1661857168457,"results":"284","hashOfConfig":"187"},{"size":4036,"mtime":1660193695950,"results":"285","hashOfConfig":"187"},{"size":12422,"mtime":1665585693279,"results":"286","hashOfConfig":"187"},{"size":11524,"mtime":1674068687144,"results":"287","hashOfConfig":"187"},{"size":8101,"mtime":1667995707543,"results":"288","hashOfConfig":"187"},{"size":15226,"mtime":1670357822134,"results":"289","hashOfConfig":"187"},{"size":7078,"mtime":1670257134277,"results":"290","hashOfConfig":"187"},{"size":17608,"mtime":1670256675391,"results":"291","hashOfConfig":"187"},{"size":950,"mtime":1699880003097,"results":"292","hashOfConfig":"293"},{"size":340,"mtime":1699204241506,"results":"294","hashOfConfig":"293"},{"size":2652,"mtime":1699879385685,"results":"295","hashOfConfig":"293"},{"size":4813,"mtime":1699204241505,"results":"296","hashOfConfig":"293"},{"size":1958,"mtime":1699204241496,"results":"297","hashOfConfig":"293"},{"size":349,"mtime":1699204241494,"results":"298","hashOfConfig":"293"},{"size":4129,"mtime":1699204241470,"results":"299","hashOfConfig":"293"},{"size":2541,"mtime":1699204241492,"results":"300","hashOfConfig":"293"},{"size":767,"mtime":1699723335009,"results":"301","hashOfConfig":"293"},{"size":3526,"mtime":1699881960147,"results":"302","hashOfConfig":"293"},{"size":1344,"mtime":1699204241581,"results":"303","hashOfConfig":"293"},{"size":4311,"mtime":1699881912721,"results":"304","hashOfConfig":"293"},{"size":1363,"mtime":1699204241582,"results":"305","hashOfConfig":"293"},{"size":2950,"mtime":1699723335046,"results":"306","hashOfConfig":"293"},{"size":4972,"mtime":1699882419499,"results":"307","hashOfConfig":"293"},{"size":1780,"mtime":1699204241491,"results":"308","hashOfConfig":"293"},{"size":2255,"mtime":1699204241471,"results":"309","hashOfConfig":"293"},{"size":2256,"mtime":1699204241472,"results":"310","hashOfConfig":"293"},{"size":987,"mtime":1699204241475,"results":"311","hashOfConfig":"293"},{"size":617,"mtime":1699204241490,"results":"312","hashOfConfig":"293"},{"size":1074,"mtime":1699723335012,"results":"313","hashOfConfig":"293"},{"size":2311,"mtime":1699204241486,"results":"314","hashOfConfig":"293"},{"size":2950,"mtime":1699204241484,"results":"315","hashOfConfig":"293"},{"size":604,"mtime":1699204241481,"results":"316","hashOfConfig":"293"},{"size":2612,"mtime":1699204241485,"results":"317","hashOfConfig":"293"},{"size":10789,"mtime":1699725034229,"results":"318","hashOfConfig":"293"},{"size":1239,"mtime":1699204241480,"results":"319","hashOfConfig":"293"},{"size":4914,"mtime":1699204241484,"results":"320","hashOfConfig":"293"},{"size":2635,"mtime":1699884036429,"results":"321","hashOfConfig":"293"},{"size":7305,"mtime":1699725205721,"results":"322","hashOfConfig":"293"},{"size":11981,"mtime":1699881681845,"results":"323","hashOfConfig":"293"},{"size":12515,"mtime":1699884458778,"results":"324","hashOfConfig":"293"},{"size":10602,"mtime":1699881322097,"results":"325","hashOfConfig":"293"},{"size":6877,"mtime":1699882278261,"results":"326","hashOfConfig":"293"},{"size":12377,"mtime":1699884417209,"results":"327","hashOfConfig":"293"},{"size":10407,"mtime":1699881362151,"results":"328","hashOfConfig":"293"},{"size":6107,"mtime":1699882033147,"results":"329","hashOfConfig":"293"},{"size":7027,"mtime":1699881689642,"results":"330","hashOfConfig":"293"},{"size":1241,"mtime":1699204241599,"results":"331","hashOfConfig":"293"},{"size":2218,"mtime":1699204241600,"results":"332","hashOfConfig":"293"},{"size":12671,"mtime":1699204241604,"results":"333","hashOfConfig":"293"},{"size":7178,"mtime":1699204241597,"results":"334","hashOfConfig":"293"},{"size":8807,"mtime":1699723335027,"results":"335","hashOfConfig":"293"},{"size":5994,"mtime":1699204241552,"results":"336","hashOfConfig":"293"},{"size":3813,"mtime":1699204241594,"results":"337","hashOfConfig":"293"},{"size":3697,"mtime":1699204241564,"results":"338","hashOfConfig":"293"},{"size":5513,"mtime":1699204241567,"results":"339","hashOfConfig":"293"},{"size":6087,"mtime":1699204241563,"results":"340","hashOfConfig":"293"},{"size":11236,"mtime":1699204241566,"results":"341","hashOfConfig":"293"},{"size":613,"mtime":1699204241559,"results":"342","hashOfConfig":"293"},{"size":999,"mtime":1699204241557,"results":"343","hashOfConfig":"293"},{"size":629,"mtime":1699204241558,"results":"344","hashOfConfig":"293"},{"size":6366,"mtime":1699204241545,"results":"345","hashOfConfig":"293"},{"size":15568,"mtime":1699204241541,"results":"346","hashOfConfig":"293"},{"size":33892,"mtime":1699204241547,"results":"347","hashOfConfig":"293"},{"size":25145,"mtime":1699204241532,"results":"348","hashOfConfig":"293"},{"size":5808,"mtime":1699204241536,"results":"349","hashOfConfig":"293"},{"size":3069,"mtime":1699204241531,"results":"350","hashOfConfig":"293"},{"size":2816,"mtime":1699204241538,"results":"351","hashOfConfig":"293"},{"size":2259,"mtime":1699204241527,"results":"352","hashOfConfig":"293"},{"size":13135,"mtime":1699204241521,"results":"353","hashOfConfig":"293"},{"size":2156,"mtime":1699204241519,"results":"354","hashOfConfig":"293"},{"size":5977,"mtime":1699204241524,"results":"355","hashOfConfig":"293"},{"size":18597,"mtime":1699204241510,"results":"356","hashOfConfig":"293"},{"size":9733,"mtime":1699204241526,"results":"357","hashOfConfig":"293"},{"size":9481,"mtime":1699204241514,"results":"358","hashOfConfig":"293"},{"size":52739,"mtime":1699208640718,"results":"359","hashOfConfig":"293"},{"size":5262,"mtime":1699204241534,"results":"360","hashOfConfig":"293"},{"size":16914,"mtime":1699204241543,"results":"361","hashOfConfig":"293"},{"size":1792,"mtime":1699204241508,"results":"362","hashOfConfig":"293"},{"size":3011,"mtime":1699204241529,"results":"363","hashOfConfig":"293"},{"size":2471,"mtime":1699204241602,"results":"364","hashOfConfig":"293"},{"size":4062,"mtime":1699204241551,"results":"365","hashOfConfig":"293"},{"size":1866,"mtime":1699204241550,"results":"366","hashOfConfig":"293"},{"size":4963,"mtime":1699204241607,"results":"367","hashOfConfig":"293"},{"size":4208,"mtime":1699204241606,"results":"368","hashOfConfig":"293"},{"size":60,"mtime":1699204241498,"results":"369","hashOfConfig":"293"},{"size":608,"mtime":1699204241497,"results":"370","hashOfConfig":"293"},{"size":913,"mtime":1699880886128,"results":"371","hashOfConfig":"293"},{"size":1011,"mtime":1699878072775,"results":"372","hashOfConfig":"293"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},"1ngr242",{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"375"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"375"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"375"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"375"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"375"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"375"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"375"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"375"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"375"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"375"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"375"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"375"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"375"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"375"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"375"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"375"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"546"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"375"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"375"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"375"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"375"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"375"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"375"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"375"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"375"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"375"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"375"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"375"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"375"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"375"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"375"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"375"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"375"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"375"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"375"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"375"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"375"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"375"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"375"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"375"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"375"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"375"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"375"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},"tv37qw",{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"629"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"629"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"629"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"629"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"629"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"629"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"629"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"629"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"629"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"629"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"629"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"629"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"629"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"629"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"629"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"629"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"629"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"629"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"629"},"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\index.js",[],["803","804"],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\store.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\serviceWorker.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\App.js",["805"],"import { Redirect } from \"react-router-dom\";\r\nimport {getCookie} from './helpers/sessionCookie.js'\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport SessionTimeout from './helpers/SessionTimeout';\r\nimport './scss/style.scss';\r\n\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\n\r\n// Containers\r\nconst TheLayout = React.lazy(() => import('./containers/TheLayout'));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/pages/login/Login'));\r\nconst RequestPasswordReset = React.lazy(() => import('./views/pages/login/RequestPasswordReset'));\r\nconst ResetPassword = React.lazy(() => import('./views/pages/login/ResetPassword'));\r\nconst Register = React.lazy(() => import('./views/pages/register/Register'));\r\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\r\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\r\n// const PowerCurve = React.lazy(() => import('./views/pages/power-curve/power-curve'));\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n\r\n      this.state ={\r\n        authenticated: getCookie('name')!==false && getCookie('name')!==''\r\n      }\r\n\r\n    }\r\n\r\n  render() {\r\n\r\n  \r\n\r\n\r\n    return (\r\n\r\n      this.state.authenticated ?\r\n\r\n      <HashRouter>\r\n          <React.Suspense fallback={loading}>\r\n            <Switch>\r\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\r\n              <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} />\r\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\r\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />\r\n\r\n              \r\n            </Switch>\r\n          </React.Suspense>\r\n          <SessionTimeout />\r\n      </HashRouter>\r\n\r\n      :\r\n\r\n      <HashRouter>\r\n          <React.Suspense fallback={loading}>\r\n            <Switch>\r\n              <Route path=\"/requestPasswordReset\" name=\"Request password reset\" render={props => <RequestPasswordReset {...props}/>} />\r\n              <Route path=\"/resetPassword\" name=\"Reset password\" render={props => <ResetPassword {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props => <Login {...props}/>} />\r\n\r\n              \r\n            </Switch>\r\n          </React.Suspense>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\polyfill.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\sessionCookie.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheLayout.js",["806","807","808"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  TheContent,\r\n  TheSidebar,\r\n  TheFooter,\r\n  TheHeader\r\n} from './index'\r\nimport {getCookie} from '../helpers/sessionCookie.js'\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n\r\nconst TheLayout = () => {\r\n\r\n  const location = useLocation()\r\n  const parkType = location.pathname == '/modules/solar-battery'? 'solar' : getCookie('parkType')\r\n\r\n  return (\r\n    <div className={\"c-app c-default-layout \"+parkType}>\r\n      <TheSidebar/>\r\n      <div className=\"c-wrapper\">\r\n        <TheHeader/>\r\n        <div className=\"c-body\">\r\n          <TheContent/>\r\n        </div>\r\n        <TheFooter/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TheLayout\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\page500\\Page500.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\page404\\Page404.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\register\\Register.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\Login.js",["809","810"],"import { Redirect } from \"react-router-dom\";\r\n\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {setCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport React, {useState} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CLink,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport logo from '../../../assets/renovus-logo.png'\r\n\r\nconst Login = () => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n\r\n\r\n  const authenticateUser = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate',\r\n      'method' : 'POST',\r\n      'body': {\r\n          \"email\": username,\r\n          \"password\": password\r\n      },\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        if (response.authenticated) {\r\n          console.log('response~~~~~~',response)\r\n          \r\n          setCookie('name', response.name);\r\n          setCookie('user', response.id && response.id);\r\n          setCookie('client', response.client.id && response.client.id);\r\n          setCookie('location', response.location.id);\r\n          setCookie('parkType', response.location.type);\r\n          setCookie('functionalities', JSON.stringify(response.functionalities.map((f) => f.url)));\r\n          // setCookie('parkName', response.client.name);\r\n          \r\n          setAuthenticated(true);\r\n          window.location.reload();\r\n        } else {\r\n          alert('wrong user!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('error!') }\r\n    )\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />:\r\n\r\n  \r\n    \r\n    <div className=\"bg-gradient-custom c-app c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"8\">\r\n            <CCardGroup className=\"shadow\">\r\n              <CCard className=\"p-4 border-light\">\r\n                <CCardBody>\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">Login</h1>\r\n                    <p className=\"text-muted\">Sign In to your account</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setUsername(ev.target.value)}} value={username} type=\"text\" placeholder=\"E-mail\" autoComplete=\"username\" />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setPassword(ev.target.value)}} type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"6\">\r\n                        <CButton onClick={authenticateUser} color=\"primary\" className=\"px-4 mr-3\">Login</CButton>\r\n                        \r\n                      </CCol>\r\n                      <CCol xs=\"6\" className=\"text-right d-flex justify-content-end align-items-center\">\r\n                        <CLink to=\"/requestPasswordReset\" className=\"text-dark-blue\">Reset password?</CLink>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n              <CCard className=\"text-dark bg-light border-light py-5 d-md-down-none\" style={{ width: '44%' }}>\r\n                <CCardBody className=\"text-center\">\r\n                  <div>\r\n                    <img src={logo} width=\"250\" class=\"mb-3\"/>\r\n                    <p>Please login with your e-mail and password.</p>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\logo.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\logo-negative.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\assets\\icons\\sygnet.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\DataAPI.js",["811","812","813","814","815"],"import {getCookie,setCookie} from '../helpers/sessionCookie.js'\r\n\r\nexport async function DataAPI(options = {}) {\r\n\r\n\tconst {\r\n\t  endpoint = {},\r\n    method = 'POST',\r\n    body = {}\r\n\t} = options;\r\n\r\n   const fetchOptions = {};\r\n\r\n  //  body.location = getCookie('location');\r\n\r\n   const staging = (process.env.REACT_APP_API_URL == '/data');\r\n\r\n  fetchOptions.method = staging ? 'GET' : method;\r\n  fetchOptions.headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'credentials': 'include',\r\n    'Origin': window.location.href,\r\n    'Access-Control-Request-Method' : staging ? 'GET' : method\r\n  };\r\n  fetchOptions.credentials = 'include';\r\n  // fetchOptions.mode = 'no-cors';\r\n\r\n\r\n// JSESSIONID\r\n\r\n  if (body && !staging && method != 'GET') fetchOptions.body = JSON.stringify(body);\r\n\r\n  console.log(`Calling DataAPI to ${process.env.REACT_APP_API_URL}/${endpoint} with options:`, options)\r\n\r\n  const APIResponse = await fetch(\r\n\r\n    `${process.env.REACT_APP_API_URL}/${endpoint}`, fetchOptions).then(function (response) {\r\n        return response.json();\r\n      }).catch(\r\n        er => {\r\n\r\n          if (endpoint == 'admin/locations/current') {\r\n            setCookie('lastTimeStamp', '');\r\n            setCookie('name', '');\r\n            window.location.reload();\r\n          }\r\n          \r\n          console.log('APIError!', er, `${process.env.REACT_APP_API_URL}/${endpoint}`);\r\n          // alert('APIError');\r\n        }\r\n      );\r\n\r\n    console.log('fetchOptions for', endpoint, fetchOptions);\r\n    console.log('APIResponse for', endpoint, APIResponse);\r\n\r\n    if (APIResponse && APIResponse.chart && APIResponse.chart.resultCode==404) alert(APIResponse.chart.resultText)\r\n\r\n    return APIResponse;\r\n\r\n  }\r\n\r\n\r\n\r\nexport default DataAPI","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheSidebar.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownTasks.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownNotif.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdownMssg.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeaderDropdown.js",["816"],"import React from 'react'\r\nimport {setCookie} from '../helpers/sessionCookie.js'\r\nimport {\r\n  CBadge,\r\n  CDropdown,\r\n  CDropdownItem,\r\n  CDropdownMenu,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst TheHeaderDropdown = () => {\r\n  return (\r\n    <CDropdown\r\n      inNav\r\n      className=\"c-header-nav-items mx-2\"\r\n      direction=\"down\"\r\n    >\r\n      {/* <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\r\n        <div className=\"c-avatar\">\r\n          {false && <CImg\r\n            src={'https://media-exp1.licdn.com/dms/image/C5103AQEL459XCxKAzg/profile-displayphoto-shrink_400_400/0/1516351015629?e=1625702400&v=beta&t=TqaODZsSZm5jAuCl1JSYDwBMgzp1nG2RX2R8s2I4cLY'}\r\n            className=\"c-avatar-img\"\r\n            alt=\"admin@bootstrapmaster.com\"\r\n          />}\r\n        </div>\r\n      </CDropdownToggle> */}\r\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n\r\n      <CDropdownItem\r\n          header\r\n          tag=\"div\"\r\n          color=\"light\"\r\n          className=\"text-center\"\r\n          onClick={() => { setCookie('name', ''); setCookie('parkType', ''); setCookie('parkName', ''); window.location.reload(); }}\r\n        >\r\n          <a href=\"#\">Logout</a>\r\n        </CDropdownItem>\r\n\r\n        {\r\n          false && <><CDropdownItem\r\n          header\r\n          tag=\"div\"\r\n          color=\"light\"\r\n          className=\"text-center\"\r\n        >\r\n          <strong>Account</strong>\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-bell\" className=\"mfe-2\" />\r\n          Updates\r\n          <CBadge color=\"info\" className=\"mfs-auto\">42</CBadge>\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-envelope-open\" className=\"mfe-2\" />\r\n          Messages\r\n          <CBadge color=\"success\" className=\"mfs-auto\">42</CBadge>\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-task\" className=\"mfe-2\" />\r\n          Tasks\r\n          <CBadge color=\"danger\" className=\"mfs-auto\">42</CBadge>\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-comment-square\" className=\"mfe-2\" />\r\n          Comments\r\n          <CBadge color=\"warning\" className=\"mfs-auto\">42</CBadge>\r\n        </CDropdownItem>\r\n        <CDropdownItem\r\n          header\r\n          tag=\"div\"\r\n          color=\"light\"\r\n          className=\"text-center\"\r\n        >\r\n          <strong>Settings</strong>\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-user\" className=\"mfe-2\" />Profile\r\n        </CDropdownItem>\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-settings\" className=\"mfe-2\" />\r\n          Settings\r\n        </CDropdownItem>\r\n        <CDropdownItem divider />\r\n        <CDropdownItem>\r\n          <CIcon name=\"cil-lock-locked\" className=\"mfe-2\" />\r\n          Lock Account\r\n        </CDropdownItem></>}\r\n      </CDropdownMenu>\r\n    </CDropdown>\r\n  )\r\n}\r\n\r\nexport default TheHeaderDropdown\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheFooter.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheContent.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\TheHeader.js",["817","818","819","820","821","822"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {setCookie, getCookie} from '../helpers/sessionCookie.js'\r\nimport {\r\n  CHeader,\r\n  CToggler,\r\n  CHeaderBrand,\r\n  CHeaderNav,\r\n  CHeaderNavItem,\r\n  CHeaderNavLink,\r\n  CSubheader,\r\n  CBreadcrumbRouter,\r\n  CLink,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { freeSet } from '@coreui/icons';\r\n\r\nimport DataAPI from '../helpers/DataAPI.js'\r\n\r\n// routes config\r\nimport routes from '../routes'\r\n\r\nimport {\r\n  TheHeaderDropdown,\r\n  TheHeaderDropdownMssg,\r\n  TheHeaderDropdownNotif,\r\n  TheHeaderDropdownTasks\r\n}  from './index'\r\n\r\nconst TheHeader = () => {\r\n  const dispatch = useDispatch()\r\n  const sidebarShow = useSelector(state => state.sidebarShow)\r\n\r\n  const [parks, setParks] = useState([]);\r\n  const [parksLoaded, setParksLoaded] = useState(false);\r\n  const [modalContact, setModalContact] = useState(false);\r\n  const [showMock, setShowMock] = useState(false);\r\n\r\n  let history = useHistory();\r\n  const location = useLocation();\r\n  const noParkPages = ['/dashboard','/modules/budget'];\r\n\r\n\r\n  useEffect(() => {\r\n    userPermissions()\r\n    if(!noParkPages.includes(location.pathname))\r\n      fetchParks();\r\n  },[]);\r\n\r\n\r\n  const userPermissions = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n        const urls = response.functionalities.map((f) => f.url);\r\n        // if(!urls.includes(location.pathname) && location.pathname != '/modules/ai-analytics/energy-generation' && location.pathname != '/modules/ai-analytics/fault-analysis') {\r\n        //   history.push(\"/dashboard\");\r\n        // }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  const updateLocation = (locationId) => {\r\n\r\n    console.log(`Updating location to: security/authenticate/location/${locationId}`)\r\n\r\n    DataAPI({\r\n      'endpoint': `security/authenticate/location/${locationId}`,\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        console.log(response)\r\n        \r\n        setCookie('location', locationId);\r\n        // if (locationId == 7) // Para pruebas\r\n        //   setCookie('parkType', 'solar');\r\n        // else\r\n          setCookie('parkType', response.location.type);\r\n          setCookie('parkName', response.location.name);\r\n        \r\n        // if (response.location.type == 'solar') {\r\n        //   history.push(\"/modules/solar-battery\")\r\n        // } else {\r\n          window.location.reload();\r\n        // }\r\n\r\n      }\r\n    ).catch(\r\n      response => {\r\n        console.error(response)\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const fetchParks = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!parksLoaded) {\r\n          setParks(response);\r\n          setParksLoaded(true);\r\n          if( getCookie('parkType') == '')\r\n            setCookie('parkType',response[0].type)\r\n          setCookie('parkName', response[0].name);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const toggleContact = ()=>{\r\n    setModalContact(!modalContact);\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    const val = [true, 'responsive'].includes(sidebarShow) ? false : 'responsive'\r\n    dispatch({type: 'set', sidebarShow: val})\r\n  }\r\n\r\n  const toggleSidebarMobile = () => {\r\n    const val = [false, 'responsive'].includes(sidebarShow) ? true : 'responsive'\r\n    dispatch({type: 'set', sidebarShow: val})\r\n  }\r\n\r\n  return (\r\n    <CHeader withSubheader>\r\n      <CToggler\r\n        inHeader\r\n        className=\"ml-md-3 d-lg-none\"\r\n        onClick={toggleSidebarMobile}\r\n      />\r\n      <CToggler\r\n        inHeader\r\n        className=\"ml-3 d-md-down-none\"\r\n        onClick={toggleSidebar}\r\n      />\r\n      <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\"></CHeaderBrand>\r\n\r\n\r\n\r\n      {true && <CHeaderNav className=\"d-md-down-none mr-auto\">\r\n        <CHeaderNavItem className=\"px-3\" >\r\n          {false && <CHeaderNavLink to=\"/dashboard\">Dashboard</CHeaderNavLink>}\r\n        </CHeaderNavItem>\r\n        <CHeaderNavItem className=\"px-3\">\r\n        </CHeaderNavItem>\r\n      </CHeaderNav>}\r\n\r\n      <CHeaderNav className=\"px-3\">\r\n\r\n\r\n\r\n      {/* { getCookie('name') }&nbsp;<a onClick={(ev) => { setCookie('name', ''); ev.preventDefault(); ev.stopPropagation(); window.location.reload(); return false;   }} href=\"#\">Logout</a> */}\r\n\r\n\r\n        <CDropdown>\r\n          <CDropdownToggle className={'btn-light'}>\r\n            <CIcon name={'cilUser'} className={'mb-1 mr-1'}/> {getCookie('name')}&nbsp;\r\n          </CDropdownToggle>\r\n          <CDropdownMenu className=\"p-0\" placement=\"bottom-end\">\r\n            <CDropdownItem onClick={() => history.push(\"/client/settings\")}>\r\n              <CIcon name={'cilSettings'} className={'mr-2'}/>\r\n              Settings\r\n            </CDropdownItem>\r\n            <CDropdownItem onClick={() => history.push(\"/user/settings\")}>\r\n              <CIcon name={'cilUser'} className={'mr-2'}/>\r\n              User\r\n            </CDropdownItem>\r\n            <CDropdownItem onClick={toggleContact}>\r\n              <CIcon content={freeSet.cilContact} className={'mr-2'}/>\r\n              Contact us\r\n            </CDropdownItem>\r\n            <CDropdownItem onClick={(ev) => { setCookie('name', ''); ev.preventDefault(); ev.stopPropagation(); window.location.reload(); return false;  }}>\r\n              <CIcon content={freeSet.cilAccountLogout} className={'mr-2'}/>\r\n              Logout\r\n            </CDropdownItem>\r\n          \r\n          </CDropdownMenu>\r\n        </CDropdown>\r\n\r\n        <CModal\r\n          show={modalContact}\r\n          onClose={toggleContact}\r\n          size='sm'\r\n        >\r\n          {/* <CModalHeader closeButton>Contact us</CModalHeader> */}\r\n          <CModalBody>\r\n            Contact us at <a href='mailto:support@renovus.tech'>support@renovus.tech</a>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={toggleContact}>Close</CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n\r\n\r\n        {false && <><TheHeaderDropdownNotif/>\r\n        <TheHeaderDropdownTasks/>\r\n        <TheHeaderDropdownMssg/></>}\r\n        <TheHeaderDropdown/>\r\n      </CHeaderNav>\r\n\r\n    {/* { location.pathname != '/modules/solar-battery' &&   */}\r\n      <CSubheader className=\"px-3 justify-content-between\">\r\n        <CBreadcrumbRouter\r\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\r\n          routes={routes}\r\n        />\r\n          {false && <div className=\"d-md-down-none mfe-2 c-subheader-nav\">\r\n                    <CLink className=\"c-subheader-nav-link\"href=\"#\">\r\n                      <CIcon name=\"cil-speech\" alt=\"Settings\" />\r\n                    </CLink>\r\n                    <CLink\r\n                      className=\"c-subheader-nav-link\"\r\n                      aria-current=\"page\"\r\n                      to=\"/dashboard\"\r\n                    >\r\n                      <CIcon name=\"cil-graph\" alt=\"Dashboard\" />&nbsp;Dashboard\r\n                    </CLink>\r\n                    <CLink className=\"c-subheader-nav-link\" href=\"#\">\r\n                      <CIcon name=\"cil-settings\" alt=\"Settings\" />&nbsp;Settings\r\n                    </CLink>\r\n                    </div>\r\n                  }\r\n\r\n\r\n\r\n        { !noParkPages.includes(location.pathname) &&\r\n          <CRow className=\"flex-center\">\r\n            <CCol style={{whiteSpace: 'nowrap'}}>Park&nbsp;\r\n            <CSelect value={getCookie('location')} onChange={(ev) => { updateLocation(ev.target.value); }} custom name=\"park\" id=\"park\" className=\"w-auto mx-2 mr-3\">\r\n\r\n          {parks && parks.map((park) => (\r\n                                  <option key={park.id} value={park.id}>\r\n                                    {park.name}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n                                </CCol>\r\n          </CRow>\r\n        }\r\n\r\n      </CSubheader>\r\n    {/* } */}\r\n\r\n    </CHeader>\r\n  )\r\n}\r\n\r\nexport default TheHeader\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\containers\\_nav.js",["823","824"],"import React from 'react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { freeSet } from '@coreui/icons'\r\nimport {getCookie} from '../helpers/sessionCookie.js'\r\nimport { CBadge } from '@coreui/react'\r\n\r\n\r\nlet _navWind =  [\r\n\r\n  {\r\n    _tag: 'CSidebarNavDropdown',\r\n    name: 'Monitor',\r\n    icon: <CIcon content={freeSet.cilMonitor} customClasses=\"c-sidebar-nav-icon\"/>,\r\n    _children: [\r\n      {\r\n        _tag: 'CSidebarNavDropdown',\r\n        name: 'Status',\r\n        to: '/dashboard',\r\n        // icon: <CIcon content={freeSet.cilMonitor} customClasses=\"c-sidebar-nav-icon\"/>\r\n        _children: [\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Now',\r\n            to: '/dashboard',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: '10-min Averages',\r\n            to: '/modules/status/ten-min-average',\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Overview',\r\n        to: '/modules/overview',\r\n        // icon: <CIcon content={freeSet.cilChartPie} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Alerts',\r\n        to: '/modules/overview/alerts',\r\n        // icon: <CIcon content={freeSet.cilChartPie} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavDropdown',\r\n        name: 'Climate',\r\n        route: '/modules/climate',\r\n        // icon: <CIcon content={freeSet.cilCloudy} customClasses=\"c-sidebar-nav-icon\"/>\r\n        _children: [\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Summary',\r\n            to: '/modules/climate/summary',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Trends',\r\n            to: '/modules/climate/trends',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Forecast',\r\n            to: '/modules/climate/forecast',\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Data Availability  ',\r\n        to: '/modules/data-availability',\r\n        // icon: <CIcon name=\"cil-list-rich\" customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n    ]\r\n  }\r\n]\r\n\r\n// if(getCookie('user') == 10) {\r\n\r\n  _navWind = [..._navWind, \r\n    {\r\n      _tag: 'CSidebarNavDropdown',\r\n      name: 'AI Analytics',\r\n      icon: <CIcon content={freeSet.cilLightbulb} customClasses=\"c-sidebar-nav-icon\"/>,\r\n      _children: [\r\n        {\r\n          _tag: 'CSidebarNavItem',\r\n          name: 'Energy Generation',\r\n          to: '/modules/ai-analytics/energy-generation',\r\n          // icon: <CIcon content={freeSet.cilMonitor} customClasses=\"c-sidebar-nav-icon\"/>\r\n        },\r\n        {\r\n          _tag: 'CSidebarNavItem',\r\n          name: 'Fault Analysis',\r\n          to: '/modules/ai-analytics/fault-analysis',\r\n          // icon: <CIcon content={freeSet.cilChartPie} customClasses=\"c-sidebar-nav-icon\"/>\r\n        },\r\n      ]\r\n    },\r\n  ]\r\n// }\r\n\r\n_navWind = [..._navWind, \r\n  {\r\n    _tag: 'CSidebarNavItem',\r\n    name: 'Budget',\r\n    to: '/modules/budget',\r\n    icon: <CIcon content={freeSet.cilDollar} customClasses=\"c-sidebar-nav-icon\"/>\r\n  },\r\n\r\n\r\n  // {\r\n  //   _tag: 'CSidebarNavItem',\r\n  //   name: 'Power Curve',\r\n  //   to: '/modules/power-curve',\r\n  //   icon: <CIcon name=\"cil-graph\" customClasses=\"c-sidebar-nav-icon\"/>\r\n  // },\r\n\r\n  {\r\n    _tag: 'CSidebarNavDropdown',\r\n    name: 'Analyze',\r\n    route: '/modules/analyze',\r\n    icon: 'cil-graph',\r\n    _children: [\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Performance',\r\n        to: '/modules/performance',\r\n        // icon: <CIcon content={freeSet.cilChartLine} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavDropdown',\r\n        name: 'Power Curve',\r\n        route: '/modules/power-curve',\r\n        // icon: 'cil-graph',\r\n        _children: [\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Summary',\r\n            to: '/modules/power-curve/summary',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Analysis',\r\n            to: '/modules/power-curve/analysis',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Benchmark',\r\n            to: '/modules/power-curve/benchmark',\r\n          },\r\n          \r\n        ]\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Alarms',\r\n        to: '/modules/alarms',\r\n        // icon: <CIcon name=\"cil-alarm\" customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Availability and Losses',\r\n        to: '/modules/availability-and-losses',\r\n        // icon: <CIcon name=\"cil-list-rich\" customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Diagnostics',\r\n        to: '/modules/diagnostics',\r\n        // icon: <CIcon content={freeSet.cilSpeedometer} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Curtailments',\r\n        to: '/modules/curtailments',\r\n        // icon: <CIcon content={freeSet.cilChart} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    _tag: 'CSidebarNavItem',\r\n    name: 'Documents',\r\n    to: '/modules/maintenance',\r\n    addlinkclasses: 'premium',\r\n    icon: <CIcon content={freeSet.cilFile} customClasses=\"c-sidebar-nav-icon\"/>,\r\n    // badge: <div className=\"hola\"></div>\r\n  },\r\n\r\n  // {\r\n  //   _tag: 'CSidebarNavItem',\r\n  //   name: 'Weather Forecast',\r\n  //   to: '/modules/weather-forecast',\r\n  //   icon: <CIcon content={freeSet.cilSun} customClasses=\"c-sidebar-nav-icon\"/>\r\n  // },\r\n\r\n\r\n]\r\n\r\n\r\nlet _navSolar =  [\r\n\r\n  {\r\n    _tag: 'CSidebarNavDropdown',\r\n    name: 'Monitor',\r\n    icon: <CIcon content={freeSet.cilMonitor} customClasses=\"c-sidebar-nav-icon\"/>,\r\n    _children: [\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Current Status',\r\n        to: '/dashboard',\r\n        // icon: <CIcon content={freeSet.cilMonitor} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Overview',\r\n        to: '/modules/overview',\r\n        // icon: <CIcon content={freeSet.cilChartPie} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavDropdown',\r\n        name: 'Climate',\r\n        route: '/modules/climate',\r\n        // icon: <CIcon content={freeSet.cilCloudy} customClasses=\"c-sidebar-nav-icon\"/>\r\n        _children: [\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Trends',\r\n            to: '/modules/climate/trends',\r\n          },\r\n          {\r\n            _tag: 'CSidebarNavItem',\r\n            name: 'Forecast',\r\n            to: '/modules/climate/forecast',\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    _tag: 'CSidebarNavDropdown',\r\n    name: 'Analyze',\r\n    route: '/modules/analyze',\r\n    icon: 'cil-graph',\r\n    _children: [\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Performance',\r\n        to: '/modules/performance',\r\n        // icon: <CIcon content={freeSet.cilChartLine} customClasses=\"c-sidebar-nav-icon\"/>\r\n      },\r\n    ]\r\n  },\r\n]\r\n\r\n_navWind = [..._navWind,\r\n  {\r\n    _tag: 'CSidebarNavDropdown',\r\n    name: 'Reports',\r\n    route: '/modules/reports',\r\n    icon: <CIcon content={freeSet.cilDescription} customClasses=\"c-sidebar-nav-icon\"/>,\r\n    _children: [\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'E-mail settings',\r\n        to: '/modules/reports/settings',\r\n      },\r\n      {\r\n        _tag: 'CSidebarNavItem',\r\n        name: 'Generate',\r\n        to: '/modules/reports/generate',\r\n      }\r\n    ]\r\n  },\r\n]\r\n\r\nlet _nav;\r\nif (getCookie('parkType') == 'solar') {\r\n  _nav = _navSolar\r\n} else {\r\n  _nav = _navWind\r\n}\r\n\r\n// _nav = [..._nav,\r\n//   {\r\n//     _tag: 'CSidebarNavDropdown',\r\n//     name: 'Reports',\r\n//     route: '/modules/reports',\r\n//     icon: <CIcon content={freeSet.cilDescription} customClasses=\"c-sidebar-nav-icon\"/>,\r\n//     _children: [\r\n//       {\r\n//         _tag: 'CSidebarNavItem',\r\n//         name: 'E-mail settings',\r\n//         to: '/modules/reports/settings',\r\n//       },\r\n//       {\r\n//         _tag: 'CSidebarNavItem',\r\n//         name: 'Generate',\r\n//         to: '/modules/reports/generate',\r\n//       }\r\n//     ]\r\n//   },\r\n// ]\r\n\r\nconst functionalities = JSON.parse(getCookie('functionalities'));\r\n\r\nconst filteredNav = [];\r\n_nav.forEach(level1 => {\r\n  if(level1._children && level1._children.length > 0) {\r\n    const retChildren = []; \r\n    level1._children.forEach(level2 => {\r\n      if(level2._children && level2._children.length > 0) {\r\n        const retChildren2 = []; \r\n        level2._children.forEach(level3 => {\r\n          if(functionalities.indexOf(level3.to) > -1){\r\n            retChildren2.push(level3);\r\n          }\r\n        });\r\n        level2._children = retChildren2;\r\n        retChildren.push(level2);\r\n      } else {\r\n        if(functionalities.indexOf(level2.to) > -1){\r\n          retChildren.push(level2);\r\n        }\r\n      }\r\n    });\r\n    level1._children = retChildren;\r\n    filteredNav.push(level1);\r\n  } else {\r\n    if(functionalities.indexOf(level1.to) > -1){\r\n      filteredNav.push(level1);\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport default filteredNav\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\routes.js",["825","826"],"import React from 'react';\r\nimport { getCookie } from './helpers/sessionCookie';\r\n\r\nconst Toaster = React.lazy(() => import('./views/notifications/toaster/Toaster'));\r\nconst Tables = React.lazy(() => import('./views/base/tables/Tables'));\r\n\r\nconst Breadcrumbs = React.lazy(() => import('./views/base/breadcrumbs/Breadcrumbs'));\r\nconst Cards = React.lazy(() => import('./views/base/cards/Cards'));\r\n// const Carousels = React.lazy(() => import('./views/base/carousels/Carousels'));\r\nconst Collapses = React.lazy(() => import('./views/base/collapses/Collapses'));\r\nconst BasicForms = React.lazy(() => import('./views/base/forms/BasicForms'));\r\n\r\nconst Jumbotrons = React.lazy(() => import('./views/base/jumbotrons/Jumbotrons'));\r\nconst ListGroups = React.lazy(() => import('./views/base/list-groups/ListGroups'));\r\nconst Navbars = React.lazy(() => import('./views/base/navbars/Navbars'));\r\nconst Navs = React.lazy(() => import('./views/base/navs/Navs'));\r\nconst Paginations = React.lazy(() => import('./views/base/paginations/Pagnations'));\r\nconst Popovers = React.lazy(() => import('./views/base/popovers/Popovers'));\r\nconst ProgressBar = React.lazy(() => import('./views/base/progress-bar/ProgressBar'));\r\nconst Switches = React.lazy(() => import('./views/base/switches/Switches'));\r\n\r\nconst Tabs = React.lazy(() => import('./views/base/tabs/Tabs'));\r\nconst Tooltips = React.lazy(() => import('./views/base/tooltips/Tooltips'));\r\nconst BrandButtons = React.lazy(() => import('./views/buttons/brand-buttons/BrandButtons'));\r\nconst ButtonDropdowns = React.lazy(() => import('./views/buttons/button-dropdowns/ButtonDropdowns'));\r\nconst ButtonGroups = React.lazy(() => import('./views/buttons/button-groups/ButtonGroups'));\r\nconst Buttons = React.lazy(() => import('./views/buttons/buttons/Buttons'));\r\nconst Charts = React.lazy(() => import('./views/charts/Charts'));\r\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'));\r\nconst CoreUIIcons = React.lazy(() => import('./views/icons/coreui-icons/CoreUIIcons'));\r\nconst Flags = React.lazy(() => import('./views/icons/flags/Flags'));\r\nconst Brands = React.lazy(() => import('./views/icons/brands/Brands'));\r\nconst Alerts = React.lazy(() => import('./views/notifications/alerts/Alerts'));\r\nconst Badges = React.lazy(() => import('./views/notifications/badges/Badges'));\r\nconst Modals = React.lazy(() => import('./views/notifications/modals/Modals'));\r\nconst Colors = React.lazy(() => import('./views/theme/colors/Colors'));\r\nconst Typography = React.lazy(() => import('./views/theme/typography/Typography'));\r\nconst Widgets = React.lazy(() => import('./views/widgets/Widgets'));\r\nconst Users = React.lazy(() => import('./views/users/Users'));\r\nconst User = React.lazy(() => import('./views/users/User'));\r\nconst UserSettings = React.lazy(() => import('./views/pages/user/settings'));\r\nconst ClientSettings = React.lazy(() => import('./views/pages/client/settings'));\r\n\r\n// Wind\r\nconst Overview = React.lazy(() => import('./views/pages/wind/overview/overview'));\r\nconst MonitorAlerts = React.lazy(() => import('./views/pages/wind/overview/alerts'));\r\nconst AIAnalyticsEnergyGeneration = React.lazy(() => import('./views/pages/wind/ai-analytics/energy-generation'));\r\nconst AIAnalyticsFaultAnalysis = React.lazy(() => import('./views/pages/wind/ai-analytics/fault-analysis'));\r\nconst Budget = React.lazy(() => import('./views/pages/wind/budget/budget'));\r\nconst PowerCurveSummary = React.lazy(() => import('./views/pages/wind/power-curve/summary'));\r\nconst PowerCurveAnalysis = React.lazy(() => import('./views/pages/wind/power-curve/analysis'));\r\nconst PowerCurveBenchmark = React.lazy(() => import('./views/pages/wind/power-curve/benchmark'));\r\nconst AvailabilityAndLosses = React.lazy(() => import('./views/pages/wind/availability-and-losses/availability-and-losses'));\r\nconst Performance = React.lazy(() => import('./views/pages/wind/performance/performance'));\r\nconst Diagnostics = React.lazy(() => import('./views/pages/wind/diagnostics/diagnostics'));\r\nconst ClimateSummary = React.lazy(() => import('./views/pages/wind/climate/summary'));\r\nconst ClimateTrends = React.lazy(() => import('./views/pages/wind/climate/trends'));\r\nconst ClimateForecast = React.lazy(() => import('./views/pages/wind/climate/forecast'));\r\nconst DataAvailability = React.lazy(() => import('./views/pages/wind/data-availability/data-availability'));\r\nconst Alarms = React.lazy(() => import('./views/pages/wind/alarms/alarms'));\r\nconst Curtailments = React.lazy(() => import('./views/pages/wind/curtailments/curtailments'));\r\nconst Maintenance = React.lazy(() => import('./views/pages/wind/maintenance/maintenance'));\r\n\r\n// Solar\r\nconst SolarOverview = React.lazy(() => import('./views/pages/solar/overview/overview'));\r\nconst SolarPerformance = React.lazy(() => import('./views/pages/solar/performance/performance'));\r\nconst SolarClimateTrends = React.lazy(() => import('./views/pages/solar/climate/trends'));\r\nconst SolarClimateForecast = React.lazy(() => import('./views/pages/solar/climate/forecast'));\r\n\r\n\r\nconst StatusTenMinAverage = React.lazy(() => import('./views/pages/status/ten-min-average'));\r\nconst ReportsSettings = React.lazy(() => import('./views/pages/reports/settings'));\r\nconst ReportsGenerate = React.lazy(() => import('./views/pages/reports/generate'));\r\n// const LightningReport = React.lazy(() => import('./views/pages/weather-forecast/weather-forecast'));\r\n\r\nconst SolarBattery = React.lazy(() => import('./views/pages/mocks/solar-battery'));\r\n\r\nlet routes = [\r\n  { path: '/', exact: true, name: 'Home' },\r\n  { path: '/dashboard', name: 'Monitor', component: Dashboard },\r\n  { path: '/theme', name: 'Theme', component: Colors, exact: true },\r\n  { path: '/theme/colors', name: 'Colors', component: Colors },\r\n  { path: '/theme/typography', name: 'Typography', component: Typography },\r\n  { path: '/base', name: 'Base', component: Cards, exact: true },\r\n  { path: '/base/breadcrumbs', name: 'Breadcrumbs', component: Breadcrumbs },\r\n  { path: '/base/cards', name: 'Cards', component: Cards },\r\n  // { path: '/base/carousels', name: 'Carousel', component: Carousels },\r\n  { path: '/base/collapses', name: 'Collapse', component: Collapses },\r\n  { path: '/base/forms', name: 'Forms', component: BasicForms },\r\n  { path: '/base/jumbotrons', name: 'Jumbotrons', component: Jumbotrons },\r\n  { path: '/base/list-groups', name: 'List Groups', component: ListGroups },\r\n  { path: '/base/navbars', name: 'Navbars', component: Navbars },\r\n  { path: '/base/navs', name: 'Navs', component: Navs },\r\n  { path: '/base/paginations', name: 'Paginations', component: Paginations },\r\n  { path: '/base/popovers', name: 'Popovers', component: Popovers },\r\n  { path: '/base/progress-bar', name: 'Progress Bar', component: ProgressBar },\r\n  { path: '/base/switches', name: 'Switches', component: Switches },\r\n  { path: '/base/tables', name: 'Tables', component: Tables },\r\n  { path: '/base/tabs', name: 'Tabs', component: Tabs },\r\n  { path: '/base/tooltips', name: 'Tooltips', component: Tooltips },\r\n  { path: '/buttons', name: 'Buttons', component: Buttons, exact: true },\r\n  { path: '/buttons/buttons', name: 'Buttons', component: Buttons },\r\n  { path: '/buttons/button-dropdowns', name: 'Dropdowns', component: ButtonDropdowns },\r\n  { path: '/buttons/button-groups', name: 'Button Groups', component: ButtonGroups },\r\n  { path: '/buttons/brand-buttons', name: 'Brand Buttons', component: BrandButtons },\r\n  { path: '/charts', name: 'Charts', component: Charts },\r\n  { path: '/icons', exact: true, name: 'Icons', component: CoreUIIcons },\r\n  { path: '/icons/coreui-icons', name: 'CoreUI Icons', component: CoreUIIcons },\r\n  { path: '/icons/flags', name: 'Flags', component: Flags },\r\n  { path: '/icons/brands', name: 'Brands', component: Brands },\r\n  { path: '/notifications', name: 'Notifications', component: Alerts, exact: true },\r\n  { path: '/notifications/alerts', name: 'Alerts', component: Alerts },\r\n  { path: '/notifications/badges', name: 'Badges', component: Badges },\r\n  { path: '/notifications/modals', name: 'Modals', component: Modals },\r\n  { path: '/notifications/toaster', name: 'Toaster', component: Toaster },\r\n  { path: '/widgets', name: 'Widgets', component: Widgets },\r\n  { path: '/users', exact: true,  name: 'Users', component: Users },\r\n  { path: '/users/:id', exact: true, name: 'User Details', component: User },\r\n  { path: '/user/settings', exact: true, name: 'User Settings', component: UserSettings },\r\n  { path: '/client/settings', exact: true, name: 'Client Settings', component: ClientSettings },\r\n]\r\nif (getCookie('parkType') == 'solar') {\r\n  routes = [...routes, \r\n    { path: '/modules/overview', exact: true, name: 'Overview', component: SolarOverview },\r\n    { path: '/modules/climate/trends', exact: true, name: 'Climate - Trends', component: SolarClimateTrends },\r\n    { path: '/modules/climate/forecast', exact: true, name: 'Climate - Forecast', component: SolarClimateForecast },\r\n    { path: '/modules/performance', exact: true, name: 'Performance', component: SolarPerformance },\r\n  ]\r\n} else {\r\n    // Wind\r\n    routes = [...routes, \r\n      { path: '/modules/overview', exact: true, name: 'Overview', component: Overview },\r\n      { path: '/modules/overview/alerts', exact: true, name: 'Alerts', component: MonitorAlerts },\r\n      { path: '/modules/ai-analytics/energy-generation', exact: true, name: 'AI Analytics - Energy Generation', component: AIAnalyticsEnergyGeneration },\r\n      { path: '/modules/ai-analytics/fault-analysis', exact: true, name: 'AI Analytics - Fault Analysis', component: AIAnalyticsFaultAnalysis },\r\n      { path: '/modules/budget', exact: true, name: 'Budget', component: Budget },\r\n      { path: '/modules/power-curve/summary', exact: true, name: 'Power Curve - Summary', component: PowerCurveSummary },\r\n      { path: '/modules/power-curve/analysis', exact: true, name: 'Power Curve - Analysis', component: PowerCurveAnalysis },\r\n      { path: '/modules/power-curve/benchmark', exact: true, name: 'Power Curve - Benchmark', component: PowerCurveBenchmark },\r\n      { path: '/modules/availability-and-losses', exact: true, name: 'Availability and Losses', component: AvailabilityAndLosses },\r\n      { path: '/modules/performance', exact: true, name: 'Performance', component: Performance },\r\n      { path: '/modules/diagnostics', exact: true, name: 'Diagnostics', component: Diagnostics },\r\n      { path: '/modules/data-availability', exact: true, name: 'Data Availability', component: DataAvailability },\r\n      { path: '/modules/climate/summary', exact: true, name: 'Climate - Summary', component: ClimateSummary },\r\n      { path: '/modules/climate/trends', exact: true, name: 'Climate - Trends', component: ClimateTrends },\r\n      { path: '/modules/climate/forecast', exact: true, name: 'Climate - Forecast', component: ClimateForecast },\r\n      { path: '/modules/alarms', exact: true, name: 'Alarms', component: Alarms },\r\n      { path: '/modules/curtailments', exact: true, name: 'Curtailments', component: Curtailments },\r\n      { path: '/modules/maintenance', exact: true, name: 'Maintenance', component: Maintenance },\r\n    ]\r\n  }\r\n  routes = [...routes, \r\n    { path: '/modules/status/ten-min-average', exact: true, name: 'Status - 10 Min Average', component: StatusTenMinAverage },\r\n    { path: '/modules/reports/settings', exact: true, name: 'Reports - Settings', component: ReportsSettings },\r\n    { path: '/modules/reports/generate', exact: true, name: 'Reports - Generate', component: ReportsGenerate },\r\n    { path: '/modules/solar-battery', exact: true, name: 'Solar + Battery', component: SolarBattery },\r\n  ]\r\n  // Wind\r\n  // { path: '/modules/wind/overview', exact: true, name: 'Overview', component: Overview },\r\n  // { path: '/modules/wind/overview/alerts', exact: true, name: 'Alerts', component: MonitorAlerts },\r\n  // { path: '/modules/wind/ai-analytics/energy-generation', exact: true, name: 'AI Analytics - Energy Generation', component: AIAnalyticsEnergyGeneration },\r\n  // { path: '/modules/wind/ai-analytics/fault-analysis', exact: true, name: 'AI Analytics - Fault Analysis', component: AIAnalyticsFaultAnalysis },\r\n  // { path: '/modules/wind/budget', exact: true, name: 'Budget', component: Budget },\r\n  // { path: '/modules/wind/power-curve/summary', exact: true, name: 'Power Curve - Summary', component: PowerCurveSummary },\r\n  // { path: '/modules/wind/power-curve/analysis', exact: true, name: 'Power Curve - Analysis', component: PowerCurveAnalysis },\r\n  // { path: '/modules/wind/power-curve/benchmark', exact: true, name: 'Power Curve - Benchmark', component: PowerCurveBenchmark },\r\n  // { path: '/modules/wind/availability-and-losses', exact: true, name: 'Availability and Losses', component: AvailabilityAndLosses },\r\n  // { path: '/modules/wind/performance', exact: true, name: 'Performance', component: Performance },\r\n  // { path: '/modules/wind/diagnostics', exact: true, name: 'Diagnostics', component: Diagnostics },\r\n  // { path: '/modules/wind/data-availability', exact: true, name: 'Data Availability', component: DataAvailability },\r\n  // { path: '/modules/wind/climate/summary', exact: true, name: 'Climate - Summary', component: ClimateSummary },\r\n  // { path: '/modules/wind/climate/trends', exact: true, name: 'Climate - Trends', component: ClimateTrends },\r\n  // { path: '/modules/wind/climate/forecast', exact: true, name: 'Climate - Forecast', component: ClimateForecast },\r\n  // { path: '/modules/wind/alarms', exact: true, name: 'Alarms', component: Alarms },\r\n  // { path: '/modules/wind/curtailments', exact: true, name: 'Curtailments', component: Curtailments },\r\n  // { path: '/modules/wind/maintenance', exact: true, name: 'Maintenance', component: Maintenance },\r\n  // Solar\r\n  // { path: '/modules/solar/overview', exact: true, name: 'Overview', component: SolarOverview },\r\n  // { path: '/modules/solar/climate/trends', exact: true, name: 'Climate - Trends', component: SolarClimateTrends },\r\n  // { path: '/modules/solar/climate/forecast', exact: true, name: 'Climate - Forecast', component: SolarClimateForecast },\r\n  // { path: '/modules/solar/performance', exact: true, name: 'Performance', component: SolarPerformance },\r\n\r\n  // { path: '/modules/reports/settings', exact: true, name: 'Reports - Settings', component: ReportsSettings },\r\n  // { path: '/modules/reports/generate', exact: true, name: 'Reports - Generate', component: ReportsGenerate },\r\n\r\n  // { path: '/modules/solar-battery', exact: true, name: 'Solar + Battery', component: SolarBattery },\r\n// ];\r\n\r\n\r\nconst functionalities = JSON.parse(getCookie('functionalities'));\r\nconst filteredRoutes = routes;\r\n// const filteredRoutes = routes.filter(r => functionalities.indexOf(r.path) > -1 )\r\n\r\nexport default filteredRoutes;\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\utils.js",["827","828","829","830","831","832","833","834","835","836","837","838","839"],"import React, {useState} from 'react'\r\n\r\nimport {CSelect,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n} from '@coreui/react'\r\n\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport colorLib from '@kurkle/color';\r\n\r\nexport const formatDate = (date, flags = '') => {\r\n\r\n  if (!date) return date;\r\n\r\n\tconst dateArr = date.split(' ')[0].split('-');\r\n\r\n  if (flags.includes('noyear')){\r\n    return `${dateArr[2]}/${dateArr[1]}`; \r\n  }else if (flags.includes('time')){\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]} ${dateArr[3]}`;\r\n  } else {\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const formatDate2 = (sourceDate, options = '') => {\r\n\r\n  const dateArr = sourceDate.split(' ');\r\n  const date = dateArr[0].split('-');\r\n  const time = dateArr[1];\r\n\r\n  const timeArr = time.split(':');\r\n\r\n  const hours = timeArr[0];\r\n  const minutes = timeArr[1];\r\n\r\n\r\n  return `${date[2]}/${date[1]}/${date[0]} ${hours}:${minutes}`;\r\n\r\n  \r\n\r\n}\r\n\r\n\r\nexport function getCurrentDateNDaysBefore(separator='',daysBefore){\r\n\r\n  let today = new Date();\r\n  let yesterday = new Date();\r\n  yesterday.setDate(today.getDate() - daysBefore);\r\n  let date = yesterday.getDate();\r\n  let month = yesterday.getMonth() + 1;\r\n  let year = yesterday.getFullYear();\r\n  \r\n  return `${year}${separator}${month<10?`0${month}`:`${month}`}${separator}${date<10?`0${date}`:`${date}`}`\r\n}\r\n\r\nexport const round = (number,decimals=1) => {\r\n\r\n  if (!number) return number;\r\n\r\n  return (+(Math.round(number + \"e+\" + decimals) + \"e-\" + decimals )).toFixed(decimals);\r\n\r\n}\r\n\r\nexport const formatNumber = (number) => {\r\n\r\n  if (!number) return number\r\n  number = '' + number\r\n  return number.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n\r\n}\r\n\r\nexport const transparentize = (value, opacity) => {\r\n  var alpha = opacity === undefined ? 0.5 : 1 - opacity;\r\n  return colorLib(value).alpha(alpha).rgbString();\r\n}\r\n\r\nexport const getDateLabel = (dateValue,from,to) => {\r\n\r\n  switch(dateValue) {\r\n    case 'y' : return 'Yesterday'; break;\r\n    case '30d' : return '30 days'; break;\r\n    case '12w' : return '12 weeks'; break;\r\n    case '12m' : return '12 month'; break;\r\n    case 'cy' : return 'Current year'; break;\r\n    case 'cm' : return 'Current month'; break;\r\n    case 'cw' : return 'Current week'; break;\r\n    case 'x' : return 'Custom range'; break;\r\n    case 'xx' : return from+' - '+to; break;\r\n    default : return `{${dateValue}}`; break;\r\n  }\r\n\r\n}\r\n\r\nexport const DateFilter = (props) => {\r\n\r\n  const [modal, setModal] = useState(false);\r\n  // const [disabled, setDisabled] = useState(props.disabled);\r\n  const [from, setFrom] = useState('');\r\n  const [to, setTo] = useState('');\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  let options = [];\r\n\r\n  if(props.options) {\r\n\r\n    options = props.options;\r\n\r\n  } else {\r\n\r\n    options = 'y,cm,cy,x,xx'.split(',');\r\n\r\n  }\r\n\r\n\r\n  const setDate = (x) => {\r\n    alert(x);\r\n  }\r\n\r\n  const changeListener = (ev) => {\r\n\r\n    if (ev.target.value == 'x') {\r\n      setModal(true);\r\n    } else {\r\n      props.onChange(ev.target.value);\r\n      setValue(ev.target.value)\r\n    }\r\n\r\n  }\r\n\r\n  const applyCustomRange = (value) => {\r\n\r\n    if (modal) {\r\n      let sdate = \"\";\r\n      let edate = \"\";\r\n      if (startDate !== null) {\r\n        sdate =  `${startDate.getFullYear()}-${(\"0\" + (startDate.getMonth() + 1)).slice(-2)}-${(\"0\" + startDate.getDate()).slice(-2)}`;\r\n      }\r\n      if (endDate !== null) {\r\n        edate =  `${endDate.getFullYear()}-${(\"0\" + (endDate.getMonth() + 1)).slice(-2)}-${(\"0\" + endDate.getDate()).slice(-2)}`;\r\n      }\r\n      props.onChange(`${sdate}--${edate}`);\r\n      setModal(false);\r\n      setFrom(sdate);\r\n      setTo(edate);\r\n      setValue('xx');\r\n\r\n    } else {\r\n      props.onChange(value);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // const [dateRange, setDateRange] = useState([null, null]);\r\n  // const [startDate, endDate] = dateRange;\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  \r\n  \r\n\r\n\treturn (<>\r\n\r\n\r\n\r\n\r\n\r\n            <CModal \r\n              show={modal} \r\n              onClose={setModal}\r\n              size=\"sm\"\r\n            >\r\n              <CModalHeader closeButton>\r\n                <CModalTitle>Select Period</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody className={\"text-center\"}>\r\n                \r\n                {/* <p>Seleccionar el intervalo temporal para filtrar los datos, utlizando el formato \"YYYY-MM-DD\".</p>\r\n\r\n                {props.warning && <p><strong>{props.warning}</strong></p>}\r\n\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInput placeholder=\"Desde\" onChange={(ev) => { setFrom(ev.target.value) }} aria-label=\"Username\" />\r\n                  &nbsp;\r\n                  <CInput placeholder=\"Hasta\" onChange={(ev) => { setTo(ev.target.value) }} aria-label=\"Server\" />\r\n                </CInputGroup> */}\r\n\r\n                <DatePicker\r\n                  dateFormat=\"yyyy-MM-dd\"\r\n                  selectsRange={true}\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  maxDate={new Date()}\r\n                  onChange={(dates) => {\r\n                    // setDateRange(update);\r\n                    const [start, end] = dates;\r\n                    setStartDate(start)\r\n                    setEndDate(end)\r\n                  }}\r\n                  inline\r\n                  \r\n                />\r\n\r\n\r\n              </CModalBody>\r\n              <CModalFooter>\r\n                <CButton color=\"primary\"  onClick={applyCustomRange} >Submit</CButton>{' '}\r\n                <CButton \r\n                  color=\"secondary\" \r\n                  onClick={() => setModal(false)}\r\n                >Cancel</CButton>\r\n              </CModalFooter>\r\n            </CModal>\r\n\r\n      <CSelect value={value} disabled={props.disabled} onChange={changeListener} custom name=\"period\" id=\"period\" className='input-md'>{options.map((option) => {\r\n\r\n                return <option key={option} selected={props.selected==option} value={option} onClick={changeListener}>\r\n                  {getDateLabel(option,from,to)}\r\n                </option>\r\n              })}</CSelect>\r\n\r\n\r\n\r\n             \r\n              \r\n\r\n              </>)\r\n\r\n}","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\Users.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\User.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\dashboard\\Dashboard.js",["840","841","842","843","844","845","846"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CBadge\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nimport { freeSet } from '@coreui/icons'\r\nimport DataAPI from '../../helpers/DataAPI.js'\r\nimport { formatDate2, round, formatNumber } from '../../helpers/utils.js'\r\nimport CIcon from '@coreui/icons-react';\r\nimport {setCookie,getCookie} from '../../helpers/sessionCookie.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [hasWindParks, setHasWindParks] = useState(false);\r\n  const [hasSolarParks, setHasSolarParks] = useState(false);\r\n\r\n  const [windGeneratorsTableData, setWindGeneratorsTableData] = useState([]);\r\n  const [tableDataWindCurrentStatus, setTableDataWindCurrentStatus] = useState(false);\r\n\r\n  const [solarGeneratorsTableData, setSolarGeneratorsTableData] = useState([]);\r\n  const [tableDataSolarCurrentStatus, setTableDataSolarCurrentStatus] = useState(false);\r\n\r\n  const fetchData = () => {\r\n\r\n    // const body = {}\r\n    // body.location = getCookie('location');\r\n    // setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'wind/dashboard/now',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDate2(responseData.dateData));\r\n\r\n      if( getCookie('parkType') == '')\r\n        setCookie('parkType', responseData.locations[0].type);\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasWindParks(true);\r\n\r\n      const tableDataWindCurrentStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                  // today:formatNumber(round(responseData.dataToday.production,1))+\" MWh\"\r\n                },\r\n                // {\r\n                //   item:\"Turbine average wind speed:\",\r\n                //   now:round(responseData.dataNow.windSpeed,1)+\" m/s\",\r\n                //   // today:round(responseData.dataToday.windSpeed,1)+\" m/s\"\r\n                // },\r\n                {\r\n                  item:\"Turbines in operation:\",\r\n                  now:responseData.amountGeneratorsOk+\"/\"+responseData.amountGenerators,\r\n                  // today:\"\"\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now'\r\n          // 'today'\r\n        ]\r\n      }\r\n      setTableDataWindCurrentStatus(tableDataWindCurrentStatus)\r\n\r\n      const windGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const turbinesStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.turbine = d.code;\r\n            line.indicator = d.dataNow.indicator;\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\");\r\n            line.windSpeed = (d.dataNow.windSpeed!=undefined?formatNumber(round(d.dataNow.windSpeed,1)):\"\");\r\n            line.status = d.dataNow.status;\r\n            return line;\r\n          });\r\n\r\n          const total =  {\r\n            turbine: \"Total\",\r\n            indicator: \"\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            windSpeed: formatNumber(round(rL.dataNow.windSpeed,1)),\r\n            status: \"\"\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(turbinesStatus),\r\n            fields:  [\r\n              'turbine',\r\n              { key: 'indicator', label: '' },\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'windSpeed', label: 'Wind Speed (m/s)' },\r\n              'status'\r\n            ]\r\n          }\r\n    \r\n          windGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setWindGeneratorsTableData(windGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'solar/dashboard/now',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDate2(responseData.dateData));\r\n\r\n      // if( getCookie('parkType') == '')\r\n      //   setCookie('parkType', responseData.locations[0].type);\r\n      \r\n      // setCookie('parkName', responseData.locations[0].name);\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasSolarParks(true);\r\n\r\n      const tableDataSolarCurrentStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                  // today:formatNumber(round(responseData.dataToday.production,1))+\" MWh\"\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now'\r\n          // 'today'\r\n        ]\r\n      }\r\n      setTableDataSolarCurrentStatus(tableDataSolarCurrentStatus)\r\n\r\n      const solarGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const generatorStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.inverter = d.code\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\")\r\n            line.irradiance = \"\"\r\n            return line\r\n          });\r\n\r\n          const total =  {\r\n            inverter: \"Total\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            irradiance: formatNumber(round(rL.dataNow.irradiance,3))\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(generatorStatus),\r\n            fields:  [\r\n              'inverter',\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'irradiance', label: 'Irradiance (kw/m2)' }\r\n            ]\r\n          }\r\n    \r\n          solarGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setSolarGeneratorsTableData(solarGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    const interval = setInterval(() => fetchData(), 5000)\r\n    return () => clearInterval(interval) // cleanup\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (response  && !response.error) {\r\n          // setGenerators(response.generators);\r\n          setLoading(true);\r\n          fetchData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return ''\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol xs=\"10\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Current Status\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Last updated on: {lastUpdated}</div>\r\n            </CCol>\r\n            <CCol xs=\"2\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <CIcon content={freeSet.cilReload} className={\"cursor-pointer animate-rotate\"} size={'lg'} title={'Refresh'}\r\n                onClick={() => fetchData()}/>\r\n            </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n\r\n            <CRow>\r\n\r\n              { hasWindParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-wind px-sm-4 mb-4\">\r\n\r\n                  <div style={{marginBottom:'30px'}}>\r\n                    <CRow>\r\n                    \r\n                      { tableDataWindCurrentStatus &&\r\n                        <CCol xl={!hasSolarParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\">\r\n                          <h4>Wind Portfolio</h4>\r\n                          <CDataTable\r\n                              addTableClasses=\"current-status-table\"\r\n                              striped\r\n                              items={tableDataWindCurrentStatus.items}\r\n                              fields={tableDataWindCurrentStatus.fields}\r\n                            />\r\n                        </CCol>\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n              { hasSolarParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n\r\n                <div style={{marginBottom:'30px'}}>\r\n                      <CRow>\r\n                      \r\n                        { tableDataSolarCurrentStatus &&\r\n                          <CCol xl={!hasWindParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\">\r\n                            <h4>Solar Portfolio</h4>\r\n                            <CDataTable\r\n                                addTableClasses=\"current-status-table\"\r\n                                striped\r\n                                items={tableDataSolarCurrentStatus.items}\r\n                                fields={tableDataSolarCurrentStatus.fields}\r\n                              />\r\n                          </CCol>\r\n                        }\r\n\r\n                      </CRow>\r\n                    </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n            <CRow>\r\n\r\n              { hasWindParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-wind px-sm-4 mb-4\">\r\n\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { windGeneratorsTableData.length > 0 &&\r\n                        windGeneratorsTableData.map(park => (  \r\n                        <CCol xl={!hasSolarParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'windSpeed':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.windSpeed}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n              { hasSolarParks &&\r\n\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { solarGeneratorsTableData.length > 0 &&\r\n                        solarGeneratorsTableData.map(park => (  \r\n                        <CCol xl={!hasWindParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'irradiance':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.irradiance}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n                  \r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\Charts.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\Widgets.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\theme\\colors\\Colors.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\modals\\Modals.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\brands\\Brands.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\theme\\typography\\Typography.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\badges\\Badges.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\toaster\\Toaster.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\notifications\\alerts\\Alerts.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\buttons\\Buttons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\brand-buttons\\BrandButtons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\icons\\flags\\Flags.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\buttons\\button-groups\\ButtonGroups.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tooltips\\Tooltips.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tabs\\Tabs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\progress-bar\\ProgressBar.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\popovers\\Popovers.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\paginations\\Pagnations.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\navbars\\Navbars.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\jumbotrons\\Jumbotrons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\navs\\Navs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\carousels\\Carousels.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\collapses\\Collapses.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\cards\\Cards.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\switches\\Switches.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\list-groups\\ListGroups.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\forms\\BasicForms.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\base\\tables\\Tables.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\WidgetsBrand.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\MainChartExample.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\reusable\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\widgets\\WidgetsDropdown.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\ChartBarSimple.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\charts\\ChartLineSimple.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\users\\UsersData.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\reusable\\DocsLink.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\others\\ChartLoading.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\helpers\\SessionTimeout.js",["847","848","849"],"import React, {\r\n    useEffect,\r\n    useCallback,\r\n    useRef,\r\n    Fragment,\r\n  } from 'react';\r\nimport moment from 'moment';\r\nimport {setCookie,getCookie} from './sessionCookie.js'\r\n  \r\nconst SessionTimeout =()=> {\r\n\r\n    \r\n    // const [second, setSecond] = useState(0);\r\n\r\n    const events = ['click', 'load', 'scroll'];\r\n    const authenticated = getCookie('name')!==false && getCookie('name')!=='';\r\n\r\n    let timeStamp;\r\n    let userInactiveInterval = useRef();\r\n    let startTimerInterval = useRef();\r\n    \r\n\r\n    // start inactive check\r\n    let timeChecker = () => {\r\n        startTimerInterval.current = setTimeout(() => {\r\n            let storedTimeStamp = getCookie('lastTimeStamp'); //sessionStorage.getItem('lastTimeStamp');\r\n            userInactive(storedTimeStamp);\r\n        }, 60000);\r\n    };\r\n\r\n    // inactive timer\r\n    let userInactive = (timeString) => {\r\n        clearTimeout(startTimerInterval.current);\r\n    \r\n        userInactiveInterval.current = setInterval(() => {\r\n        const maxTime = 540; // Maximum ideal time given before logout \r\n        // const popTime = 1; // remaining time (notification) left to logout.\r\n    \r\n        const diff = moment.duration(moment().diff(moment(timeString)));\r\n        const minPast = diff.minutes();\r\n        // const leftSecond = 60 - diff.seconds();\r\n    \r\n        // if (minPast === popTime) {\r\n        //     setSecond(leftSecond);\r\n        // }\r\n    \r\n        if (minPast === maxTime) {\r\n            clearInterval(userInactiveInterval.current);\r\n            setCookie('lastTimeStamp', '');\r\n            setCookie('name', '');\r\n            window.location.reload();\r\n        }\r\n        }, 1000);\r\n    };\r\n\r\n    // reset interval timer\r\n    let resetTimer = useCallback(() => {\r\n        clearTimeout(startTimerInterval.current);\r\n        clearInterval(userInactiveInterval.current);\r\n    \r\n        if (authenticated) {\r\n            timeStamp = moment();\r\n            setCookie('lastTimeStamp', timeStamp);\r\n        } else {\r\n            clearInterval(userInactiveInterval.current);\r\n            setCookie('lastTimeStamp', '');\r\n        }\r\n        timeChecker();\r\n    }, [authenticated]);\r\n    \r\n    \r\n    useEffect(() => {\r\n        events.forEach((event) => {\r\n            window.addEventListener(event, resetTimer);\r\n        });\r\n    \r\n        timeChecker();\r\n    \r\n        return () => {\r\n            clearTimeout(startTimerInterval.current);\r\n        };\r\n    }, [resetTimer, timeChecker, events]);\r\n\r\n\r\n    return <Fragment />;\r\n};\r\n\r\nexport default SessionTimeout;","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\ResetPassword.js",["850","851"],"import { \r\n  Redirect,\r\n  useLocation } from \"react-router-dom\";\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport React, {useState} from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CLink,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\n\r\nconst ResetPassword = () => {\r\n\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [newPasswordConfirm, setNewPasswordConfirm] = useState(false);\r\n  const [changed, setChanged] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  \r\n  const authenticated = getCookie('name')!==false && getCookie('name')!=='';\r\n\r\n  const useQuery = () => {\r\n    const { search } = useLocation();\r\n    return React.useMemo(() => new URLSearchParams(search), [search]);\r\n  }\r\n\r\n  const query = useQuery();\r\n\r\n  const sendResetPassword = () => {\r\n\r\n    const reset_token = query.get(\"reset_token\")\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/reset',\r\n      'method' : 'POST',\r\n      'body': {\r\n          \"id\": reset_token,\r\n          \"newPassword\": newPassword,\r\n          \"newPasswordConfirm\": newPasswordConfirm\r\n      },\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.changed) {          \r\n          \r\n          setChanged(true);\r\n          setMessage('Your password was updated')\r\n\r\n          // window.location.reload();\r\n        } else {\r\n          alert('An error occurred!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('An error occurred!') }\r\n    )\r\n  }\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />:\r\n\r\n  \r\n    \r\n    <div className=\"bg-gradient-custom c-app c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={changed?\"4\":\"5\"}>\r\n            <CCard className=\"p-4 border-light shadow\">\r\n              <CCardBody>\r\n                {!changed ?\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">Reset Password</h1>\r\n                    <p className=\"text-muted\">Enter your e-mail address</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setNewPassword(ev.target.value)}} type=\"password\" placeholder=\"New Password\" maxLength={100} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setNewPasswordConfirm(ev.target.value)}} type=\"password\" placeholder=\"Confirm New Password\" maxLength={100}  />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"12\">\r\n                        <CButton onClick={sendResetPassword} color=\"primary\" className=\"px-4 mr-3\">Send</CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                  :\r\n\r\n                  <div>\r\n                    <CRow className=\"justify-content-center text-dark text-center\">\r\n                      <CCol>\r\n                        <h5>{message}</h5>\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"text-center\">\r\n                      <CCol>\r\n                        <CButton onClick={()=> window.open(\"/\",\"_top\")} color=\"primary\" className=\"px-4 mt-3\">Go to Login</CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </div>\r\n\r\n                }\r\n\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default ResetPassword\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\login\\RequestPasswordReset.js",["852"],"import { Redirect } from \"react-router-dom\";\r\n\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport React, {useState} from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CLabel,\r\n  CLink,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst RequestPasswordReset = () => {\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  \r\n  const authenticated = getCookie('name')!==false && getCookie('name')!=='';\r\n\r\n\r\n  const sendPasswordResetRequest = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/reset/'+email,\r\n      'method' : 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.received) {          \r\n          setEmailSent(true);\r\n          setMessage(\"An e-mail has been sent with the instruction to set your new password. If you don't receive it in the next minute try re-sending the request.\");\r\n        } else {\r\n          alert('An error occurred!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('An error occurred!') }\r\n    )\r\n  }\r\n\r\n  const resendRequest = () => {\r\n    setEmailSent(false);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />\r\n      \r\n    :\r\n    \r\n    <div className=\"bg-gradient-custom c-app c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"6\">\r\n            <CCard className=\"p-4 border-light shadow\">\r\n              <CCardBody>\r\n                {!emailSent ?\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">Reset Password</h1>\r\n                    <p className=\"text-muted\">Enter your e-mail address</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-envelope-closed\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setEmail(ev.target.value)}} value={email} type=\"text\" placeholder=\"E-mail\" autoComplete=\"username\" />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"12\">\r\n                        <CButton onClick={sendPasswordResetRequest} color=\"primary\" className=\"px-4 mr-3\">Send</CButton>\r\n                        <CLink className=\"px-3 mr-3 text-dark-blue\" to=\"/\" >Back to Login</CLink>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                  :\r\n                  <div className=\"text-center\">\r\n                    <CLabel className='text-dark mb-3'>{message}</CLabel>\r\n                    <CButton onClick={resendRequest} color=\"primary\" className=\"px-4 mr-3\">Re-send email</CButton>\r\n                    <CLink className=\"pt-2 mr-3 text-dark-blue d-block\" to=\"/\" >Back to Login</CLink>\r\n                  </div>\r\n                }\r\n\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default RequestPasswordReset\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\reports\\settings.js",["853","854","855","856","857","858","859","860","861","862"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CAlert,\r\n  CLabel,\r\n  CButton,\r\n  CDataTable,\r\n  CInputCheckbox\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\n\r\nconst Reports = () => {\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [configData, _setConfigData] = useState([]);\r\n  const configDataRef = useRef(configData);\r\n  const setConfigData = data => {\r\n    configDataRef.current = data;\r\n    _setConfigData(data);\r\n  };\r\n  const [tableFields, setTableFields] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [scopedSlots, setScopedSlots] = useState(false);\r\n  const [reports, setReports] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n\r\n  const [saving, setSaving] = useState(false);\r\n  const [changesMade, setChangesMade] = useState(false);\r\n  const [saved, setSaved] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    loadConfiguration();\r\n  }, []);\r\n\r\n  \r\n\r\n  const loadConfiguration = () => {\r\n    \r\n    DataAPI({\r\n      'endpoint': 'report/configure',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        if (response.loaded) {\r\n          \r\n          setReports(response.reports)\r\n\r\n          let locations = [];\r\n          let rows = [];\r\n          response.locations.forEach((location,index) => {\r\n              locations[location.id] = location.name;\r\n              rows[location.id] = [];\r\n          });\r\n          setLocations(locations)\r\n\r\n          response.settings.forEach((setting,index) => {\r\n            if (rows[setting.locId] != undefined)\r\n              rows[setting.locId][setting.repId] = setting.selected;\r\n          });\r\n\r\n          let data = []\r\n\r\n\r\n          let tableData = [];\r\n          rows.map((row, locId) => {\r\n            let rowData = [];\r\n            row.map((setting, repId) => {\r\n              rowData[repId] = setting;\r\n            });\r\n            rowData['park'] = locations[locId];\r\n            tableData.push(rowData);\r\n            data[locId] = rowData;\r\n          });\r\n\r\n\r\n          setConfigData(data);\r\n          \r\n\r\n          let sSlots = {};\r\n          let reports = [];\r\n          response.reports.forEach((report,index) => {\r\n            reports[report.id] = report.title;\r\n            sSlots[report.id] = (item,x) => {\r\n              if (item[report.id]) {\r\n                return (\r\n                <td className={'align-top'}>\r\n                  <CInputCheckbox  name={\"check-\"+response.locations[x].id+\"-\"+report.id} className={'mx-0 mt-1'} defaultChecked onChange={(ev)=>updateData(ev)}/>\r\n                </td>)\r\n              } else {\r\n                return (\r\n                <td className={'align-top'}>\r\n                  <CInputCheckbox  name={\"check-\"+response.locations[x].id+\"-\"+report.id} className={'mx-0 mt-1'} onChange={(ev)=>updateData(ev)}/>\r\n                </td>)\r\n              }\r\n            }\r\n          });\r\n          setScopedSlots(sSlots);\r\n\r\n          const tableFields = reports.map((title, id) => ({\r\n              key: id,\r\n              label: title\r\n            }\r\n          ));\r\n          tableFields.unshift({\r\n            key: 'park',\r\n            label: 'Park'\r\n          });\r\n\r\n          setTableData(tableData);\r\n          setTableFields(tableFields);\r\n\r\n          setLoaded(true);\r\n\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\nconst updateData = (ev) => {\r\n  let name = ev.target.name;\r\n  let nameSplit = name.split('-');\r\n  let locId = nameSplit[1];\r\n  let repId = nameSplit[2];\r\n  let data = configDataRef.current;\r\n  data[locId][repId] = ev.target.checked;\r\n  setConfigData(data);\r\n  setChangesMade(true);\r\n}\r\n\r\nconst saveChanges = () => {\r\n\r\n  setSaving(true);\r\n\r\n  const body = {}\r\n  let settings = [];\r\n  configDataRef.current.map((row,locId) => (\r\n    row.map((setting,repId) => {\r\n      settings.push(\r\n      {\r\n        \"locId\": locId,\r\n        \"repId\": repId,\r\n        \"selected\": setting\r\n      })}\r\n    )\r\n  ))\r\n  body.settings = settings;\r\n  \r\n    \r\n  DataAPI({\r\n    'endpoint': 'report/configure',\r\n    'method': 'POST',\r\n    'body': body\r\n  }).then(\r\n    response => {\r\n\r\n      setSaving(false)\r\n      setChangesMade(false)\r\n\r\n      if (response.error) {\r\n        if (response.error.message) {\r\n          return(alert(response.error.message))\r\n        } else {\r\n          return(alert(response.error)) \r\n        }\r\n      }\r\n\r\n      if (response.saved) {\r\n        setSaved(true);\r\n        setMessage('Your preferences were successfully updated')\r\n      }\r\n    })\r\n      \r\n\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Reports\r\n            </h3>\r\n            <div className=\"text-medium-emphasis\">E-mail settings</div>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            { saved &&\r\n              <CAlert color=\"success\" >{message}</CAlert>\r\n            }\r\n            <h5 className={'mb-4'} >Please select reports you wish to receive by e-mail</h5>\r\n            {loaded &&\r\n              <div>\r\n                <CDataTable\r\n                      items={tableData}\r\n                      fields={tableFields}\r\n                      striped\r\n                      scopedSlots = {scopedSlots}\r\n                    />\r\n\r\n                \r\n              </div>\r\n            }\r\n\r\n          </CCol>\r\n        </CRow>\r\n\r\n        {changesMade &&\r\n          <CRow>\r\n            <CCol xs=\"12\">\r\n              <div className={'border-top mt-2 pt-4'}>\r\n                <CButton onClick={saveChanges} color=\"primary\" disabled={saving} className=\"px-4 mr-3\">Save Preferences</CButton>\r\n              </div>\r\n            </CCol>\r\n          </CRow>\r\n        }\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\reports\\generate.js",["863","864","865","866","867","868","869","870","871","872","873","874","875","876","877"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CAlert,\r\n  CLabel,\r\n  CButton,\r\n  CDataTable,\r\n  CSelect,\r\n  CInputCheckbox\r\n} from '@coreui/react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport Moment from 'moment';\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nconst Reports = () => {\r\n\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [reports, setReports] = useState([]);\r\n\r\n  const [type, setType] = useState('');\r\n  const [requires, setRequires] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n\r\n  const [canRequest, setCanRequest] = useState(false);\r\n  const [sending, setSending] = useState(false);\r\n  const [generated, setGenerated] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    loadOptions();\r\n  }, []);\r\n\r\n  const loadOptions = () => {\r\n    \r\n    DataAPI({\r\n      'endpoint': 'report/generate',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setReports(response.reports)\r\n        setLoaded(true);\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  const requestReport = () => {\r\n\r\n    setSending(true);\r\n  \r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    const dates = endDate!='' ? [Moment(startDate).format('YYYY-MM-DD'),Moment(endDate).format('YYYY-MM-DD')] : [Moment(startDate).format('YYYY-MM-DD')]\r\n    body.report = {\r\n      id: type,\r\n      values: dates\r\n    }\r\n      \r\n    DataAPI({\r\n      'endpoint': 'report/generate',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n  \r\n        setSending(false)\r\n  \r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n  \r\n        if (response.generated) {\r\n          setGenerated(true);\r\n          setMessage('Your report has been requested. You will receive it by e-mail shortly.')\r\n        }\r\n      })\r\n        \r\n  \r\n  }\r\n  \r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Reports\r\n            </h3>\r\n            <div className=\"text-medium-emphasis\">Generate</div>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n        <CRow>\r\n          <CCol>\r\n            { generated &&\r\n              <CAlert color=\"success\" >{message}</CAlert>\r\n            }\r\n            <h4 className={'mb-4'} >Generate and Download Report</h4>\r\n            <CRow className={'mb-3'}>\r\n              <CCol className=\"d-flex flex-center\">\r\n                <h6 className=\"mr-2 mb-0\" style={{minWidth:'128px'}}>Select report type</h6>\r\n                <CSelect disabled={loading} onChange={(ev) => {setType(ev.target.value);setRequires(ev.target.selectedOptions[0].dataset.requires);setCanRequest(false);setStartDate('');setEndDate('');setGenerated(false); }} custom name=\"type\" id=\"type\" className=\"input-md\">\r\n                  <option value=\"\" disabled selected>-- Select --</option>\r\n                  {reports.map((report) => (\r\n                    <option value={report.id} data-requires={report.requires}>\r\n                      {report.title}\r\n                    </option>\r\n                  ))}</CSelect>\r\n                </CCol>\r\n            </CRow>\r\n            <CRow className={'mb-3'}>\r\n              <CCol className=\"d-flex flex-center\">\r\n                <h6 className=\"mr-2 mb-0\" style={{minWidth:'128px'}}>{requires=='range'?'Select report period':'Select report date'}</h6>\r\n\r\n\r\n                {(() => {\r\n                  switch (requires) {\r\n                    case 'range':\r\n                      return <DatePicker\r\n                                className={'col-6 custom-select input-md'}\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                selectsRange={true}\r\n                                disabled={type==''}\r\n                                startDate={startDate}\r\n                                endDate={endDate}\r\n                                maxDate={new Date()}\r\n                                onChange={(dates) => {\r\n                                  const [start, end] = dates;\r\n                                  setStartDate(start)\r\n                                  setEndDate(end)\r\n                                  setCanRequest(start!=undefined && end!=undefined);\r\n                                  setGenerated(false);\r\n                                }}\r\n                              /> \r\n                    case 'month':\r\n                      return <DatePicker\r\n                                className={'col-6 custom-select input-md'}\r\n                                dateFormat=\"yyyy-MM\"\r\n                                selected={startDate}\r\n                                maxDate={new Date()}\r\n                                showMonthYearPicker\r\n                                onChange={(date) => {\r\n                                  setStartDate(date)\r\n                                  setEndDate('')\r\n                                  setCanRequest(date!=undefined);\r\n                                  setGenerated(false);\r\n                                }}\r\n                              />\r\n                    default:\r\n                      return <DatePicker\r\n                                className={'col-6 custom-select input-md'}\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                selected={startDate}\r\n                                maxDate={new Date()}\r\n                                onChange={(date) => {\r\n                                  setStartDate(date)\r\n                                  setEndDate('')\r\n                                  setCanRequest(date!=undefined);\r\n                                  setGenerated(false);\r\n                                }}\r\n                              />  \r\n                  }\r\n                })()}\r\n\r\n                  { requires == 'week' &&\r\n                    <span className='ml-2'>the selected day and the previous 6 days</span>\r\n                  }\r\n                  {/* { requires == 'month' &&\r\n                    <span className='ml-2'>the month of the selected day</span>\r\n                  } */}\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <div className={'border-top mt-2 pt-4'}>\r\n                  <CButton onClick={requestReport} color=\"primary\" disabled={sending || !canRequest} className=\"px-4 mr-3\">Submit</CButton>\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n\r\n          </CCol>\r\n        </CRow>\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\mocks\\solar-battery.js",["878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation, Redirect } from \"react-router-dom\";\r\nimport {setCookie, getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSpinner,\r\n  CImg,\r\n  CModal,\r\n  CModalBody,\r\n} from '@coreui/react'\r\n\r\nimport img from '../../../assets/img-solar.jpg'\r\n\r\n\r\nconst SolarBattery = () => {\r\n\r\n\r\n  return (\r\n\r\n    (getCookie('parkType') == 'wind') ?\r\n\r\n      <Redirect to={'/'} />\r\n      \r\n    :\r\n\r\n    <div className=\"position-relative\">\r\n        <CImg\r\n            width={'100%'}\r\n            src={img}\r\n            alt=\"\"\r\n            className={'img-placeholder-full'}\r\n            style={{marginLeft:'-30px',marginTop:'-2rem',marginBottom:'-50px',width:'106%'}}\r\n        />\r\n        <CCard\r\n            className=\"show d-block position-absolute box-shadow px-3\"\r\n            style={{top:'15%',left:'20%',boxShadow:'1px 1px 15px 2px #3737419c'}}\r\n            >\r\n            <CCardBody>\r\n                <h3 className='text-center'\r\n                    style={{fontWeight: '400'}}\r\n                    >Solar + Battery</h3>\r\n                <h1 className='text-center my-1'\r\n                    style={{textTransform:'uppercase'}}\r\n                    >Coming June 2022</h1>\r\n            </CCardBody>\r\n        </CCard>\r\n    </div>\r\n\r\n\r\n    //   <CCard className=\"mb-4\">\r\n\r\n    //   <CCardHeader>\r\n    //       <CRow>\r\n    //         <CCol sm=\"6\">\r\n    //           <h3 id=\"diagnostics\" className=\"card-title mb-0\">\r\n    //             AI Analytics - Energy Generation\r\n    //           </h3>\r\n    //           {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n    //         </CCol>            \r\n    //       </CRow>\r\n\r\n    //     </CCardHeader>\r\n\r\n    //     <CCardBody>\r\n\r\n              \r\n    //     <CRow className=\"mb-4\">\r\n    //       <CCol>\r\n    //         <h4 className='text-center'>Wind Turbines for investigation/resolution: 3</h4>\r\n    //         <CImg\r\n    //           width={'100%'}\r\n    //           src={img}\r\n    //           alt=\"\"\r\n    //           className={'mt-3'}\r\n    //         />\r\n\r\n    //       </CCol>\r\n    //     </CRow>\r\n\r\n          \r\n    //     </CCardBody>\r\n\r\n    //   </CCard>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default SolarBattery\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\constants.js",[],["894","895"],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\ai-analytics\\fault-analysis.js",["896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927"],"import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSpinner,\r\n  CImg,\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {formatNumber, formatDate2, round, getDateLabel, DateFilter} from '../../../../helpers/utils.js'\r\nimport {setCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Line, Scatter, Bar } from 'react-chartjs-2';\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\n\r\nconst FaultAnalysis = () => {\r\n\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   loadGenerators();\r\n  // }, []);\r\n\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"6\">\r\n              <h3 id=\"diagnostics\" className=\"card-title mb-0\">\r\n                AI Analytics - Fault Analysis\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>            \r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n              \r\n        <CRow className=\"mb-4 py-5\">\r\n          <CCol>\r\n            <h5 className='text-center'>Pitch, yaw, generator RPM, temperatures, wind measurements</h5>\r\n            <h2 className='text-center'>Under development</h2>\r\n          </CCol>\r\n        </CRow>\r\n\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default FaultAnalysis\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\ai-analytics\\energy-generation.js",["928","929","930","931","932","933","934"],"import React, { useState, useEffect } from 'react'\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSpinner,\r\n  CImg,\r\n} from '@coreui/react'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\nimport res from './res_short.json';\r\n\r\n\r\nconst EnergyGeneration = () => {\r\n\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [period, setPeriod] = useState('cm');\r\n  // const [data, setData] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    // loadStaticData();\r\n  }, []);\r\n\r\n\r\n  // const loadStaticData = () => {\r\n\r\n  //   const data = res.data;\r\n  //   const graphData = {\r\n  //     labels: data.evolution.map((point, i) => { return point.x }),\r\n  //     datasets: [\r\n  //       {\r\n  //         label: 'Data',\r\n  //         data: data.evolution.map((point, i) => { return point.y * 100 }),\r\n  //         borderColor: '#bc5090',\r\n  //         backgroundColor: 'transparent',\r\n  //         borderWidth: 1,\r\n  //         pointRadius: 0\r\n  //       },\r\n  //       {\r\n  //         label: 'Outlier Limit Top',\r\n  //         data: data.evolution.map((point, i) => { return 80 }),\r\n  //         borderColor: 'red',\r\n  //         backgroundColor: 'transparent',\r\n  //         borderWidth: 1.2,\r\n  //         pointRadius: 0\r\n  //       },\r\n  //       {\r\n  //         label: 'Outlier Limit Bottom',\r\n  //         data: data.evolution.map((point, i) => { return 20 }),\r\n  //         borderColor: 'red',\r\n  //         backgroundColor: 'transparent',\r\n  //         borderWidth: 1.2,\r\n  //         pointRadius: 0\r\n  //       },\r\n  //       {\r\n  //         label: 'Median Performance',\r\n  //         data: data.evolution.map((point, i) => { return 50 }),\r\n  //         borderColor: '#42e428',\r\n  //         backgroundColor: 'transparent',\r\n  //         borderWidth: 1.2,\r\n  //         pointRadius: 0\r\n  //       }\r\n  //     ],\r\n  //   }\r\n  //   setGraphData(graphData);\r\n  // }\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    body.groupBy = 'day';\r\n    if (generator) body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n\r\n    DataAPI({\r\n      'endpoint': 'wind/performanceIndex',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setDataLoaded(true);\r\n        // setData(response);\r\n        \r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: [\r\n            {\r\n              label: 'Outlier Limit Top',\r\n              data: response.data[0].data.graph.map((x) => {return 80}),//data.evolution.map((point, i) => { return 80 }),\r\n              borderColor: 'red',\r\n              backgroundColor: 'transparent',\r\n              borderWidth: 1.2,\r\n              pointRadius: 0\r\n            },\r\n            {\r\n              label: 'Outlier Limit Bottom',\r\n              data: response.data[0].data.graph.map((x) => {return 20}),//data.evolution.map((point, i) => { return 20 }),\r\n              borderColor: 'red',\r\n              backgroundColor: 'transparent',\r\n              borderWidth: 1.2,\r\n              pointRadius: 0\r\n            },\r\n            {\r\n              label: 'Median Performance',\r\n              data: response.data[0].data.graph.map((x) => {return 50}),//data.evolution.map((point, i) => { return 50 }),\r\n              borderColor: '#42e428',\r\n              backgroundColor: 'transparent',\r\n              borderWidth: 1.2,\r\n              pointRadius: 0\r\n            }\r\n          ]\r\n        }\r\n\r\n        const lineColors = [];\r\n\r\n        response.data.forEach((rDs) => {\r\n\r\n          const dataset = {\r\n            label: 'Data',\r\n            data: [],//rDs.evolution.map((point, i) => { return point.y * 100 }),\r\n            borderColor: '#bc5090',\r\n            backgroundColor: 'transparent',\r\n            borderWidth: 1,\r\n            pointRadius: 0,\r\n            segment: {\r\n              borderColor: ctx => lineColors[ctx.p0DataIndex] \r\n            }\r\n          };\r\n          rDs.data.graph.forEach((rD) => {\r\n            // const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\r\n            // dataset.labels.push(label)\r\n            dataset.data.push(rD.performance);\r\n\r\n            let color = '#18b018'; // verde\r\n            if (rD.performance > 90)\r\n              color = '#d7d709' // amarillo\r\n            else if (rD.performance > 80)\r\n              color = '#bc5090' // violeta\r\n            else if (rD.performance > 70)\r\n              color = '#ee0a0a' // rojo\r\n            lineColors.push(color);\r\n\r\n\r\n            // Verde = Operación normal, lo usual\r\n            // Rojo = Wind turbine with alarm\r\n            // Amarillo = Park with grid curtailment\r\n            // Violeta = Park at maximum output\r\n\r\n          });\r\n\r\n          lineColors.reverse();\r\n\r\n          // dataset.segment.borderColor(ctx => lineColors[ctx.p0DataIndex]);\r\n\r\n          // dataset.labels.reverse();\r\n          dataset.data.reverse();\r\n          data.datasets.push(dataset);\r\n\r\n        });\r\n\r\n        response.data[0].data.graph.forEach((rD) => {\r\n          const label = `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\r\n          data.labels.push(label);\r\n        });\r\n\r\n        data.labels.reverse();\r\n\r\n        setGraphData(data);\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            setGenerator(response.generators[0].id);\r\n          }\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const options = {\r\n    responsive: true,\r\n    options: {\r\n      animation: false,\r\n      spanGaps: true\r\n    },\r\n    scales: {\r\n      y:\r\n        {\r\n          suggestedMin: 10,\r\n          suggestedMax: 90,\r\n        }\r\n    },\r\n    tooltips: {\r\n      enabled: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n              return 'Percentile of performance: ' + round(tooltipItem.raw,1) + \" %\";\r\n          }\r\n        }\r\n      },\r\n      // beforeRender: (x, options) => {\r\n      //   const c = x.chart;\r\n      //   const dataset = x.data.datasets[0];\r\n      //   const yScale = x.scales['y-axis-0'];\r\n      //   const yPos = yScale.getPixelForValue(0);\r\n    \r\n      //   const gradientFill = c.ctx.createLinearGradient(0, 0, 0, c.height);\r\n      //   gradientFill.addColorStop(0, 'rgb(86,188,77)');\r\n      //   gradientFill.addColorStop(yPos / c.height, 'rgb(86,188,77)');\r\n      //   gradientFill.addColorStop(yPos / c.height, 'rgb(229,66,66)');\r\n      //   gradientFill.addColorStop(1, 'rgb(229,66,66)');\r\n    \r\n      //   const model = x.data.datasets[0]._meta[Object.keys(dataset._meta)[0]].dataset._model;\r\n      //   model.borderColor = gradientFill;\r\n      // },\r\n    }\r\n    \r\n  };\r\n\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              AI Analytics - Energy Generation\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-xs'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n              {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter className={'input-md'} value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value); }} />\r\n              <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n            </CCol>\r\n           </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          { (dataLoaded || loading) &&\r\n\r\n          <div>\r\n\r\n          {(!loading || dataLoadError) ?\r\n            <CRow className=\"mb-4\">\r\n              <CCol>\r\n                <h4 className=\"pb-2 mb-4 text-center\" >Wind Turbines for investigation/resolution: 3</h4>\r\n                <div>Performance</div>\r\n                <Line\r\n                  redraw \r\n                  data={graphData}\r\n                  options={options}\r\n                />\r\n              </CCol>\r\n            </CRow>\r\n            :\r\n            <CRow style={{justifyContent:'center'}}>\r\n              <CSpinner \r\n                className=\"loading-spinner\"\r\n                color='#321fdb'\r\n              />\r\n            </CRow>\r\n          }\r\n         \r\n\r\n          </div>\r\n\r\n          }\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default EnergyGeneration\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\alerts.js",["935","936","937","938","939","940","941","942","943","944","945","946","947"],"import React, { lazy, useEffect, useState } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CSpinner,\r\n  CWidgetDropdown,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, round, getDateLabel, getCurrentDateNDaysBefore} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nconst Overview = () => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [loading1, setLoading1] = useState(true);\r\n  const [loading2, setLoading2] = useState(true);\r\n  const [loading3, setLoading3] = useState(true);\r\n  const [loading4, setLoading4] = useState(true);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n\r\n  const [alert1, setAlert1] = useState([]);\r\n  const [alert2, setAlert2] = useState([]);\r\n  const [alert3, setAlert3] = useState([]);\r\n  const [alert4, setAlert4] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n          let gen = [];\r\n          if (response.generators != null) {\r\n            response.generators.forEach(\r\n              generator => { \r\n                gen.push(generator.id)\r\n              })\r\n            setGenerators(gen);\r\n          }\r\n          fetchAlerts();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  const fetchAlerts = () => {\r\n  \r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    body.groupBy =\"day\"\r\n    body.period = \"cm\"\r\n    DataAPI({\r\n      'endpoint': 'chart/performanceIndex',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading1(false);\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n\r\n        let generatorsAlert1 = []\r\n        response.data.forEach((rDs) => {\r\n          if (rDs.name!='Total') {\r\n            if (rDs.data.performance.performanceIndex < 90) {\r\n              generatorsAlert1.push(rDs.code)\r\n            }\r\n          }\r\n        });\r\n        setAlert1(generatorsAlert1)\r\n      }\r\n    );\r\n\r\n    const body2 = {}\r\n    body2.location = getCookie('location')\r\n    body2.groupBy =\"day\"\r\n    body2.from = getCurrentDateNDaysBefore(\"-\",2)\r\n    body2.to = getCurrentDateNDaysBefore(\"-\",1)\r\n    DataAPI({\r\n      'endpoint': 'chart/performanceIndex',\r\n      'method': 'POST',\r\n      'body': body2\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading2(false);\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n\r\n        let generatorsAlert2 = []\r\n        response.data.forEach((rDs) => {\r\n          if (rDs.name!='Total') {\r\n            const pIYesterday = rDs.data.graph[0].value\r\n            const pIBeforeYesterday = rDs.data.graph[1].value\r\n            if (pIBeforeYesterday - pIYesterday > 6) {\r\n              generatorsAlert2.push(rDs.code)\r\n            }\r\n          }\r\n        });\r\n        setAlert2(generatorsAlert2)\r\n      }\r\n    );\r\n\r\n    const body3 = {}\r\n    body3.location = getCookie('location')\r\n    body3.generators = generators\r\n    body3.period = \"y\"\r\n    DataAPI({\r\n      'endpoint': 'chart/stopped',\r\n      'method': 'POST',\r\n      'body': body3\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading3(false);\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n        let generatorsAlert3 = []\r\n        response.data.forEach((rDs) => {\r\n          if (rDs.missingHours.split(\":\")[0] >= 10) {\r\n            generatorsAlert3.push(rDs.gen_code)\r\n          }\r\n        });\r\n        setAlert3(generatorsAlert3)   \r\n        \r\n      }\r\n    );\r\n\r\n    const body4 = {}\r\n    body4.location = getCookie('location')\r\n    body4.generators = generators\r\n    body4.groupBy =\"day\"\r\n    body4.period = \"y\"\r\n    DataAPI({\r\n      'endpoint': 'chart/dataAvailability',\r\n      'method': 'POST',\r\n      'body': body4\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading4(false);\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n        let generatorsAlert4 = []\r\n        response.data.table.forEach((rDs) => {\r\n          if (rDs.total.turbineData < 90) generatorsAlert4.push(\"Turbine XX\");\r\n          if (rDs.metMast.direction < 90) generatorsAlert4.push(\"Met Mast Wind Direction\");\r\n          if (rDs.metMast.speed < 90) generatorsAlert4.push(\"Met Mast Wind Speed\");\r\n          if (rDs.metMast.temperature < 90) generatorsAlert4.push(\"Met Mast Temperature\");\r\n          if (rDs.metMast.pressure < 90) generatorsAlert4.push(\"Met Mast Pressure\");\r\n          if (rDs.metMast.humidity < 90) generatorsAlert4.push(\"Met Mast Humidity\");\r\n          if (rDs.turbineState.state < 90) generatorsAlert4.push(\"Grid Curtailment Status\");\r\n        });\r\n        setAlert4(generatorsAlert4)   \r\n        \r\n      }\r\n    );\r\n}\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n  const bodyOpacity = 1;//loading?.5:1\r\n\r\n  return (\r\n    <>\r\n      \r\n      <CCard>\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Alerts\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        <CCardBody>\r\n\r\n        <div style={{opacity:bodyOpacity}}>\r\n\r\n          {false && <div style={{zIndex: 999, position: 'absolute', width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,.7)'}}><CSpinner style={{position: 'absolute'}} /></div>}\r\n          \r\n          <CRow>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              <CCard\r\n                color={\"danger\"}\r\n                textColor={\"white\"}\r\n              >\r\n                <CCardHeader>\r\n                  <CRow>\r\n                    <CCol>\r\n                      <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                        ALERTS\r\n                      </h4>\r\n                    </CCol>\r\n                  </CRow>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  {/* <CCardTitle>ALERTS</CCardTitle> */}\r\n                  <CCardText>\r\n                    <p class=\"\">Wind turbines with performance &lt; 90% (current month): \r\n                      { loading1 ? \r\n                        <div className=\"mt-1\">\r\n                          <CSpinner \r\n                            className=\"loading-spinner m-0\"\r\n                            color='#321fdb'\r\n                            style={{width: '1.2rem', height: '1.2rem'}}\r\n                          />\r\n                        </div>\r\n                      :\r\n                        <h3>{alert1.length > 0 ? alert1.join(' - ') : \" - \"}</h3>\r\n                      }\r\n                    </p>\r\n                    <p class=\"\">Wind turbines with negative change exceeding -6% in performance (yesterday): \r\n                      { loading2 ? \r\n                        <div className=\"mt-1\">\r\n                          <CSpinner \r\n                            className=\"loading-spinner m-0\"\r\n                            color='#321fdb'\r\n                            style={{width: '1.2rem', height: '1.2rem'}}\r\n                          />\r\n                        </div>\r\n                        :\r\n                        <h3>{alert2.length > 0 ? alert2.join(' - ') : \" - \"}</h3>\r\n                      }\r\n                    </p>\r\n                    <p class=\"\">Wind turbines with long stops (yesterday): \r\n                      { loading3 ? \r\n                        <div className=\"mt-1\">\r\n                          <CSpinner \r\n                            className=\"loading-spinner m-0\"\r\n                            color='#321fdb'\r\n                            style={{width: '1.2rem', height: '1.2rem'}}\r\n                          />\r\n                        </div>\r\n                        :\r\n                        <h3>{alert3.length > 0 ? alert3.join(' - ') : \" - \"}</h3>\r\n                      }\r\n                    </p>\r\n                    <p class=\"\">&lt; 90% data available (yesterday): \r\n                      { loading4 ? \r\n                        <div className=\"mt-1\">\r\n                          <CSpinner \r\n                            className=\"loading-spinner m-0\"\r\n                            color='#321fdb'\r\n                            style={{width: '1.2rem', height: '1.2rem'}}\r\n                          />\r\n                        </div>\r\n                        :\r\n                        <h4>{alert4.length > 0 ? alert4.map(s=><React.Fragment>{s}<br/></React.Fragment>) : \" - \"}</h4>\r\n                      }\r\n                    </p>\r\n                  </CCardText>\r\n                </CCardBody>\r\n              </CCard>\r\n\r\n\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </div>\r\n        \r\n        </CCardBody>\r\n\r\n        </CCard>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\overview.js",["948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976"],"import React, { lazy, useEffect, useState } from 'react'\r\n\r\nimport {\r\n  CDataTable,\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout,\r\n  CSpinner,\r\n  CWidgetDropdown,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport MainChartExample from '../../../charts/MainChartExample.js'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, round, getDateLabel, getCurrentDateNDaysBefore} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst WidgetsDropdown = lazy(() => import('./Widgets.js'))\r\nconst WidgetsBrand = lazy(() => import('../../../widgets/WidgetsBrand.js'))\r\n\r\nconst Overview = () => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoaded2, setDataLoaded2] = useState(false);\r\n  const [date, setDate] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  \r\n  const [period, setPeriod] = useState('y');\r\n\r\n  const [averageWindSpeed, setAverageWindSpeed] = useState();\r\n  const [metMastWindSpeed, setMetMastWindSpeed] = useState();\r\n  const [mWh, setMWh] = useState();\r\n  const [estimatedCurtailment, setEstimatedCurtailment] = useState();\r\n\r\n  const [timeAvailability, setTimeAvailability] = useState('');\r\n  const [productionAvailability, setProductionAvailability] = useState('');\r\n  const [loadFactor, setLoadFactor] = useState();\r\n\r\n  // const [alert1, setAlert1] = useState([]);\r\n  // const [alert2, setAlert2] = useState([]);\r\n  // const [alert3, setAlert3] = useState([]);\r\n\r\n  const [timeAvailabilityChartData, setTimeAvailabilityChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [productionAvailabilityChartData, setProductionAvailabilityChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [loadFactorChartData, setLoadFactorChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    refreshChart(period);\r\n  }, []);\r\n\r\n\r\n  const fields = [\r\n  'id',\r\n  'name',\r\n  'MWh generated for period',\r\n  'Capacity factor',\r\n  'Time based availability',\r\n  'Met mast wind speed',\r\n  'MWh from wind turbines'\r\n];\r\n\r\nconst getBadge = status => {\r\n  switch (status) {\r\n    case 'Active': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'Pending': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\nconst loadGenerators = () => {\r\n\r\n  DataAPI({\r\n    'endpoint': 'admin/locations/current',\r\n    'method': 'GET'\r\n  }).then(\r\n    response => {\r\n      \r\n      if (response && response.error) {\r\n        setCookie('lastTimeStamp', '');\r\n        setCookie('name', '');\r\n        window.location.reload();\r\n      }\r\n      else if ((!dataLoaded || !dataLoaded2) && response && !response.error) {\r\n        let gen = [];\r\n        if (response.generators != null) {\r\n          response.generators.forEach(\r\n            generator => { \r\n              gen.push(generator.id)\r\n            })\r\n          setGenerators(gen);\r\n        }\r\n        // fetchAlerts();\r\n      }\r\n    }\r\n  );\r\n\r\n\r\n}\r\n\r\nconst fetchData = (period) => {\r\n\r\n  setLoading(true);\r\n  \r\n  const body = {}\r\n  body.location = getCookie('location')\r\n  if (period && period.split('--').length==2) {\r\n    body.from = period.split('--')[0]\r\n    body.to = period.split('--')[1]\r\n  } else {\r\n    body.period = period\r\n  }\r\n\r\n  DataAPI({\r\n    'endpoint': 'wind/overview',\r\n    'method': 'POST',\r\n    'body': body\r\n  }).then(\r\n    response => {\r\n\r\n\r\n      setLoading(false);\r\n\r\n\r\n\r\n      if (response.error) {\r\n          if (response.error.message) {\r\n          return(alert(response.error.message))\r\n          } else {\r\n          return(alert(response.error)) \r\n          }\r\n      }\r\n\r\n\r\n      let chartData = response.data && response.data[0];\r\n\r\n      if (chartData) {\r\n\r\n        const timeAvailability = Math.round(chartData.timeBasedAvailability*10)/10\r\n        const productionAvailability = Math.round(chartData.productionBasedAvailability*10)/10\r\n        const loadFactor = Math.round(chartData.capacityFactor*10)/10\r\n        const mWh = Math.round(chartData.mWhFromWindTurbines*10)/10\r\n        const estimatedCurtailment = Math.round(chartData.mWhEstimatedCurtailed*10)/10\r\n\r\n        const loadFactorDataset = {\r\n          clip:true,\r\n          labels: ['Load Factor'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [loadFactor,100-loadFactor],\r\n            backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)']\r\n          }\r\n        ]}\r\n\r\n\r\n        const timeAvailabilityDataset = {\r\n          clip:true,\r\n          labels: ['Time-based Availability'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [timeAvailability,100-timeAvailability],\r\n            backgroundColor: ['#0a58ca', '#052c65']\r\n          }\r\n        ]}\r\n\r\n        const productionAvailabilityDataset = {\r\n          clip:true,\r\n          labels: ['Production-based Availability'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [productionAvailability,100-productionAvailability],\r\n            backgroundColor: ['#722595', '#380a4e']\r\n          }\r\n        ]}\r\n      \r\n        setAverageWindSpeed(chartData.averageWindSpeed);\r\n        setMetMastWindSpeed(chartData.metMastWindSpeed);\r\n\r\n        setTimeAvailability(`${timeAvailability}%`)\r\n        setProductionAvailability(`${productionAvailability}%`)\r\n        setLoadFactor(`${loadFactor}%`)\r\n        \r\n        setTimeAvailabilityChartData(timeAvailabilityDataset)\r\n        setProductionAvailabilityChartData(productionAvailabilityDataset)\r\n        setLoadFactorChartData(loadFactorDataset)\r\n        setMWh(mWh)\r\n        setEstimatedCurtailment(estimatedCurtailment)\r\n\r\n      }\r\n    }\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n// const fetchAlerts = () => {\r\n  \r\n//     DataAPI({\r\n//       'endpoint': 'chart/performanceIndex',\r\n//       'method': 'POST',\r\n//       'body': {period: \"cm\", groupBy:\"day\"}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n\r\n//         let generatorsAlert1 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.name!='Total') {\r\n//             if (rDs.data.performance.performanceIndex < 90) {\r\n//               generatorsAlert1.push(rDs.name)\r\n//             }\r\n//           }\r\n//         });\r\n//         setAlert1(generatorsAlert1)\r\n//       }\r\n//     );\r\n\r\n//     DataAPI({\r\n//       'endpoint': 'chart/performanceIndex',\r\n//       'method': 'POST',\r\n//       'body': {from: getCurrentDateNDaysBefore(\"-\",2), to: getCurrentDateNDaysBefore(\"-\",1), groupBy:\"day\"}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n\r\n//         let generatorsAlert2 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.name!='Total') {\r\n//             const pIYesterday = rDs.data.graph[0].value\r\n//             const pIBeforeYesterday = rDs.data.graph[1].value\r\n//             if (pIBeforeYesterday - pIYesterday > 6) {\r\n//               generatorsAlert2.push(rDs.name)\r\n//             }\r\n//           }\r\n//         });\r\n//         setAlert2(generatorsAlert2)\r\n//       }\r\n//     );\r\n\r\n\r\n//     DataAPI({\r\n//       'endpoint': 'chart/stopped',\r\n//       'method': 'POST',\r\n//       'body': {period:\"y\",generators:generators}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n//         let generatorsAlert3 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.missingHours.split(\":\")[0] >= 10) {\r\n//             generatorsAlert3.push(rDs.gen_code)\r\n//           }\r\n//         });\r\n//         setAlert3(generatorsAlert3)   \r\n        \r\n//       }\r\n//     );\r\n\r\n\r\n// }\r\n\r\n  const refreshChart = (period) => {\r\n    fetchData(period);\r\n  }\r\n\r\n  const filterData = (date) => {\r\n    setPeriod(date);\r\n    fetchData(date);\r\n  }\r\n\r\n  const options = {\r\n    animation: { duration: loading ? 0 : 1000 },\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: '#ffffff'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            return round(tooltipItem.raw,1) + ' %'\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n  const bodyOpacity = loading?.7:1\r\n\r\n  return (\r\n    <>\r\n      \r\n      <CCard>\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Overview\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"3\" className=\"text-right\">\r\n              <DateFilter warning={\"Seleccionar un rango máximo de 31 días\"} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { filterData(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n        </CCardHeader>\r\n        \r\n        <CCardBody>\r\n          <div style={{opacity:{bodyOpacity}}} >\r\n\r\n            {false && <div style={{zIndex: 999, position: 'absolute', width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,.7)'}}><CSpinner style={{position: 'absolute'}} /></div>}\r\n          \r\n            <CRow>\r\n              <CCol sm=\"6\" lg=\"3\" className='px-2 pb-3'>\r\n                <CCard\r\n                  color={\"success\"}\r\n                  textColor={\"white\"}\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                >\r\n                  <CCardBody>\r\n                    <CCardTitle>PRODUCTION AND WIND</CCardTitle>\r\n                    <CCardText>\r\n                      <p class=\"h6\">Production: {mWh!=undefined?round(mWh)+' MWh':''}</p>\r\n                      <p class=\"h6\">Estimated Curtailment: {estimatedCurtailment!=undefined?round(estimatedCurtailment)+' MWh':''}</p>\r\n                      <p class=\"h6\">Turbine average wind speed: {averageWindSpeed!=undefined?round(averageWindSpeed)+' m/s':''}</p>\r\n                      <p class=\"h6\">Met mast average wind speed: {metMastWindSpeed!=undefined?round(metMastWindSpeed)+' m/s':''}</p>\r\n                    </CCardText>\r\n                  </CCardBody>\r\n                </CCard>\r\n    \r\n    \r\n        {/* <CCard\r\n          color={\"danger\"}\r\n          textColor={\"white\"}\r\n        >\r\n    \r\n          <CCardBody>\r\n            <CCardTitle>ALERTS</CCardTitle>\r\n            <CCardText>\r\n              <p class=\"\">Wind turbines with performance &lt; 90% (current month): \r\n                <h5>{alert1.length > 0 ? alert1.join(' - ') : \" - \"}</h5>\r\n              </p>\r\n              <p class=\"\">Wind turbines with negative change exceeding -6% in performance (yesterday): \r\n                <h5>{alert2.length > 0 ? alert2.join(' - ') : \" - \"}</h5>\r\n              </p>\r\n              <p class=\"\">Wind turbines with long stops (yesterday): \r\n                <h5>{alert3.length > 0 ? alert3.join(' - ') : \" - \"}</h5>\r\n              </p>\r\n            </CCardText>\r\n          </CCardBody>\r\n        </CCard> */}\r\n    \r\n    \r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className='px-2 pb-3'>\r\n                <CWidgetDropdown\r\n                  color=\"gradient-warning\"\r\n                  header=\"LOAD FACTOR (%)\"\r\n                  text={loadFactor}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={loadFactorChartData}\r\n                          options={options}\r\n                        />\r\n                        <small className='pt-lg-3 d-inline-block w-100 text-center'>* Excludes Estimated Curtailment</small>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                  \r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className='px-2 pb-3'>\r\n                <CWidgetDropdown\r\n                  color=\"gradient-info\"\r\n                  header=\"TIME-BASED AVAILABILITY (%)\"\r\n                  text={timeAvailability}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-4 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={timeAvailabilityChartData}\r\n                          options={options}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className='px-2 pb-3'>\r\n                <CWidgetDropdown\r\n                  color=\"gradient-purple\"\r\n                  header=\"PRODUCTION-BASED AVAILABILITY\"\r\n                  text={productionAvailability}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-4 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={productionAvailabilityChartData}\r\n                          options={options}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n            </CRow>\r\n          </div>\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\overview\\Widgets.js",["977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993"],"import React, {useState, useEffect} from 'react'\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ChartLineSimple from '../../../charts/ChartLineSimple'\r\nimport ChartBarSimple from '../../../charts/ChartBarSimple'\r\n\r\n\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { round } from '../../../../helpers/utils.js'\r\n\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst Widgets = (props) => {\r\n\r\n  console.log('widgets');\r\n\r\n\t// const [data, setData] = useState(false);\r\n\r\n  const [averageWindSpeed, setAverageWindSpeed] = useState();\r\n  const [metMastWindSpeed, setMetMastWindSpeed] = useState();\r\n\r\n\tconst [dataLoaded, setDataLoaded] = useState(false);\r\n\tconst [availability, setAvailability] = useState('');\r\n\tconst [loadFactor, setLoadFactor] = useState();\r\n\tconst [mWh, setMWh] = useState([]);\r\n\r\n\tconst [availabilityChartData, setAvailabilityChartData] = useState([]);\r\n\tconst [loadFactorChartData, setLoadFactorChartData] = useState([]);\r\n\r\n\tconst [graphData, setGraphData] = useState({\r\n\t    labels: [],\r\n\t    datasets: []\r\n\t  });\r\n\r\n\r\n\r\n\r\n  graph();\r\n\r\n\r\n  function graph(){\r\n\r\n    console.log('dataLoaded', dataLoaded)\r\n\r\n    if (!dataLoaded) {\r\n\r\n      const chartData = props.data && props.data.data && props.data.data[0];\r\n\r\n      if (chartData){\r\n\r\n        // console.log('chartData', chartData);\r\n\r\n        const availability = Math.round(chartData.timeBasedAvailability*10)/10;\r\n        const loadFactor = Math.round(chartData.capacityFactor*10)/10;\r\n        const mWh = Math.round(chartData.mWhFromWindTurbines*10)/10;\r\n\r\n        const loadFactorDataset = {\r\n          clip:true,\r\n          labels: ['Load Factor'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [loadFactor,100-loadFactor],\r\n            backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)']\r\n          }\r\n        ]}\r\n\r\n\r\n        const availabilityDataset = {\r\n          clip:true,\r\n          labels: ['Availability'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [availability,100-availability],\r\n            backgroundColor: ['#0a58ca', '#052c65']\r\n          }\r\n        ]}\r\n\r\n\r\n        setAverageWindSpeed(props.data.data[0].averageWindSpeed);\r\n        setMetMastWindSpeed(props.data.data[0].metMastWindSpeed);\r\n\r\n        setAvailability(`${availability}%`)\r\n        setLoadFactor(`${loadFactor}%`)\r\n        \r\n        setAvailabilityChartData(availabilityDataset)\r\n        setLoadFactorChartData(loadFactorDataset)\r\n\r\n        setMWh(mWh)\r\n\r\n        setDataLoaded(true);\r\n        \r\n      }\r\n\r\n      \r\n      // setGraphData(datasets2);\r\n\r\n    }\r\n  }\r\n\r\n  // render\r\n  return (\r\n    <>\r\n    <CRow>\r\n      \r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"LOAD FACTOR (%)\"\r\n          text={loadFactor}\r\n          footerSlot={\r\n            <div class=\"px-lg-5 pb-lg-5\">\r\n            <Doughnut\r\n               data={loadFactorChartData}\r\n            />\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-info\"\r\n          header=\"AVAILABILITY (%)\"\r\n          text={availability}\r\n          footerSlot={\r\n            <div class=\"px-lg-5 pb-lg-5\">\r\n            <Doughnut\r\n               data={availabilityChartData}\r\n            />\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n\r\n\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n          \r\n\r\n          <CCard\r\n      color={\"success\"}\r\n      textColor={\"white\"}\r\n\r\n    >\r\n\r\n      <CCardBody>\r\n        <CCardTitle>PRODUCTION AND WIND</CCardTitle>\r\n        <CCardText>\r\n          <p class=\"h6\">Production: {round(mWh)} MW</p>\r\n          <p class=\"h6\">Turbine average wind speed: {round(averageWindSpeed)} m/s</p>\r\n          <p class=\"h6\">Met mast average wind speed: {round(metMastWindSpeed)} m/s</p>\r\n        </CCardText>\r\n      </CCardBody>\r\n    </CCard>\r\n\r\n      </CCol>\r\n    </CRow>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Widgets\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\budget\\budget.js",["994","995","996","997","998","999","1000"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CSpinner,\r\n  CDataTable,\r\n  CContainer\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {round, formatNumber} from '../../../../helpers/utils.js'\r\nimport {getCookie, setCookie} from '../../../../helpers/sessionCookie.js'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport * as FileSaver from 'file-saver'\r\nimport XLSX from 'sheetjs-style'\r\n\r\n\r\n\r\nconst Budget = () => {\r\n\r\n  const currentMonth = (new Date()).getMonth()\r\n  const currentFiscalYear = currentMonth < getCookie('fiscalYearEndMonth') ? new Date().getFullYear() : (new Date().getFullYear())+1\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [fiscalYear, setFiscalYear] = useState(currentFiscalYear);\r\n  const [addEstimatedCurtailments, setAddEstimatedCurtailments] = useState(true);\r\n  const [parks, setParks] = useState([]);\r\n  const [parksLoaded, setParksLoaded] = useState(false);\r\n  const [park, setPark] = useState(null);\r\n  const [actualProductionMwh, setActualProductionMwh] = useState(0);\r\n  const [actualCumulativeProductionMwh, setActualCumulativeProductionMwh] = useState(0);\r\n  const [estimates, setEstimates] = useState([]);\r\n  const [estimatesCumulative, setEstimatesCumulative] = useState([]);\r\n  const [estimatesLabel1, setEstimatesLabel1] = useState(\"Estimate 1\");\r\n  const [estimatesLabel2, setEstimatesLabel2] = useState(\"Estimate 2\");\r\n  const [budgetData, setBudgetData] = useState([]);\r\n  const [cumulativeBudgetData, setCumulativeBudgetData] = useState([]);\r\n  const [difference1, setDifference1] = useState([]);\r\n  const [difference2, setDifference2] = useState([]);\r\n  const [cumulativeDifference1, setCumulativeDifference1] = useState([]);\r\n  const [cumulativeDifference2, setCumulativeDifference2] = useState([]);\r\n  const [tableData1, setTableData1] = useState([]);\r\n  const [tableData2, setTableData2] = useState([]);\r\n  const [graphData1, setGraphData1] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    fetchParks();\r\n  },[]);\r\n  \r\n  \r\n  const exportToExcel = async () => {\r\n\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + ' ' + today.getHours() + ':' + today.getMinutes();\r\n\r\n    const border = {\r\n        top: { style: 'thin', color: '#000' },\r\n        bottom: { style: 'thin', color: '#000' },\r\n        left: { style: 'thin', color: '#000' },\r\n        right: { style: 'thin', color: '#000' },\r\n    }\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    let rows = [\r\n      [\r\n        { v: \"Budget\", t: \"s\", s: { font: { bold: true, sz: 14 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Date-Time of Report\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: date, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Fiscal Year\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: fiscalYear, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [\r\n        { v: \"Add Estimated Curtailments\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: addEstimatedCurtailments?'Yes':'No', t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [\r\n        { v: \"Park\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: parks.filter(x => x.id == park)[0].name, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"1 - Monthly Production\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Month to Date\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [\r\n        { v: \"Actual Production (MWh)\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: actualProductionMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" }} },\r\n      ],\r\n      ...estimates.map((x) => {\r\n        return [\r\n          { v: x.label + \" (MWh)\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n          { v: x.estimateMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n        ]\r\n      }),\r\n      [],\r\n      [\r\n        {v: '', t: \"s\"},\r\n        {v: '', t: \"s\"},\r\n        ...estimates.map((x) => { return {v: '', t: \"s\"} }),\r\n        { v: '% Difference', t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } }/*, e: { c: 2 }*/ },\r\n        { v: '', t: \"s\", s: { border } },\r\n      ],\r\n      [\r\n        { v: \"Month\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: \"Actual Production (MWh)\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...estimates.map((x) => {\r\n          return { v: x.label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n        ...estimates.map((x) => {\r\n          return { v: \"Vs. \"+x.label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        })\r\n      ],\r\n      ...budgetData.map((x) => {\r\n        return [\r\n          { v: months[(new Date(x.startDate)).getMonth()], t: \"s\", s: { font: { sz: 11 }, border } },\r\n          { v: x.actualProductionMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n          ...x.estimates.map((y) => {\r\n            return { v: y.estimateMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          }),\r\n          ...x.estimates.map((y) => {\r\n            return { v: y.actualVsEstimate, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          }),\r\n        ]\r\n      }),\r\n      [],\r\n      [],\r\n      [\r\n        { v: \"2 - Cumulative Production\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Year to Date\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [\r\n        { v: \"Actual Production (MWh)\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: actualCumulativeProductionMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      ...estimatesCumulative.map((x) => {\r\n        return [\r\n          { v: x.label + \" (MWh)\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n          { v: x.estimateMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n        ]\r\n      }),\r\n      [],\r\n      [\r\n        {v: '', t: \"s\"},\r\n        {v: '', t: \"s\"},\r\n        ...estimatesCumulative.map((x) => { return {v: '', t: \"s\"} }),\r\n        { v: '% Difference', t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } }/*, e: { c: 2 }*/ },\r\n        { v: '', t: \"s\", s: { border } },\r\n      ],\r\n      [\r\n        { v: \"Month\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: \"Actual Production (MWh)\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...estimatesCumulative.map((x) => {\r\n          return { v: x.label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n        ...estimatesCumulative.map((x) => {\r\n          return { v: \"Vs. \"+x.label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        })\r\n      ],\r\n      ...cumulativeBudgetData.map((x) => {\r\n        return [\r\n          { v: months[(new Date(x.startDate)).getMonth()], t: \"s\", s: { font: { sz: 11 }, border } },\r\n          { v: x.actualProductionMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n          ...x.estimates.map((y) => {\r\n            return { v: y.estimateMwh, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          }),\r\n          ...x.estimates.map((y) => {\r\n            return { v: y.actualVsEstimate, t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          }),\r\n        ]\r\n      }),\r\n    ];\r\n\r\n\r\n    \r\n\r\n    const objectMaxLength = [];\r\n\r\n    rows.forEach(arr => {\r\n      arr.forEach((cell, key) => {\r\n        objectMaxLength[key] = 0;\r\n      });\r\n    });\r\n\r\n    rows.forEach(arr => {\r\n      arr.forEach((cell, key) => {\r\n        let len = 0;\r\n        let value = cell.v;\r\n        switch(typeof value) {\r\n          case \"number\": len = 10; break;\r\n          case \"string\": len = value.length*0.8; break;\r\n          case \"object\": if(value instanceof Date) len = 10; break; \r\n        }\r\n        objectMaxLength[key] = Math.max(objectMaxLength[key], len);\r\n      });\r\n    });\r\n\r\n    const ws = XLSX.utils.aoa_to_sheet(rows);\r\n    ws['!cols'] = objectMaxLength.map(x => { return {wch: x} });\r\n\r\n    const cantEstimates = 2;\r\n    const rowDifference1 = 13 + cantEstimates;\r\n    const colDifferenceFrom1 = 2 + cantEstimates;\r\n    const colDifferenceTo1 = colDifferenceFrom1 + cantEstimates - 1;\r\n    const rowDifference2 = 32 + cantEstimates*3;\r\n    const colDifferenceFrom2 = 2 + cantEstimates;\r\n    const colDifferenceTo2 = colDifferenceFrom2 + cantEstimates - 1;\r\n    ws['!merges'] = [\r\n      {s:{r:rowDifference1,c:colDifferenceFrom1},e:{r:rowDifference1,c:colDifferenceTo1}},\r\n      {s:{r:rowDifference2,c:colDifferenceFrom2},e:{r:rowDifference2,c:colDifferenceTo2}}\r\n    ]\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Budget\");\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const data = new Blob([excelBuffer],  {type: fileType });\r\n    FileSaver.saveAs(data, \"BudgetReport.xlsx\");\r\n    \r\n  }\r\n\r\n\r\n\r\n  const fetchParks = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.status == 401) {\r\n            setCookie('name', ''); \r\n            setCookie('parkType', ''); \r\n            window.location.reload(); \r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n        \r\n        if (!parksLoaded) {\r\n          setParks(response);\r\n          setParksLoaded(true);\r\n          setPark(response[0].id)\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.locIds = [park];\r\n    body.fiscalYear = fiscalYear\r\n    body.includeCurtailments  = addEstimatedCurtailments\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/budget',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setDataLoaded(true);\r\n\r\n\r\n        // Current Data in grid\r\n        const currentData = response.currentData;\r\n        const tableData = [];\r\n        setActualProductionMwh(currentData.actualProductionMwh);\r\n        tableData.push({\r\n          label: 'Actual Production',\r\n          value: formatNumber(round(currentData.actualProductionMwh,1)) + \" MWh\"\r\n        })\r\n        setEstimates(currentData.estimates);\r\n        currentData.estimates.forEach(\r\n          x => {\r\n            tableData.push({\r\n              label: x.label,\r\n              value: formatNumber(x.estimateMwh) + \" MWh\"\r\n            })\r\n          }\r\n        )\r\n        setTableData1(tableData);\r\n\r\n\r\n        //Chart Budget\r\n        const budgetData = response.budgetData;\r\n        if (budgetData.length==0) return;\r\n        setEstimatesLabel1(budgetData[0].estimates[0].label)\r\n        setEstimatesLabel2(budgetData[0].estimates[1].label)\r\n        setBudgetData(budgetData);\r\n\r\n        const graphData = {\r\n          labels: budgetData.map((x, i) => { \r\n            const startDate = new Date(x.startDate);\r\n            return months[startDate.getMonth()]; \r\n          }),\r\n          datasets: [\r\n            {\r\n              label: budgetData[0].estimates[0].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[0].estimateMwh }),\r\n              borderColor: '#bc5090',\r\n              backgroundColor: '#bc5090',\r\n              order: 1\r\n            },\r\n            {\r\n              label: budgetData[0].estimates[1].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[1].estimateMwh }),\r\n              borderColor: '#7a5195',\r\n              backgroundColor: '#7a5195',\r\n              order: 1\r\n            },\r\n            {\r\n              label: 'Actual Production',\r\n              data: budgetData.map((x, i) => { return x.actualProductionMwh }),\r\n              borderColor: '#ffa600',\r\n              backgroundColor: '#ffa600',\r\n              type: 'line',\r\n              order: 0\r\n            },\r\n          ],\r\n        }\r\n\r\n        const dif1 = budgetData.map((x, i) => { return x.estimates[0].actualVsEstimate })\r\n        const dif2 = budgetData.map((x, i) => { return x.estimates[1].actualVsEstimate })\r\n        setDifference1(dif1)\r\n        setDifference2(dif2)\r\n\r\n        setGraphData1(graphData);\r\n\r\n      }\r\n    );\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/budgetCumulative',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setDataLoaded(true);\r\n\r\n\r\n        // Current Data in grid\r\n        const currentData = response.currentData;\r\n        const tableData = [];\r\n        setActualCumulativeProductionMwh(currentData.actualProductionMwh);\r\n        tableData.push({\r\n          label: 'Actual Production',\r\n          value: formatNumber(round(currentData.actualProductionMwh,1)) + \" MWh\"\r\n        })\r\n        setEstimatesCumulative(currentData.estimates);\r\n        currentData.estimates.forEach(\r\n          x => {\r\n            tableData.push({\r\n              label: x.label,\r\n              value: formatNumber(x.estimateMwh) + \" MWh\"\r\n            })\r\n          }\r\n        )\r\n        setTableData2(tableData);\r\n\r\n\r\n        // Chart Cumulative Budget\r\n        const budgetData = response.budgetData;\r\n        if (budgetData.length==0) return;\r\n        setCumulativeBudgetData(budgetData);\r\n        const graphData = {\r\n          labels: budgetData.map((x, i) => { \r\n            const startDate = new Date(x.startDate);\r\n            return months[startDate.getMonth()]; \r\n          }),\r\n          datasets: [\r\n            {\r\n              label: budgetData[0].estimates[0].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[0].estimateMwh }),\r\n              borderColor: '#bc5090',\r\n              backgroundColor: '#bc5090',\r\n              order: 1\r\n            },\r\n            {\r\n              label: budgetData[0].estimates[1].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[1].estimateMwh }),\r\n              borderColor: '#7a5195',\r\n              backgroundColor: '#7a5195',\r\n              order: 1\r\n            },\r\n            {\r\n              label: 'Actual Production',\r\n              data: budgetData.map((x, i) => { return x.actualProductionMwh }),\r\n              borderColor: '#ffa600',\r\n              backgroundColor: '#ffa600',\r\n              type: 'line',\r\n              order: 0\r\n            },\r\n          ],\r\n        }\r\n\r\n        setCumulativeDifference1(budgetData.map((x, i) => { return x.estimates[0].actualVsEstimate }))\r\n        setCumulativeDifference2(budgetData.map((x, i) => { return x.estimates[1].actualVsEstimate }))\r\n\r\n        setGraphData2(graphData);\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  \r\n  const options = {\r\n    responsive: true,\r\n    tooltips: {\r\n      enabled: true\r\n    }\r\n  };\r\n\r\n  const optionsGraph1 =  {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        // mode: 'index',\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.label === \"Actual Production\")  {\r\n              return [\r\n                tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh',\r\n                \"% Difference vs. \" + estimatesLabel1 + \": \" + difference1[tooltipItem.dataIndex] + \" %\",\r\n                \"% Difference vs. \" + estimatesLabel2 + \": \" + difference2[tooltipItem.dataIndex] + \" %\"\r\n            \r\n              ];\r\n            } else {\r\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh'\r\n            }\r\n              \r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const optionsGraph2 =  {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        // mode: 'index',\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.label === \"Actual Production\")  {\r\n              return [\r\n                tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + 'MWh',\r\n                \"% Difference vs. \" + estimatesLabel1 + \": \" + cumulativeDifference1[tooltipItem.dataIndex] + \" %\",\r\n                \"% Difference vs. \" + estimatesLabel2 + \": \" + cumulativeDifference2[tooltipItem.dataIndex] + \" %\"\r\n            \r\n              ];\r\n            } else {\r\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const fields1=[\r\n    { \r\n      key: 'label',\r\n      label: '',\r\n    },\r\n    { \r\n      key: 'value',\r\n      label: 'Month to Date',\r\n    }\r\n  ]\r\n  const fields2=[\r\n    { \r\n      key: 'label',\r\n      label: '',\r\n    },\r\n    { \r\n      key: 'value',\r\n      label: 'Year to Date',\r\n    }\r\n  ]\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"2\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Budget\r\n            </h3>\r\n            {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n          </CCol>\r\n\r\n          <CCol sm=\"10\" className=\"text-right d-flex px-2 flex-center flex-justify-end\">\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Fiscal Year</h6>\r\n            <CSelect className={'input-sm'} disabled={loading} custom name=\"fiscalYear\" id=\"fiscalYear\" onChange={(ev) => {setFiscalYear(ev.target.value);}}>\r\n              {[0,1,2,3,4].map((x) => (\r\n                                <option key={currentFiscalYear-x} value={currentFiscalYear-x}>\r\n                                  {currentFiscalYear-x}\r\n                                </option>\r\n                              ))}\r\n            </CSelect>\r\n\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4,minWidth:'170px'}}>Add Estimated Curtailments</h6>\r\n            <CSelect className={'input-sm'} disabled={loading} custom defaultValue={\"true\"} name=\"addEstimatedCurtailments\" id=\"addEstimatedCurtailments\" onChange={(ev) => {setAddEstimatedCurtailments(ev.target.value);}}>\r\n              <option key={'addEstimatedCurtailments-yes'} value=\"true\">Yes</option>\r\n              <option  key={'addEstimatedCurtailments-no'} value=\"false\">No</option>\r\n            </CSelect>\r\n\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4}}>Park</h6>\r\n            <CSelect className={'input-md'} disabled={loading} defaultValue={park} custom name=\"park\" id=\"park\" onChange={(ev) => {setPark(ev.target.value);}}>\r\n                {parks && parks.map((park) => (\r\n                    <option key={park.id} value={park.id}>\r\n                      {park.name}\r\n                    </option>\r\n                      ))}\r\n            </CSelect>\r\n\r\n            <CButton color=\"primary\" disabled={loading || !parksLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n          </CCol>\r\n\r\n          </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n\r\n        { (loading || dataLoaded) &&\r\n          <div>\r\n\r\n            { !loading || dataLoadError ? \r\n              <div className='position-relative'>\r\n                <CButton \r\n                  onClick={(e) => exportToExcel()}\r\n                  color='primary'\r\n                  className={'position-absolute'}\r\n                  style={{top:'-9px', right:'0', zIndex: '1'}}\r\n                  >\r\n                    Download\r\n                </CButton>\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Monthly Production</h4>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol sm=\"5\">\r\n                        <CDataTable\r\n                          items={tableData1}\r\n                          fields={fields1}\r\n                          striped\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol>\r\n                        <div>MWh</div>\r\n                        <Bar \r\n                          data={graphData1}\r\n                          options={optionsGraph1} \r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Cumulative Production</h4>\r\n                    \r\n                    <CRow className={'mb-2'}>\r\n                      <CCol sm=\"5\">\r\n                        <CDataTable\r\n                          items={tableData2}\r\n                          fields={fields2}\r\n                          striped\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol>\r\n                        <div>MWh</div>\r\n                        <Bar \r\n                          data={graphData2}\r\n                          options={optionsGraph2} \r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n          </div>\r\n        }\r\n\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Budget\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\summary.js",["1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CDataTable,\r\n  CBadge,\r\n  CSelect,\r\n  CSpinner\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartBar,\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, formatDate, round, getDateLabel, formatNumber} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\nconst Charts = () => {\r\n\r\n  const [tableData1, setTableData1] = useState([]);\r\n  const [tableFields1, setTableFields1] = useState([]);\r\n  const [tableData2, setTableData2] = useState([]);\r\n  const [tableFields2, setTableFields2] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n  const [curves, setCurves] = useState([]);\r\n  const [period, setPeriod] = useState('cm');\r\n  const [labels, setLabels] = useState([]);\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [performance, setPerformance] = useState({});\r\n  const [performanceItems, setPerformanceItems] = useState([]);\r\n\r\n  const [graphOptions, setGraphOptions] = useState({});\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData3, setGraphData3] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    if (generator) body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/powerCurve',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n          // if (!response.generator) return(alert('No generator datasets'));\r\n\r\n\r\n          const generatorData = response.generator && response.generator[0].data;\r\n\r\n          setDataLoaded(true);\r\n          setData(response);\r\n          \r\n\r\n          if(generatorData && generatorData.hasOwnProperty('curves')){\r\n            setCurves(generatorData.curves);\r\n            refreshChart(generatorData);\r\n          } else {\r\n            setCurves([]);\r\n          }\r\n\r\n          if (generatorData){\r\n            if(generatorData.hasOwnProperty('dataUse')) processTableData1(generatorData.dataUse);\r\n            if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData2(generatorData.dataFilteredDueTo);\r\n            if(generatorData.hasOwnProperty('performance')) setPerformance(generatorData.performance);\r\n          }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            setGenerator(response.generators[0].id);\r\n          }\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n    const processTableData1 = (dataUse) => {\r\n\r\n      const tableData = [];\r\n\r\n      dataUse.forEach(\r\n        item => {\r\n\r\n          const appendSymbol = (item.info=='As percentage of time' || item.info=='As percentage of MWh')?'%':'';\r\n          const decimals = (item.info=='As percentage of time' || item.info=='As percentage of MWh')?1:0;\r\n\r\n          // if (item.info == 'As MWh generated') {\r\n\r\n          //   var usedData = (Math.round(item.usedData)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n          //   var filteredData = (Math.round(item.filteredData)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n          //   var total = (Math.round(item.total)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n\r\n          // } else {\r\n\r\n            var usedData = formatNumber(round(item.usedData,decimals))+appendSymbol;\r\n            var filteredData = formatNumber(round(item.filteredData,decimals))+appendSymbol;\r\n            var total = formatNumber(round(item.total,decimals))+appendSymbol;\r\n\r\n          // }\r\n\r\n          \r\n\r\n          tableData.push({\r\n            '': item.info,\r\n            'Used Data': usedData,\r\n            'Filtered Data': filteredData,\r\n            'Total': total\r\n          })\r\n\r\n        }\r\n      );\r\n\r\n      setTableData1(tableData);\r\n      setTableFields1(['', 'Used Data', 'Filtered Data', 'Total']);\r\n\r\n    }\r\n\r\n\r\n    const processTableData2 = (dataFilteredDueTo) => {\r\n\r\n      const tableData = [];\r\n\r\n      tableData.push({\r\n            '': dataFilteredDueTo.info,\r\n            'Missing Data': round(dataFilteredDueTo.missingData)+'%',\r\n            'Curtailment': round(dataFilteredDueTo.curtailment)+'%',\r\n            'Alarms, Outliers, Frozen Sensors': round(dataFilteredDueTo.other)+'%',\r\n            'Total': round(dataFilteredDueTo.total)+'%'\r\n          })\r\n\r\n      setTableData2(tableData);\r\n      setTableFields2(['', 'Missing Data', 'Curtailment', 'Alarms, Outliers, Frozen Sensors', 'Total']);\r\n      \r\n    }\r\n\r\n    const refreshChart = (generatorData) => {\r\n\r\n          // if (curves.length==0) return;\r\n\r\n        const curves = generatorData.curves;\r\n        const performance = generatorData.performance;\r\n  \r\n            const dataset = {\r\n              title: '',\r\n              labels: [],\r\n              label: \"Manufacturer Curve\",\r\n              backgroundColor: '#003f5c',\r\n              data: []\r\n            };\r\n \r\n            const dataset2 = {\r\n              labels: [],\r\n              label: \"Turbine Power Curve\",\r\n              backgroundColor: '#bc5090',\r\n              data: []\r\n            };\r\n\r\n            const dataset3 = {\r\n              labels: [],\r\n              label: \"Time percentage\",\r\n              backgroundColor: '#7a5195',\r\n              data: []\r\n            };\r\n\r\n            const labels = [];\r\n\r\n            const graphData = {\r\n              labels: [],\r\n              datasets: [],\r\n            };\r\n            const graphData2 = {\r\n              labels: [],\r\n              datasets: [],\r\n            }\r\n            const graphData3 = {\r\n              labels: [],\r\n              datasets: [],\r\n            }\r\n\r\n\r\n            curves[0].x.forEach(\r\n              x => {\r\n                labels.push(round(x))\r\n              }\r\n            );\r\n\r\n            graphData.labels = labels;\r\n\r\n            dataset.data = curves[0].y;\r\n            dataset2.data = curves[1].y;\r\n\r\n            const max = curves[1].x[curves[1].x.length-1];//Math.ceil(Math.max(...curves[2].x));\r\n            const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\r\n            const percentages = [];\r\n            let aux;\r\n            let qty;\r\n            let percentage;\r\n            const qtyTotal = curves[2].x.length;\r\n            windSpeeds.forEach(\r\n              function process(windSpeed) { \r\n                aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\r\n                qty = aux.length;\r\n                percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\r\n                percentages.push(percentage);\r\n                graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\r\n              }\r\n            );\r\n\r\n            dataset3.data = percentages;\r\n\r\n\r\n            const datasetPerformance = {\r\n              labels: [],\r\n              label: \"\",\r\n              backgroundColor: '#ef5675',\r\n              data: []\r\n            };\r\n            performance.curves.forEach(wS => {\r\n              graphData3.labels.push(wS.v_min+\"-\"+wS.v_max);\r\n              // graphData3.labels.push(wS.v_max);\r\n              datasetPerformance.data.push(wS.mean);\r\n            });\r\n\r\n            \r\n            graphData.datasets.push(dataset);\r\n            graphData.datasets.push(dataset2);\r\n            graphData2.datasets.push(dataset3);\r\n            graphData3.datasets.push(datasetPerformance);\r\n\r\n            setGraphData(graphData);\r\n            setGraphData2(graphData2);\r\n            setGraphData3(graphData3);\r\n\r\n\r\n    }\r\n\r\n\r\n    const getBadge = status => {\r\n  switch (status) {\r\n    case 'Active': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'Pending': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n\r\n}\r\n\r\nconst fields = [\r\n  '',\r\n  'Used Data',\r\n  'Filtered Data',\r\n  'Total'\r\n]\r\n\r\nconst options = {\r\n  animation: {\r\n    duration: loading ? 0 : 1000\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      callbacks: {\r\n        title: function(tooltipItem, data){\r\n          return tooltipItem[0].label + ' m/s';\r\n        },\r\n        label: function(tooltipItem, data) {\r\n          return formatNumber(round(tooltipItem.raw,1)) + ' kWh';\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst options2 = {\r\n  animation: {\r\n    duration: loading ? 0 : 1000\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  tooltips: {\r\n    callbacks: {\r\n      title: function(tooltipItem, data){\r\n        return tooltipItem[0].label + ' m/s';\r\n      },\r\n      label: function(tooltipItem, data) {\r\n        return round(tooltipItem.value,1) + ' %';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst options3 = {\r\n  animation: {\r\n    duration: loading ? 0 : 1000\r\n  },\r\n  scales: {\r\n    x: {\r\n      ticks: {\r\n          callback: function(value, index, ticks) {\r\n              return graphData3.labels[value].split('-')[0];\r\n          }\r\n      }\r\n    }\r\n  },\r\n  plugins: {\r\n    legend: {\r\n      display: false\r\n    },\r\n    tooltip: {\r\n      callbacks: {\r\n        title: function(tooltipItem, data){\r\n          return tooltipItem[0].label + ' m/s';\r\n        },\r\n        label: function(tooltipItem, data) {\r\n          return round(tooltipItem.raw,1) + ' %';\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n  return (\r\n    <CCard>\r\n\r\n    <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Power Curve - Summary\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n              {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter className={'input-md'} value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value); }} />\r\n              <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n            </CCol>\r\n           </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n      \r\n      <CCardBody>\r\n\r\n       { (loading || dataLoaded) &&\r\n        <CRow>\r\n          <CCol sm=\"7\">\r\n            <div style={{marginBottom:'50px'}}>\r\n              {!loading || dataLoadError ?\r\n              <div>\r\n                <div className=\"left-center\" style={{width: '100%'}}>Power (KWh)</div>\r\n                <Line data={graphData} options={options} />\r\n                <div className=\"text-center\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n              :\r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n              }\r\n            </div>\r\n\r\n            <div style={{marginBottom:'50px'}}>\r\n              <h5 className=\"pb-2 mb-4 border-bottom text-left\" >Performance Index by Wind Speed</h5>\r\n              {!loading || dataLoadError ?\r\n              <div>\r\n                <div className=\"text-left mb-3\" style={{width: '100%'}}>Performance Index</div>\r\n                <Line data={graphData3} options={options3} />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n              :\r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n              }\r\n            </div>\r\n\r\n            <div style={{marginBottom:'50px'}}>\r\n              <h5 className=\"pb-2 mb-4 border-bottom\" >Operational data</h5>\r\n              {!loading || dataLoadError ?\r\n              <div>\r\n                <div className=\"left-center\" style={{width: '100%'}}>Time (%)</div>\r\n                <CChartBar\r\n                  datasets={graphData2.datasets}\r\n                  labels={graphData2.labels}\r\n                  options={options2}\r\n                />\r\n                <div className=\"text-center\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n              :\r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n              }\r\n            </div>\r\n\r\n          </CCol>\r\n          <CCol sm=\"5\">\r\n\r\n\r\n            % data above Reference Power Curve: {round(performance['Percentage data above manufacturer power curve']) }%<br />\r\n            % data below Reference Power Curve: {round(performance['Percentage data below manufacturer power curve']) }%<br />\r\n            Performance index {round(performance['Performance index'])}%<br /><br />\r\n\r\n\r\n\r\n              <h4>Data Use</h4>\r\n\r\n              <div style={{textAlign:'right'}}>\r\n                  {dataLoaded || dataLoadError\r\n                    ? <CDataTable\r\n                    items={tableData1}\r\n                    fields={tableFields1}\r\n                    striped\r\n                    itemsPerPage={5}\r\n                    pagination\r\n                    scopedSlots = {{\r\n                      'status':\r\n                        (item)=>(\r\n                          <td>\r\n                            <CBadge color={getBadge(item.status)}>\r\n                              {item.status}\r\n                            </CBadge>\r\n                          </td>\r\n                        )\r\n  \r\n                    }}\r\n                  />\r\n                    : \r\n                    <ChartLoading/>\r\n                \r\n              }\r\n              </div>\r\n\r\n              <h4>Reasons for Filtered Data</h4>\r\n              <div style={{textAlign:'right'}}>\r\n\r\n              {dataLoaded || dataLoadError\r\n                    ? \r\n                    <CDataTable\r\n                    items={tableData2}\r\n                    fields={tableFields2}\r\n                    striped\r\n                    itemsPerPage={5}\r\n                    pagination\r\n                    scopedSlots = {{\r\n                      'status':\r\n                        (item)=>(\r\n                          <td>\r\n                            <CBadge color={getBadge(item.status)}>\r\n                              {item.status}\r\n                            </CBadge>\r\n                          </td>\r\n                        )\r\n\r\n                    }}\r\n                  />\r\n                  : \r\n                  <ChartLoading/>\r\n              } \r\n              </div>\r\n\r\n          </CCol>\r\n        </CRow>\r\n       }\r\n      </CCardBody>\r\n\r\n\r\n\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\analysis.js",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSelect,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n  CSpinner\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartBar\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, formatDate, formatDate2, round, getDateLabel, formatNumber} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\nimport { func } from 'prop-types';\r\n\r\n\r\nconst Charts = () => {\r\n\r\n  const [tableData1, setTableData1] = useState([]);\r\n  const [tableFields1, setTableFields1] = useState([]);\r\n  const [tableData2, setTableData2] = useState([]);\r\n  const [tableFields2, setTableFields2] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n  const [curves, setCurves] = useState([]);\r\n  const [period, setPeriod] = useState('cm');\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  // const [filter, setFilter] = useState('');\r\n  const [windSectors, setWindSectors] = useState('');\r\n  const [performance, setPerformance] = useState({});\r\n  const [filtersSelected, setFiltersSelected] = useState(false);\r\n  const [times, setTimes] = useState([]);\r\n  const [locPower, setLocPower] = useState([]);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const angles = [\r\n    \"0-45\",\r\n    \"45-90\",\r\n    \"90-135\",\r\n    \"135-180\",\r\n    \"180-225\",\r\n    \"225-270\",\r\n    \"270-315\",\r\n    \"315-360\"\r\n  ]\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    if (generator) body.generators = [generator];\r\n    if (windSectors.length > 0) body.angles = windSectors\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/powerCurve',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n          const generatorData = response.generator && response.generator[0].data;\r\n\r\n          setDataLoaded(true);\r\n          setData(response);\r\n          \r\n\r\n          if(generatorData && generatorData.hasOwnProperty('curves')){\r\n            setCurves(generatorData.curves);\r\n            refreshChart(generatorData);\r\n          } else {\r\n            setCurves([]);\r\n          }\r\n\r\n          if (generatorData){\r\n            if(generatorData.hasOwnProperty('dataUse')) processTableData1(generatorData.dataUse);\r\n            if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData2(generatorData.dataFilteredDueTo);\r\n            if(generatorData.hasOwnProperty('performance')) setPerformance(generatorData.performance);\r\n          }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            setGenerator(response.generators[0].id);\r\n          }\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n    const processTableData1 = (dataUse) => {\r\n\r\n      const tableData = [];\r\n\r\n      dataUse.forEach(\r\n        item => {\r\n\r\n          const appendSymbol = (item.info=='As percentage of time' || item.info=='As percentage of MWh')?'%':'';\r\n          const decimals = (item.info=='As percentage of time' || item.info=='As percentage of MWh')?1:0;\r\n\r\n          // if (item.info == 'As MWh generated') {\r\n\r\n          //   var usedData = (Math.round(item.usedData)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n          //   var filteredData = (Math.round(item.filteredData)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n          //   var total = (Math.round(item.total)+appendSymbol).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n\r\n          // } else {\r\n\r\n            var usedData = formatNumber(round(item.usedData,decimals))+appendSymbol;\r\n            var filteredData = formatNumber(round(item.filteredData,decimals))+appendSymbol;\r\n            var total = formatNumber(round(item.total,decimals))+appendSymbol;\r\n\r\n          // }\r\n\r\n          \r\n\r\n          tableData.push({\r\n            '': item.info,\r\n            'Used Data': usedData,\r\n            'Filtered Data': filteredData,\r\n            'Total': total\r\n          })\r\n\r\n        }\r\n      );\r\n\r\n      setTableData1(tableData);\r\n      setTableFields1(['', 'Used Data', 'Filtered Data', 'Total']);\r\n\r\n    }\r\n\r\n\r\n    const processTableData2 = (dataFilteredDueTo) => {\r\n\r\n      const tableData = [];\r\n\r\n      tableData.push({\r\n            '': dataFilteredDueTo.info,\r\n            'Missing Data': round(dataFilteredDueTo.missingData)+'%',\r\n            'Curtailment': round(dataFilteredDueTo.curtailment)+'%',\r\n            'Alarms, Outliers, Frozen Sensors': round(dataFilteredDueTo.other)+'%',\r\n            'Total': round(dataFilteredDueTo.total)+'%'\r\n          })\r\n\r\n      setTableData2(tableData);\r\n      setTableFields2(['', 'Missing Data', 'Curtailment', 'Alarms, Outliers, Frozen Sensors', 'Total']);\r\n      \r\n    }\r\n\r\n    const refreshChart = (generatorData) => {\r\n\r\n      // if (curves.length==0) return;\r\n\r\n        const curves = generatorData.curves;\r\n        const performance = generatorData.performance;\r\n          \r\n        // Graph 1\r\n        const graphData = {\r\n          labels: [],\r\n          datasets: [\r\n            {\r\n              label:  curves[0].label,\r\n              showLine: true, \r\n              // labels: curves[0].x.map((x, i) => ({ x:\"Power: \"+x, y: \"Wind Speed: \"+curves[0].y[i] })),\r\n              data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n              backgroundColor: '#374c80',\r\n            },\r\n            {\r\n              label:  curves[2].label,\r\n              // labels: curves[2].x.map((x, i) => ({ x:\"Power: \"+x, y: \"Wind Speed: \"+curves[2].y[i] })),\r\n              data: curves[2].x.map((x, i) => ({ x, y: curves[2].y[i] })),\r\n              // backgroundColor: '#ffa60091',\r\n              pointBackgroundColor: curves[2].x.map((x, i) => { \r\n                if (curves[2].powerOver99[i] === 1)\r\n                  return '#ff0000b3';\r\n                return '#ffa60091'\r\n               }),\r\n            },\r\n          ]\r\n        }\r\n        const times = curves[2].time.map((t, i) =>  t );\r\n        setTimes(times);\r\n        const locPower = curves[2].locPower.map((t, i) =>  t );\r\n        setLocPower(locPower);\r\n\r\n            \r\n        // Graph 2\r\n        const graphData2 = {\r\n          labels: [],\r\n          datasets: [],\r\n        }\r\n        const dataset2 = {\r\n          labels: [],\r\n          label: \"Time percentage\",\r\n          backgroundColor: '#7a5195',\r\n          data: []\r\n        };\r\n\r\n        const max = curves[1].x[curves[1].x.length-1];//Math.ceil(Math.max(...curves[2].x));\r\n        const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\r\n        const percentages = [];\r\n        let aux;\r\n        let qty;\r\n        let percentage;\r\n        const qtyTotal = curves[2].x.length;\r\n        windSpeeds.forEach( (windSpeed) => { \r\n            aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\r\n            qty = aux.length;\r\n            percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\r\n            percentages.push(percentage);\r\n            graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\r\n          }\r\n        );\r\n\r\n        dataset2.data = percentages;\r\n        graphData2.datasets.push(dataset2);\r\n\r\n\r\n        setGraphData(graphData);\r\n        setGraphData2(graphData2);\r\n\r\n\r\n    }\r\n\r\n\r\n    const getBadge = status => {\r\n  switch (status) {\r\n    case 'Active': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'Pending': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n\r\n}\r\n\r\nconst performanceFields = [\r\n  'a', 'b', 'c'\r\n];\r\n\r\nconst fields = [\r\n  '',\r\n  'Used Data',\r\n  'Filtered Data',\r\n  'Total'\r\n]\r\n\r\nconst options = {\r\n  animation: {\r\n    duration: loading ? 0 : 1000\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  tooltips: {\r\n    callbacks: {\r\n      title: function(tooltipItem, data){\r\n        return tooltipItem[0].label + ' m/s';\r\n      },\r\n      label: function(tooltipItem, data) {\r\n        return round(tooltipItem.value,1) + ' %';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n// const optionsBoxPlot = {\r\n//   animation: {duration: loading ? 0 : 1000},\r\n//   responsive: true,\r\n//   legend: {\r\n//     position: 'top',\r\n//   }\r\n// }\r\n\r\nconst optionsScatter = {\r\n  animation: {duration: loading ? 0 : 1000},\r\n  plugins: {\r\n    tooltip: {\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n            let ret = [];\r\n            if(tooltipItem.dataset.label !=  \"Manufacturer curve\")\r\n              ret.push(formatDate2(times[tooltipItem.dataIndex]));\r\n            ret.push('Power: ' + formatNumber(round(tooltipItem.raw.y,1)) + ' kWh');\r\n            ret.push('Wind Speed: ' + round(tooltipItem.raw.x,1) + \" m/s\");\r\n            ret.push('Park Total Production: ' + round(locPower[tooltipItem.dataIndex],1) + \" kWh\");\r\n            return ret;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 2\r\n    }\r\n  },\r\n};\r\n\r\n\r\n// function randomValues(count, min, max) {\r\n//   const delta = max - min;\r\n//   return Array.from({ length: count }).map(() => Math.random() * delta + min);\r\n// }\r\n\r\n// const boxplotData = {\r\n//   // define label tree\r\n//   labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Dataset 1\",\r\n//       backgroundColor: \"rgba(255,0,0,0.5)\",\r\n//       borderColor: \"red\",\r\n//       borderWidth: 1,\r\n//       outlierColor: \"#999999\",\r\n//       padding: 10,\r\n//       itemRadius: 0,\r\n//       data: [\r\n//         randomValues(100, 0, 100),\r\n//         randomValues(100, 0, 20),\r\n//         randomValues(100, 20, 70),\r\n//         randomValues(100, 60, 100),\r\n//         randomValues(40, 50, 100),\r\n//         randomValues(100, 60, 120),\r\n//         randomValues(100, 80, 100)\r\n//       ]\r\n//     },\r\n//     {\r\n//       label: \"Dataset 2\",\r\n//       backgroundColor: \"rgba(0,0,255,0.5)\",\r\n//       borderColor: \"blue\",\r\n//       borderWidth: 1,\r\n//       outlierColor: \"#999999\",\r\n//       padding: 10,\r\n//       itemRadius: 0,\r\n//       data: [\r\n//         randomValues(100, 60, 100),\r\n//         randomValues(100, 0, 100),\r\n//         randomValues(100, 0, 20),\r\n//         randomValues(100, 20, 70),\r\n//         randomValues(40, 60, 120),\r\n//         randomValues(100, 20, 100),\r\n//         randomValues(100, 80, 100)\r\n//       ]\r\n//     }\r\n//   ]\r\n// };\r\n\r\n  return (\r\n    <CCard>\r\n\r\n    <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"3\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Power Curve - Analysis\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"9\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-md'} disabled={loading} custom name=\"generator\" id=\"generator\" onChange={(ev) => {setGenerator(ev.target.value);}}>\r\n                {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value); }} />\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:1.2,minWidth:'72px'}}>Wind sector</h6>\r\n              <div class=\"multiselect-container\">\r\n                <Multiselect \r\n                  disabled={loading}\r\n                  options={angles.map((angle) => {\r\n                      return {id:angle,name:angle}\r\n                    })}\r\n                  onSelect={(selectedList) => {setWindSectors(selectedList.map((angle) => { \r\n                      const angleSplit = angle.id.split(\"-\"); \r\n                      return {from:angleSplit[0], to:angleSplit[1]} \r\n                    } \r\n                  ))}}\r\n                  onRemove={(selectedList) => {setWindSectors(selectedList.map((angle) =>{ \r\n                      const angleSplit = angle.id.split(\"-\"); \r\n                      return {from:angleSplit[0], to:angleSplit[1]} \r\n                    } \r\n                  ))}}\r\n                  displayValue=\"name\"\r\n                  />\r\n              </div>\r\n              <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n            </CCol>\r\n           </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n      \r\n      <CCardBody>\r\n\r\n       { (loading || dataLoaded) &&\r\n\r\n        <CRow>\r\n          <CCol sm=\"7\" className=\"text-center\">\r\n\r\n          {dataLoaded || dataLoadError ? \r\n\r\n            <div>\r\n              <div style={{marginBottom:'50px'}}>\r\n                <div className=\"text-left\" style={{width: '100%'}}>Power (KWh)</div>\r\n                <Scatter data={graphData} options={optionsScatter} />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n\r\n              {/* <div style={{marginBottom:'50px'}}>\r\n                <h4 className=\"pb-2 mb-4 border-bottom text-left\" >Performance Index by Wind Speed</h4>\r\n                <div className=\"text-left\" style={{width: '100%'}}>Time (%)</div>\r\n                <BoxPlotChart data={graphData2} options={optionsBoxPlot} />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div> */}\r\n\r\n              {/* <Chart\r\n                type=\"boxplot\"\r\n                height={100}\r\n                legend={{\r\n                  display: false\r\n                }}\r\n                data={boxplotData}\r\n                options={{\r\n                  responsive: true,\r\n                }}\r\n              /> */}\r\n\r\n\r\n              <div style={{marginBottom:'50px'}}>\r\n                <h4 className=\"pb-2 mb-4 border-bottom text-left\" >Operational data</h4>\r\n                <div className=\"text-left\" style={{width: '100%'}}>Time (%)</div>\r\n                <CChartBar\r\n                  datasets={graphData2.datasets}\r\n                  labels={graphData2.labels}\r\n                  options={options}\r\n                />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n            </div>\r\n          : \r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          }\r\n            \r\n          </CCol>\r\n\r\n          <CCol sm=\"5\">\r\n\r\n            { dataLoaded || dataLoadError ?\r\n              <div>\r\n                % data above Reference Power Curve: {round(performance['Percentage data above manufacturer power curve']) }%<br />\r\n                % data below Reference Power Curve: {round(performance['Percentage data below manufacturer power curve']) }%<br />\r\n                Performance index {round(performance['Performance index'])}%<br /><br />\r\n              </div>\r\n              : \r\n              <div class=\"text-center\">\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n\r\n              <h4>Data Use</h4>\r\n\r\n              <div style={{textAlign:'right'}}>\r\n                  {dataLoaded || dataLoadError \r\n                    ? <CDataTable\r\n                    items={tableData1}\r\n                    fields={tableFields1}\r\n                    striped\r\n                    itemsPerPage={5}\r\n                    pagination\r\n                    scopedSlots = {{\r\n                      'status':\r\n                        (item)=>(\r\n                          <td>\r\n                            <CBadge color={getBadge(item.status)}>\r\n                              {item.status}\r\n                            </CBadge>\r\n                          </td>\r\n                        )\r\n  \r\n                    }}\r\n                  />\r\n                    : \r\n                    <ChartLoading/>\r\n                \r\n              }\r\n              </div>\r\n\r\n              <h4>Reasons for Filtered Data</h4>\r\n              <div style={{textAlign:'right'}}>\r\n\r\n              {dataLoaded || dataLoadError\r\n                    ? \r\n                    <CDataTable\r\n                    items={tableData2}\r\n                    fields={tableFields2}\r\n                    striped\r\n                    itemsPerPage={5}\r\n                    pagination\r\n                    scopedSlots = {{\r\n                      'status':\r\n                        (item)=>(\r\n                          <td>\r\n                            <CBadge color={getBadge(item.status)}>\r\n                              {item.status}\r\n                            </CBadge>\r\n                          </td>\r\n                        )\r\n\r\n                    }}\r\n                  />\r\n                  : \r\n                  <ChartLoading/>\r\n              } \r\n              </div>\r\n\r\n          </CCol>\r\n\r\n        </CRow>\r\n\r\n\r\n        }\r\n\r\n      </CCardBody>\r\n\r\n\r\n\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\power-curve\\benchmark.js",["1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSelect,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n  CSpinner,\r\n  CContainer\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine\r\n} from '@coreui/react-chartjs'\r\n\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, formatDate, round, getDateLabel, formatNumber} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\n\r\nconst Charts = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n  const [curves, setCurves] = useState([]);\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [windSectors, setWindSectors] = useState([]);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [performance, setPerformance] = useState({});\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n  const angles = [\r\n    \"0-45\",\r\n    \"45-90\",\r\n    \"90-135\",\r\n    \"135-180\",\r\n    \"180-225\",\r\n    \"225-270\",\r\n    \"270-315\",\r\n    \"315-360\"\r\n  ]\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    if (selectedGenerators) body.generators = selectedGenerators\r\n    body.angles = []\r\n    if (windSectors.length > 0) body.angles = windSectors\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/powerCurve',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n          setDataLoaded(true);\r\n          setData(response);\r\n          refreshChart(response);\r\n          \r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const refreshChart = (generatorData) => {\r\n\r\n    const generators = generatorData.generator;\r\n\r\n    if (generators.length==0) return;\r\n\r\n      const graphData = {\r\n        labels: [],\r\n        datasets: [],\r\n        backgroundColor: colors\r\n      };\r\n\r\n      const datasetManufacturerData = {\r\n        label: \"Manufacturer Curve\",\r\n        backgroundColor:  \"#ff6161\",\r\n        data: generators[0].data.curves[0].x.map((x, i) => { \r\n              return {x, y: generators[0].data.curves[0].y[i] };\r\n            }\r\n          )\r\n      };\r\n      graphData.datasets.push(datasetManufacturerData);\r\n\r\n      let productionTotal = generators[0].data.curves[1].x.map((x) => {return 0});\r\n      generators.forEach(\r\n        (generator,index) => {\r\n          const dataset = {\r\n            label: generator.code,\r\n            // borderColor: generatorColors[generator.code],//[index%7],\r\n            // pointBackgroundColor: 'transparent',\r\n            // pointBorderColor: 'transparent',\r\n            backgroundColor:  generatorColors[generator.code],//'transparent',\r\n            data: generator.data.curves[1].x.map((x, i) => { \r\n                  productionTotal[i] += generator.data.curves[1].y[i];\r\n                  return {x, y: generator.data.curves[1].y[i] };\r\n                }\r\n              )\r\n          };\r\n          graphData.datasets.push(dataset);\r\n        }\r\n      );\r\n      const datasetAverage = {\r\n        label: \"Average\",\r\n        // borderColor: \"#0400ff\",\r\n        // pointBackgroundColor: 'transparent',\r\n        // pointBorderColor: 'transparent',\r\n        backgroundColor: \"#0400ff\",//'transparent',\r\n        data: productionTotal.map((y, i) => { \r\n          return {x: generators[0].data.curves[1].x[i], y: y/generators.length }\r\n        })\r\n      };\r\n      graphData.datasets.push(datasetAverage);\r\n\r\n      const labels = [];\r\n      generators[0].data.curves[0].x.forEach(\r\n        x => {\r\n          labels.push(round(x))\r\n        }\r\n      );\r\n      graphData.labels = labels;\r\n\r\n      setGraphData(graphData);\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData();\r\n    }\r\n\r\n  }\r\n\r\n  const options = {\r\n    animation: {\r\n      duration: loading ? 0 : 1000\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(tooltipItem){\r\n            return tooltipItem[0].dataset.label != \"Manufacturer Curve\" ? 'Turbine: ' + tooltipItem[0].dataset.label : tooltipItem[0].dataset.label;\r\n          },\r\n          label: function(tooltipItem, data) {\r\n              return [ 'Power: ' + formatNumber(round(tooltipItem.raw.y,1)) + ' kWh', 'Wind Speed: ' + formatNumber(round(tooltipItem.raw.x,1)) + \" m/s\" ];\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n\r\n  return (\r\n    <CCard>\r\n\r\n    <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Power Curve - Benchmark\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"7\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2,minWidth:'72px'}}>Wind sector</h6>\r\n              <div class=\"multiselect-container mr-2\">\r\n                <Multiselect \r\n                  disabled={loading}\r\n                  options={angles.map((angle) => {\r\n                      return {id:angle,name:angle}\r\n                    })}\r\n                  onSelect={(selectedList) => {setWindSectors(selectedList.map((angle) => { \r\n                      const angleSplit = angle.id.split(\"-\"); \r\n                      return {from:angleSplit[0], to:angleSplit[1]} \r\n                    } \r\n                  ))}}\r\n                  onRemove={(selectedList) => {setWindSectors(selectedList.map((angle) =>{ \r\n                      const angleSplit = angle.id.split(\"-\"); \r\n                      return {from:angleSplit[0], to:angleSplit[1]} \r\n                    } \r\n                  ))}}\r\n                  displayValue=\"name\"\r\n                  />\r\n              </div>\r\n            </CCol>\r\n\r\n          </CRow>\r\n\r\n\r\n\r\n\r\n\r\n        </CCardHeader>\r\n      \r\n      <CCardBody>\r\n\r\n        <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n          <CCol sm=\"9\" className={\"d-flex \"} >\r\n            <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select turbines:</h6>  \r\n            {generatorsLoaded && \r\n              generators.map((gen, index) => (  \r\n                  <CButton \r\n                    style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                    className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => selectGenerator(gen.id)} \r\n                    id={gen.id}\r\n                    >\r\n                      {gen.code}\r\n                  </CButton>\r\n              ))\r\n            }\r\n          </CCol>\r\n          <CCol sm=\"3\" className=\"text-right d-flex flex-center flex-justify-end \">\r\n            <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n          </CCol>\r\n        </CRow>\r\n\r\n\r\n        { generatorsSelected ?\r\n\r\n        <CRow>\r\n          <CCol className=\"text-center\">\r\n\r\n          {!loading || dataLoadError ? \r\n\r\n            <div>\r\n              <div style={{marginBottom:'50px'}}>\r\n                <div className=\"text-left\" style={{width: '100%'}}>Power (KW)</div>\r\n                <Line \r\n                  data={graphData}\r\n                  // datasets={graphData.datasets}\r\n                  // labels={graphData.labels}\r\n                  options={options} />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n            </div>\r\n\r\n          : \r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          }\r\n            \r\n          </CCol>\r\n        </CRow>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n\r\n        }\r\n\r\n      </CCardBody>\r\n\r\n\r\n\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\availability-and-losses\\availability-and-losses.js",["1071","1072","1073","1074","1075"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CSelect,\r\n  CButton,\r\n  CDataTable\r\n} from '@coreui/react'\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\nimport {DateFilter, round, formatDate, getDateLabel} from '../../../../helpers/utils.js'\r\n\r\nconst AvailabilityAndLosses = () => {\r\n\r\n  const [period, setPeriod] = useState('cm');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [tableFields, setTableFields] = useState([]);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (generator && generator !== '0') body.generators = [generator];\r\n    \r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/availability',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      setDataLoaded(true);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      const data = {\r\n        labels: [],\r\n        datasets: []\r\n      }\r\n      const tableData = [];\r\n      const tableFields = [{\r\n        key: \"field\",\r\n        label: \"\",\r\n        _style: { width: '130px', fontWeight: 'bold'}\r\n      }]\r\n      const rowTimeBasedAvailability = {\r\n        field: 'Time-based availability',\r\n      }\r\n      const rowProductionBasedAvailability = {\r\n        field: 'Production-based availability',\r\n      }\r\n\r\n      responseData.data.forEach((rD,index) => {\r\n        const rDfrom = rD.from.split(' ')[0]\r\n        const rDto = rD.to.split(' ')[0]\r\n        const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n        data.labels.push(label);\r\n        tableFields.push(\r\n          {\r\n            key: \"period-\"+index,\r\n            label: label\r\n          }\r\n        )\r\n        rowTimeBasedAvailability[\"period-\"+index] = round(rD.timeBasedAvailability,1) + ' %'\r\n        rowProductionBasedAvailability[\"period-\"+index] = round(rD.productionBasedAvailability,1) + ' %'\r\n      });\r\n      tableData.push(rowTimeBasedAvailability)\r\n      tableData.push(rowProductionBasedAvailability)\r\n\r\n      const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n      const dataset1 = {\r\n        label:  \"Production\",\r\n        backgroundColor: '#003f5c',\r\n        data: responseData.data.map((x, i) => { return x.productionMwh }),\r\n        stack: 'Production'\r\n      };\r\n      const dataset2 = {\r\n        label:  \"Manufacturer Lost Energy\",\r\n        backgroundColor: '#56b1db',\r\n        data: responseData.data.map((x, i) => { return x.powerLostManufacturer }),\r\n        stack: 'Lost Energy'\r\n      };\r\n      const dataset3 = {\r\n        label:  \"Utility Lost Energy\",\r\n        backgroundColor: '#7a5195',\r\n        data: responseData.data.map((x, i) => { return x.powerLostUtility }),\r\n        stack: 'Lost Energy'\r\n      };\r\n      const dataset4 = {\r\n        label:  \"Environmental Lost Energy\",\r\n        backgroundColor: '#9ceb01',\r\n        data: responseData.data.map((x, i) => { return x.powerLostEnvironmental }),\r\n        stack: 'Lost Energy'\r\n      };\r\n      const dataset5 = {\r\n        label:  \"Service Lost Energy\",\r\n        backgroundColor: '#ef5675',\r\n        data: responseData.data.map((x, i) => { return x.powerLostService }),\r\n        stack: 'Lost Energy'\r\n      };\r\n      const dataset6 = {\r\n        label:  \"Curtailment Lost Energy\",\r\n        backgroundColor: '#bc5090',\r\n        data: responseData.data.map((x, i) => { return x.powerLostCurtailment }),\r\n        stack: 'Lost Energy'\r\n      };\r\n      const dataset7 = {\r\n        label:  \"Performance\",\r\n        backgroundColor: '#ff764a',\r\n        data: responseData.data.map((x, i) => { return x.performance }),\r\n        stack: 'Performance'\r\n      };\r\n\r\n      data.datasets.push(dataset1);\r\n      data.datasets.push(dataset2);\r\n      data.datasets.push(dataset3);\r\n      data.datasets.push(dataset4);\r\n      data.datasets.push(dataset5);\r\n      data.datasets.push(dataset6);\r\n      data.datasets.push(dataset7);\r\n\r\n      setGraphData(data)\r\n      setTableData(tableData)\r\n      setTableFields(tableFields)\r\n\r\n    }).catch(\r\n      e => {\r\n        setLoading(false);\r\n        alert(e);\r\n      }\r\n    );\r\n  \r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response && !response.error) {\r\n          if (response.generators != null)\r\n            setGenerators(response.generators);\r\n          setGeneratorsLoaded(true)\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  const optionsStackedBar = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        stacked: true,\r\n      },\r\n      y: {\r\n        stacked: true,\r\n      },\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 40,\r\n        right: 20\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' MWh';\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"3\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Availability and Losses\r\n            </h3>\r\n            <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n          </CCol>\r\n          \r\n          <CCol sm=\"9\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 mb-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                <option value=\"0\">All turbines</option>\r\n              {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n              <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                  <option value=\"day\" selected>Day</option>\r\n                  <option value=\"week\">Week</option>\r\n                  <option value=\"month\">Month</option>\r\n              </CSelect>\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n            <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value);}} />\r\n            <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData()}} >Submit</CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        { (loading || dataLoaded) &&\r\n            \r\n          <div>\r\n            <div style={{marginBottom:'50px'}}>\r\n              {/* <h4 className=\"pb-2 mb-4 border-bottom\" >Alarms by alarm code</h4> */}\r\n              { (dataLoaded || dataLoadError) ?\r\n              <div>\r\n                <div className=\"my-2\">\r\n                  <CDataTable\r\n                    items={tableData}\r\n                    fields={tableFields}\r\n                    size=\"sm\"\r\n                    addTableClasses=\"font-sm\"\r\n                    scopedSlots={{\r\n                      field: (item) => (\r\n                        <td><b>{item.field}</b></td>\r\n                      ),\r\n                    }}\r\n                    // striped\r\n                  />\r\n                </div>\r\n                <div class=\"ml-4\">MWh</div>\r\n                <Bar options={optionsStackedBar} data={graphData} />\r\n                <CRow className=\"text-center d-block\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n              </div>\r\n              :\r\n                <div className='text-center'>\r\n                  <CSpinner className=\"loading-spinner\" color='#321fdb'/>\r\n                </div>\r\n              }\r\n            </div>\r\n          </div>\r\n        }\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default AvailabilityAndLosses\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\performance\\performance.js",["1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CSpinner,\r\n  Fade\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\n\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter, formatNumber} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport * as FileSaver from 'file-saver'\r\nimport XLSX from 'sheetjs-style'\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({ labels: [], datasets: [] });\r\n  const [graphData2, setGraphData2] = useState({labels: [],datasets: [] });\r\n  const [graphData3, setGraphData3] = useState({labels: [],datasets: [] });\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [data, setData] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [generatorsButtons, setGeneratorsButtons] = useState(null);\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n\r\n  const exportToExcel = async () => {\r\n\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + ' ' + today.getHours() + ':' + today.getMinutes();\r\n\r\n    const border = {\r\n        top: { style: 'thin', color: '#000' },\r\n        bottom: { style: 'thin', color: '#000' },\r\n        left: { style: 'thin', color: '#000' },\r\n        right: { style: 'thin', color: '#000' },\r\n    }\r\n\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    performanceData.forEach(x => x.data.graph.reverse());\r\n    // let rows= [];\r\n    let rows = [\r\n      [\r\n        { v: \"Performance\", t: \"s\", s: { font: { bold: true, sz: 14 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Date-Time of Report\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: date, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Group by\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: groupBy.charAt(0).toUpperCase() + groupBy.slice(1), t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [\r\n        { v: \"Period\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: getDateLabel(dateRange), t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [\r\n        { v: \"Park\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: getCookie('parkName'), t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [\r\n        { v: \"Turbines\", t: \"s\", s: { font: { sz: 11 }, border } },\r\n        { v: generators.filter(gen => selectedGenerators.includes(gen.id)).map(gen => gen.code).join(', '), t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"1 - Performance Index (%)\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Turbine\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...performanceData[0].data.graph.map((x) => {\r\n          const label = (groupBy == \"day\") ? `${formatDate(x.from, 'noyear')}` : `${formatDate(x.from, 'noyear')} - ${formatDate(x.to, 'noyear')}`\r\n          return { v: label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n      ],\r\n      ...performanceData.map((x) => {\r\n        return [\r\n          { v: x.name, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" }} },\r\n          ...x.data.graph.map((y,index) => {\r\n            return { v: round(y.performance,1), t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          })\r\n        ]\r\n      }),\r\n      [],\r\n      [\r\n        { v: \"2 - Production and Wind Speed\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Production (MWh)\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [\r\n        { v: \"Turbine\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...performanceData[0].data.graph.map((x) => {\r\n          const label = (groupBy == \"day\") ? `${formatDate(x.from, 'noyear')}` : `${formatDate(x.from, 'noyear')} - ${formatDate(x.to, 'noyear')}`\r\n          return { v: label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n      ],\r\n      ...performanceData.map((x) => {\r\n        return [\r\n          { v: x.name, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" }} },\r\n          ...x.data.graph.map((y) => {\r\n            return { v: round(y.power/1000,1), t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          })\r\n        ]\r\n      }),\r\n      [],\r\n      [\r\n        { v: \"Wind Speed (m/s)\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [\r\n        { v: \"Turbine\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...performanceData[0].data.graph.map((x) => {\r\n          const label = (groupBy == \"day\") ? `${formatDate(x.from, 'noyear')}` : `${formatDate(x.from, 'noyear')} - ${formatDate(x.to, 'noyear')}`\r\n          return { v: label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n      ],\r\n      ...performanceData.map((x) => {\r\n        return [\r\n          { v: x.name, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" }} },\r\n          ...x.data.graph.map((y) => {\r\n            return { v: round(y.windspeed,1), t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          })\r\n        ]\r\n      }),\r\n      [],\r\n      [\r\n        { v: \"3 - Time-Based Availability (%)\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [],\r\n      [\r\n        { v: \"Wind Speed (m/s)\", t: \"s\", s: { font: { bold: true, sz: 11 } } },\r\n      ],\r\n      [\r\n        { v: \"Turbine\", t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } },\r\n        ...performanceData[0].data.graph.map((x) => {\r\n          const label = (groupBy == \"day\") ? `${formatDate(x.from, 'noyear')}` : `${formatDate(x.from, 'noyear')} - ${formatDate(x.to, 'noyear')}`\r\n          return { v: label, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" } } }\r\n        }),\r\n      ],\r\n      ...performanceData.map((x) => {\r\n        return [\r\n          { v: x.name, t: \"s\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"center\" }} },\r\n          ...x.data.graph.map((y) => {\r\n            return { v: round(y.availability,1), t: \"n\", s: { font: { sz: 11 }, border, alignment: {horizontal: \"right\" } } }\r\n          })\r\n        ]\r\n      }),\r\n    ];\r\n\r\n\r\n    const objectMaxLength = [];\r\n\r\n    rows.forEach(arr => {\r\n      arr.forEach((cell, key) => {\r\n        objectMaxLength[key] = 0;\r\n      });\r\n    });\r\n\r\n    rows.forEach(arr => {\r\n      arr.forEach((cell, key) => {\r\n        let len = 0;\r\n        let value = cell.v;\r\n        switch(typeof value) {\r\n          case \"number\": len = 10; break;\r\n          case \"string\": len = value.length*0.8; break;\r\n          case \"object\": if(value instanceof Date) len = 10; break; \r\n        }\r\n        objectMaxLength[key] = Math.max(objectMaxLength[key], len);\r\n      });\r\n    });\r\n\r\n    const ws = XLSX.utils.aoa_to_sheet(rows);\r\n    ws['!cols'] = objectMaxLength.map(x => { return {wch: x} });\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Performance\");\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const data = new Blob([excelBuffer],  {type: fileType });\r\n    FileSaver.saveAs(data, \"PerformanceReport.xlsx\");\r\n    \r\n  }\r\n\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    const {period, groupBy} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    body.generators = selectedGenerators;\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      endpoint: 'wind/performanceIndex',\r\n      method: 'POST',\r\n      body: body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData.error) {\r\n          setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n        }\r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n        const data2 = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n        const data3 = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n\r\n        setPerformanceData(responseData.data);\r\n        responseData.data.forEach((rDs) => {\r\n\r\n          const dataset = {\r\n            labels: [],\r\n            label: rDs.code,\r\n            backgroundColor: generatorColors[rDs.code],\r\n            data: [],\r\n          };\r\n          const dataset2y = {\r\n            labels: [],\r\n            label: \"Production: \"+rDs.code,\r\n            backgroundColor: generatorColors[rDs.code],\r\n            borderColor: generatorColors[rDs.code],\r\n            borderWidth: 1,\r\n            pointBorderColor: generatorColors[rDs.code],\r\n            pointBorderWidth: 2,\r\n            data: [],\r\n            yAxisID: 'y',\r\n            pointRadius: 4,\r\n            pointHoverRadius: 5,\r\n          };\r\n          const dataset2y1 = {\r\n            labels: [],\r\n            label: \"Wind speed: \"+rDs.code,\r\n            borderColor: generatorColors[rDs.code],\r\n            borderWidth: 1,\r\n            pointBorderColor: generatorColors[rDs.code],\r\n            pointBorderWidth: 2,\r\n            pointBackgroundColor: '#d8dbe0',\r\n            data: [],\r\n            yAxisID: 'y1',\r\n            pointRadius: 4,\r\n            pointHoverRadius: 5,\r\n          };\r\n\r\n          const dataset3 = {\r\n            labels: [],\r\n            label: rDs.code,\r\n            backgroundColor: generatorColors[rDs.code],\r\n            data: [],\r\n          };\r\n\r\n          rDs.data.graph.forEach((rD) => {\r\n            const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\r\n            dataset.labels.push(label)\r\n            dataset2y.labels.push(label)\r\n            dataset2y1.labels.push(label)\r\n            dataset3.labels.push(label)\r\n            dataset.data.push(rD.performance)\r\n            dataset2y.data.push(rD.power/1000)\r\n            dataset2y1.data.push(rD.windspeed)\r\n            dataset3.data.push(rD.availability)\r\n\r\n            if (rDs.name == \"Total\" && rDs.id.length > 1) {\r\n              dataset.label = \"Total\"\r\n              dataset2y.label = \"Production: Total\"\r\n              dataset2y1.label = \"Wind Speed: Total\"\r\n              dataset3.label = \"Total\"\r\n              dataset.backgroundColor = generatorColors[rDs.name]\r\n              dataset2y.backgroundColor = generatorColors[rDs.name]\r\n              dataset2y.borderColor = generatorColors[rDs.name]\r\n              dataset2y1.borderColor = generatorColors[rDs.name]\r\n              dataset3.backgroundColor = generatorColors[rDs.name]\r\n            }\r\n          });\r\n\r\n          dataset.labels.reverse();\r\n          dataset.data.reverse();\r\n          dataset2y.labels.reverse();\r\n          dataset2y.data.reverse();\r\n          dataset2y1.labels.reverse();\r\n          dataset2y1.data.reverse();\r\n          dataset3.labels.reverse();\r\n          dataset3.data.reverse();\r\n\r\n          if (rDs.name != \"Total\" || rDs.id.length > 1) {\r\n            data.datasets.push(dataset);\r\n            data2.datasets.push(dataset2y);\r\n            data2.datasets.push(dataset2y1);\r\n            data3.datasets.push(dataset3);\r\n          }\r\n\r\n        });\r\n\r\n        responseData.data[0].data.graph.forEach((rD) => {\r\n          const rDfrom = rD.from;\r\n          const rDto = rD.to;\r\n          const label = (groupBy == \"day\") ? `${formatDate(rD.from, 'noyear')}` : `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\r\n          data.labels.push(label);\r\n          data2.labels.push(label);\r\n          data3.labels.push(label);\r\n\r\n        });\r\n\r\n        data.labels.reverse();\r\n        data2.labels.reverse();\r\n        data3.labels.reverse();\r\n\r\n        setGraphData(data);\r\n        setGraphData2(data2);\r\n        setGraphData3(data3);\r\n        setDataLoaded(true);\r\n\r\n      })\r\n      .catch(\r\n        err => {\r\n          console.warn(`ERROR! ${err}`)\r\n          setLoading(false);\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  const loadGenerators = () => {\r\n  \r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n          \r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              generatorColors[\"Total\"] = \"#0400ff\";\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n  \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const options = {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    // interaction: {\r\n    //   mode: 'index',\r\n    //   intersect: false,\r\n    // },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n              return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1)+\"%\";\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  const options2 =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    // interaction: {\r\n    //   mode: 'index',\r\n    //   intersect: false,\r\n    // },\r\n    stacked: false,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.yAxisID == \"y\")\r\n              return tooltipItem.dataset.label + \": \" + formatNumber(round(tooltipItem.raw,1)) + ' MW';\r\n            else\r\n              return tooltipItem.dataset.label + \": \" + formatNumber(round(tooltipItem.raw,1)) + ' m/s';\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        lineWidth: 4,\r\n        borderRadius: 10,\r\n        usePointStyle: true,\r\n        pointStyle: {\r\n          borderWidth: 5,\r\n          pointBorderWidth: 5,\r\n        }\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setGeneratorsSelected(true);\r\n    fetchData({period: dateRange, groupBy: groupBy})\r\n\r\n  }\r\n\r\n  return (\r\n\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n\r\n              <CCol sm=\"7\">\r\n                <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                  Performance\r\n                </h3>\r\n                <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n                </CCol>\r\n\r\n                <CCol sm=\"5\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                  <CSelect className={'input-md'} value={groupBy} style={{maxWidth:'150px'}} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\" selected>Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                  </CSelect>\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                  <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n                \r\n                </CCol>\r\n            </CRow>\r\n\r\n          </CCardHeader>\r\n\r\n          <CCardBody>\r\n\r\n            <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n              <CCol sm=\"9\" className={\"d-flex \"} >\r\n                <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select turbines:</h6>\r\n              {generatorsLoaded && \r\n                generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                ))\r\n              }\r\n              </CCol>\r\n              <CCol sm=\"3\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                <CButton disabled={selectedGenerators.length==0} color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n            </CRow>\r\n\r\n            {generatorsSelected && \r\n            \r\n              <div>\r\n                {(!loading || dataLoadError) ?\r\n\r\n                  <div className='position-relative'>\r\n                    <CButton \r\n                      onClick={(e) => exportToExcel()}\r\n                      color='primary'\r\n                      className={'position-absolute'}\r\n                      style={{top:'-9px', right:'0', zIndex: '1'}}\r\n                      >\r\n                        Download\r\n                    </CButton>\r\n\r\n                    <div>\r\n                      <div style={{marginBottom:'50px'}}>\r\n                        <h4 className=\"pb-2 mb-4 border-bottom\" >Performance Index</h4>\r\n                        <div className=\"text-left float-left\" style={{width: '50%'}}>%</div>\r\n                        <div className=\"text-left\" style={{width: '100%'}}></div>\r\n                        <Line data={graphData} options={options} />\r\n                        <CRow className=\"text-center d-block mt-2\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                      </div>\r\n\r\n                      <div style={{marginBottom:'50px'}}>\r\n                        <h4 className=\"pb-2 mb-4 border-bottom\" >Production and Wind Speed</h4>\r\n                        <div className=\"text-left float-left\" style={{width: '50%'}}>MWh</div>\r\n                        <div className=\"text-right float-right\" style={{width: '50%'}}>m/s</div>\r\n                        <Line data={graphData2} options={options2} />\r\n                        <CRow className=\"text-center d-block mt-2\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                      </div>\r\n\r\n                      <div style={{marginBottom:'50px'}}>\r\n                        <h4 className=\"pb-2 mb-4 border-bottom\" >Time-Based Availability</h4>\r\n                        <div className=\"text-left\" style={{width: '100%'}}>%</div>\r\n                        <Line data={graphData3} options={options} />\r\n                        <CRow className=\"text-center d-block mt-2\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                :\r\n                <CRow style={{justifyContent:'center'}}>\r\n                  <CSpinner \r\n                    className=\"loading-spinner\"\r\n                    color='#321fdb'\r\n                  />\r\n                </CRow>\r\n                }\r\n              </div>\r\n            }\r\n            \r\n          </CCardBody>\r\n\r\n        </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\diagnostics\\diagnostics.js",["1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115"],"import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSpinner,\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {formatNumber, formatDate2, round, getDateLabel, DateFilter} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Line, Scatter, Bar } from 'react-chartjs-2';\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData3, setGraphData3] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData4, setGraphData4] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [tableData1, setTableData1] = useState([]);\r\n  const [tableFields1, setTableFields1] = useState([]);\r\n  const [tableData2, setTableData2] = useState([]);\r\n  const [tableFields2, setTableFields2] = useState([]);\r\n  const [tableData3, setTableData3] = useState([]);\r\n  const [tableFields3, setTableFields3] = useState([]);\r\n  const [tableData4, setTableData4] = useState([]);\r\n  const [tableFields4, setTableFields4] = useState([]);\r\n  const [tableData5, setTableData5] = useState([]);\r\n  const [tableFields5, setTableFields5] = useState([]);\r\n  const [tableData6, setTableData6] = useState([]);\r\n  const [tableFields6, setTableFields6] = useState([]);\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoaded2, setDataLoaded2] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showSideTables, setShowSideTables] = useState(true);\r\n  const [timesPitchWindspeed, setTimesPitchWindspeed] = useState([]);\r\n  const [timesPowerRPM, setTimesPowerRPM] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true)\r\n    setDataLoaded(false)\r\n    setDataLoaded2(false)\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (generator) body.generators = [generator];\r\n\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n    \r\n    DataAPI({\r\n      'endpoint': 'chart/pitchWindspeed',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        const generatorData = response.generator && response.generator[0].data;\r\n\r\n        setDataLoaded(true);\r\n\r\n        if (generatorData.curves.length==0) return;\r\n\r\n        const labels = [];\r\n\r\n        const curves = generatorData.curves;\r\n        const medians = generatorData.medians;\r\n\r\n        const graphData = {\r\n          labels: [],\r\n          datasets: [\r\n            {\r\n              label:  curves[0].label,\r\n              data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n              backgroundColor: '#374c80a3',\r\n            },\r\n            {\r\n              label:  curves[1].label,\r\n              data: curves[1].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n              backgroundColor: '#ffa600a3',\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: 'Turbine Wind Speed - Median Pitch',\r\n              data: medians[0].x_ws_pitch.map((x, i) => ({ x, y: medians[0].ws_pitch[i] })),\r\n              backgroundColor: 'red',\r\n              borderColor: 'red',\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: 'Estimated Wind Speed - Median Pitch',\r\n              data: medians[0].x_estimated_ws_pitch.map((x, i) => ({ x, y: medians[0].estimated_ws_pitch[i] })),\r\n              backgroundColor: 'blue',\r\n              borderColor: 'blue',\r\n            },\r\n          ],\r\n          // backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n      \r\n        }\r\n\r\n        setGraphData(graphData);\r\n\r\n\r\n        if (generatorData){\r\n          if(generatorData.hasOwnProperty('dataUse')) processTableData1(generatorData.dataUse);\r\n          if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData2(generatorData.dataFilteredDueTo);\r\n          // if(generatorData.hasOwnProperty('performance')) setPerformance(generatorData.performance);\r\n        }\r\n\r\n        const times = curves[0].date.map((t, i) =>  t );\r\n        setTimesPitchWindspeed(times);\r\n\r\n      }\r\n    );\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/powerRpm',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        const generatorData = response.generator && response.generator[0].data;\r\n\r\n        setDataLoaded2(true);\r\n\r\n        if (generatorData.curves.length==0) return;\r\n\r\n        const curves = generatorData.curves;\r\n\r\n        const graphData = {\r\n          labels: [],\r\n          datasets: [\r\n            {\r\n              label:  curves[0].label,\r\n              data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n              backgroundColor: '#bc50907a',\r\n            }\r\n          ],\r\n      \r\n        }\r\n\r\n        setGraphData2(graphData);\r\n\r\n\r\n        if (generatorData){\r\n          if(generatorData.hasOwnProperty('dataUse')) processTableData3(generatorData.dataUse);\r\n          if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData4(generatorData.dataFilteredDueTo);\r\n        }\r\n\r\n        const times = curves[0].date.map((t, i) =>  t );\r\n        setTimesPowerRPM(times);\r\n\r\n    });\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/nacelleDeviation',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        const generatorData = response.generator && response.generator[0].data;\r\n\r\n        setDataLoaded(true);\r\n\r\n        if (generatorData.curves.length==0) return;\r\n\r\n        const curves = generatorData.curves;\r\n\r\n        const graphData = {\r\n          labels: curves.map((x, i) => { return x.label }),\r\n          datasets: [\r\n            {\r\n              label: 'Average Deviation (Degrees)',\r\n              data: curves.map((x, i) => { return x.deviation_mean }),\r\n              borderColor: '#ffa600',\r\n              backgroundColor: '#ffa600',\r\n              type: 'line',\r\n              yAxisID: 'yDeviationMean',\r\n              order: 0\r\n            },\r\n            {\r\n              label: '% of Time',\r\n              data: curves.map((x, i) => { return x.deviation }),\r\n              borderColor: '#7a5195',\r\n              backgroundColor: '#7a5195',\r\n              yAxisID: 'yDeviation',\r\n              order: 1\r\n            },\r\n          ],\r\n        }\r\n\r\n        setGraphData3(graphData);\r\n\r\n        if (generatorData){\r\n          if(generatorData.hasOwnProperty('dataUse')) processTableData5(generatorData.dataUse);\r\n          if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData6(generatorData.dataFilteredDueTo);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n    body.groupBy = 'hour';\r\n    DataAPI({\r\n      'endpoint': 'chart/windMeasurements',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        const generatorData = response.graphs && response.graphs[0].data;\r\n\r\n        setDataLoaded(true);\r\n\r\n        if (generatorData.length==0) return;\r\n\r\n        const graphData = {\r\n          labels: generatorData.map((x, i) => {\r\n            return x.datetimeFrom; //generatorData.length > 48 ? x.datetimeFrom.split(' ')[0] : x.datetimeFrom;\r\n          }),\r\n          datasets: [\r\n            {\r\n              label: 'Average Wind Speed',\r\n              data: generatorData.map((x, i) => { return x.W_avg }),\r\n              borderColor: '#7a5195',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            },\r\n            {\r\n              label: 'Wind Sensor 1',\r\n              data: generatorData.map((x, i) => { return x.W_avg_ws1 }),\r\n              borderColor: '#ef5675',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            },\r\n            {\r\n              label: 'Wind Sensor 2',\r\n              data: generatorData.map((x, i) => { return x.W_avg_ws2 }),\r\n              borderColor: '#ffa600',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            },\r\n          ],\r\n      \r\n        }\r\n\r\n        setGraphData4(graphData);\r\n\r\n      }\r\n    );\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            setGenerator(response.generators[0].id)\r\n          }\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  const processTableData1 = (dataUse) => {\r\n\r\n    const tableData = [];\r\n\r\n    // var usedData = (Math.round(dataUse.usedData)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    // var filteredData = (Math.round(dataUse.filteredData)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    // var total = (Math.round(dataUse.total)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n\r\n    tableData.push({\r\n      '': dataUse.info,\r\n      'Used Data': round(dataUse.usedData)+'%',\r\n      'Filtered Data': round(dataUse.filteredData)+'%',\r\n      'Total': round(dataUse.total)+'%'\r\n    })\r\n\r\n    setTableData1(tableData);\r\n    setTableFields1(['', 'Used Data', 'Filtered Data', 'Total']);\r\n\r\n  }\r\n\r\n  const processTableData2 = (dataFilteredDueTo) => {\r\n\r\n    const tableData = [];\r\n\r\n    tableData.push({\r\n          '': dataFilteredDueTo.info,\r\n          'Missing Data': round(dataFilteredDueTo.missingData)+'%',\r\n          'Alarms': round(dataFilteredDueTo.alarms)+'%',\r\n          'Power < 0': round(dataFilteredDueTo.powerLowerThanZero)+'%',\r\n          'Curtailments': round(dataFilteredDueTo.curtailment)+'%',\r\n          'Total': round(dataFilteredDueTo.total)+'%',\r\n        })\r\n\r\n    setTableData2(tableData);\r\n    setTableFields2(['', 'Missing Data','Alarms','Power < 0','Curtailments','Total']);\r\n    \r\n  }\r\n\r\n  const processTableData3 = (dataUse) => {\r\n\r\n    const tableData = [];\r\n\r\n    tableData.push({\r\n      '': dataUse.info,\r\n      'Used Data': round(dataUse.usedData)+'%',\r\n      'Filtered Data': round(dataUse.filteredData)+'%',\r\n      'Total': round(dataUse.total)+'%'\r\n    })\r\n\r\n    setTableData3(tableData);\r\n    setTableFields3(['', 'Used Data', 'Filtered Data', 'Total']);\r\n\r\n  }\r\n\r\n\r\n  const processTableData4 = (dataFilteredDueTo) => {\r\n\r\n    const tableData = [];\r\n\r\n    tableData.push({\r\n          '': dataFilteredDueTo.info,\r\n          'Missing Data': round(dataFilteredDueTo.missingData)+'%',\r\n          'Alarms': round(dataFilteredDueTo.alarms)+'%',\r\n          'Curtailments': round(dataFilteredDueTo.curtailment)+'%',\r\n          'Total': round(dataFilteredDueTo.total)+'%',\r\n        })\r\n\r\n    setTableData4(tableData);\r\n    setTableFields4(['', 'Missing Data','Alarms','Curtailments','Total']);\r\n    \r\n  }\r\n\r\n  const processTableData5 = (dataUse) => {\r\n\r\n    const tableData = [];\r\n\r\n    tableData.push({\r\n      '': dataUse.info,\r\n      'Used Data': round(dataUse.usedData)+'%',\r\n      'Filtered Data': round(dataUse.filteredData)+'%',\r\n      'Total': round(dataUse.total)+'%'\r\n    })\r\n\r\n    setTableData5(tableData);\r\n    setTableFields5(['', 'Used Data', 'Filtered Data', 'Total']);\r\n\r\n  }\r\n\r\n\r\n  const processTableData6 = (dataFilteredDueTo) => {\r\n\r\n    const tableData = [];\r\n\r\n    tableData.push({\r\n          '': dataFilteredDueTo.info,\r\n          'Missing Data': round(dataFilteredDueTo.missingData)+'%',\r\n          'Alarms': round(dataFilteredDueTo.alarms)+'%',\r\n          'Power < 0': round(dataFilteredDueTo.powerLowerThanZero)+'%',\r\n          'Curtailments': round(dataFilteredDueTo.curtailment)+'%',\r\n          'Total': round(dataFilteredDueTo.total)+'%',\r\n        })\r\n\r\n    setTableData6(tableData);\r\n    setTableFields6(['', 'Missing Data','Alarms','Power < 0','Curtailments','Total']);\r\n    \r\n  }\r\n\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'Active': return 'success'\r\n      case 'Inactive': return 'secondary'\r\n      case 'Pending': return 'warning'\r\n      case 'Banned': return 'danger'\r\n      default: return 'primary'\r\n    }\r\n  }\r\n\r\n  const options = {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    }\r\n  };\r\n  const optionsScatter = {\r\n    ...options,\r\n    legend: {\r\n      display: false\r\n   },\r\n   elements: {\r\n    point: {\r\n      radius: 2\r\n    }\r\n  },\r\n  };\r\n\r\n  const optionsGraph1 = {\r\n                  ...optionsScatter,\r\n                  scales: {\r\n                    y:\r\n                      {\r\n                        min: -5,\r\n                        max: 20,\r\n                        stepSize: 1,\r\n                      },\r\n                    x:\r\n                      {\r\n                        min: 3,\r\n                        max: 25,\r\n                        stepSize: 1,\r\n                      },\r\n                  },\r\n                  plugins: {\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        label: function(tooltipItem, data) {\r\n                            let ret = [];\r\n                            if (tooltipItem.dataset.type != \"line\")\r\n                              ret.push(formatDate2(timesPitchWindspeed[tooltipItem.dataIndex]))\r\n                            ret.push('Wind Speed: ' + round(tooltipItem.raw.x,1) + ' m/s')\r\n                            ret.push('Pitch: ' + round(tooltipItem.raw.y,1))\r\n                            return ret\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                };\r\n\r\n  const optionsGraph2 =  {\r\n                  ...optionsScatter,\r\n                  plugins: {\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        label: function(tooltipItem, data) {\r\n                            let ret = [];\r\n                            ret.push(formatDate2(timesPowerRPM[tooltipItem.dataIndex]));\r\n                            ret.push('RPM: ' + formatNumber(round(tooltipItem.raw.x,1)));\r\n                            ret.push('Power: ' + round(tooltipItem.raw.y,1) + \" KWh\");\r\n                            return ret;\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                };\r\n\r\n  const optionsGraph3 =  {\r\n                  ...options,\r\n                  scales: {\r\n                    yDeviationMean: {\r\n                      type: 'linear',\r\n                      display: true,\r\n                      position: 'left',\r\n                      beginAtZero: false,\r\n                    },\r\n                    yDeviation: {\r\n                      type: 'linear',\r\n                      display: true,\r\n                      position: 'right',\r\n                      grid: {\r\n                        drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n                      },\r\n                    },\r\n                    \r\n                  },\r\n                  plugins: {\r\n                    tooltip: {\r\n                      mode: 'index',\r\n                      callbacks: {\r\n                        title: function(tooltipItem){\r\n                          return 'Wind Speed: ' + tooltipItem[0].label + \" m/s\";\r\n                        },\r\n                        label: function(tooltipItem, data) {\r\n                            return tooltipItem.dataset.label + ': ' + round(tooltipItem.raw,1) + (tooltipItem.dataset.label == '% of Time' ? ' %' : ' °');\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                };\r\n\r\n  const optionsGraph4 =  {\r\n                  ...options,\r\n                  elements: {\r\n                    line: {\r\n                        tension: .4\r\n                    }\r\n                  },\r\n                  plugins: {\r\n                    tooltip: {\r\n                      mode: 'index',\r\n                      callbacks: {\r\n                        label: function(tooltipItem, data) {\r\n                            return tooltipItem.dataset.label + ': ' + round(tooltipItem.raw,1) + \" m/s\";\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                };\r\n\r\n\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"6\">\r\n              <h3 id=\"diagnostics\" className=\"card-title mb-0\">\r\n                Diagnostics\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"6\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n                  <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value);}} custom name=\"generator\" id=\"generator\">\r\n                      {generators.map((oGenerator) => (\r\n                          <option value={oGenerator.id}>\r\n                            {oGenerator.code}\r\n                          </option>\r\n                        ))}</CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value);}} />\r\n                <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData({generator: generator, period: dateRange});}} >Submit</CButton>\r\n            </CCol>\r\n            \r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n         { (loading || dataLoaded) &&\r\n          <div>     \r\n            <CRow>\r\n              <CCol className={'text-right'}>\r\n                <CButton color=\"primary\" style={{marginBottom:'-14px',marginTop:'-6px'}} onClick={() => setShowSideTables(!showSideTables)}>\r\n                    { showSideTables ? 'Hide side tables' : 'Show side tables' }\r\n                </CButton>\r\n              </CCol>\r\n            </CRow>\r\n                    \r\n\r\n            <CRow className=\"mb-4\">\r\n            <CCol sm={showSideTables?\"7\":\"12\"}>\r\n\r\n                <h5 className=\"text-center card-title mb-2\">Wind Speed vs Blade Pitch</h5>\r\n                {!loading || dataLoadError ?\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <div className=\"text-left\" style={{width: '100%'}}>Turbine Average Blade Pitch</div>\r\n                      <Scatter data={graphData} options={optionsGraph1} />\r\n                    <div className=\"text-center\" style={{width: '100%'}}>Turbine Average Wind Speed (m/s)</div>\r\n                  </div>\r\n                : \r\n                  <div className='text-center'>\r\n                    <CSpinner \r\n                      className=\"loading-spinner\"\r\n                      color='#321fdb'\r\n                    />\r\n                  </div>\r\n                }\r\n\r\n              </CCol>\r\n\r\n              <CCol sm=\"5\" hidden={!showSideTables}>\r\n\r\n                <h4 >Data Use</h4>\r\n                {/* <CButton onClick={()=>{setDataUseShowing(!dataUseShowing)}}>Hide</CButton> */}\r\n                <div class=\"mb-4\" style={{textAlign:'right'}}>\r\n                    {dataLoaded || dataLoadError\r\n                      ? <CDataTable\r\n                      items={tableData1}\r\n                      fields={tableFields1}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                      : \r\n                      <ChartLoading/>\r\n                  \r\n                }\r\n                </div>\r\n\r\n                <h4>Reasons for Filtered Data</h4>\r\n                <div style={{textAlign:'right'}}>\r\n                  {dataLoaded || dataLoadError\r\n                      ? \r\n                      <CDataTable\r\n                      items={tableData2}\r\n                      fields={tableFields2}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                    : \r\n                    <ChartLoading/>\r\n                } \r\n                </div>\r\n\r\n\r\n              </CCol>\r\n            </CRow>\r\n\r\n\r\n            <CRow>\r\n              <CCol sm={showSideTables?\"7\":\"12\"}>\r\n\r\n                <h5 className=\"text-center card-title mb-2\"> Generator RPM vs. Power</h5>\r\n                {!loading || dataLoadError ?\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <div className=\"left-center\" style={{width: '100%'}}>Power (KWh)</div>\r\n                      <Scatter data={graphData2} options={optionsGraph2} />\r\n                    <div className=\"text-center\" style={{width: '100%'}}>Turbine Generator Average RPM</div>\r\n                  </div>\r\n                : \r\n                  <div className='text-center'>\r\n                    <CSpinner \r\n                      className=\"loading-spinner\"\r\n                      color='#321fdb'\r\n                    />\r\n                  </div>\r\n                }\r\n\r\n              </CCol>\r\n              <CCol sm=\"5\" hidden={!showSideTables}>\r\n\r\n                <h4>Data Use</h4>\r\n                <div class=\"mb-4\" style={{textAlign:'right'}}>\r\n                    {dataLoaded || dataLoadError\r\n                      ? <CDataTable\r\n                      items={tableData3}\r\n                      fields={tableFields3}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                      : \r\n                      <ChartLoading/>\r\n                  \r\n                }\r\n                </div>\r\n\r\n                <h4>Reasons for Filtered Data</h4>\r\n                <div style={{textAlign:'right'}}>\r\n                  {dataLoaded || dataLoadError\r\n                      ? \r\n                      <CDataTable\r\n                      items={tableData4}\r\n                      fields={tableFields4}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                    : \r\n                    <ChartLoading/>\r\n                } \r\n                </div>\r\n\r\n\r\n              </CCol>\r\n            </CRow>\r\n\r\n            <CRow>\r\n              <CCol sm={showSideTables?\"7\":\"12\"}>\r\n\r\n                <h5 className=\"text-center card-title mb-2\">Average Wind and Nacelle Deviation</h5>\r\n                {!loading || dataLoadError ?\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <div className='d-flex'>\r\n                      <div className=\"text-left\" style={{width: '50%'}}>Average Deviation (Degrees)</div>\r\n                      <div className=\"text-right\" style={{width: '50%'}}>% of Time</div>\r\n                    </div>\r\n                      <Bar \r\n                            data={graphData3}\r\n                            options={optionsGraph3} \r\n                          />\r\n                    <div className=\"text-center\" style={{width: '100%'}}>Average Wind Speed (m/s)</div>\r\n                  </div>\r\n                : \r\n                  <div className='text-center'>\r\n                    <CSpinner \r\n                      className=\"loading-spinner\"\r\n                      color='#321fdb'\r\n                    />\r\n                  </div>\r\n                }\r\n                \r\n\r\n              </CCol>\r\n              <CCol sm=\"5\" hidden={!showSideTables}>\r\n\r\n                <h4>Data Use</h4>\r\n                <div class=\"mb-4\" style={{textAlign:'right'}}>\r\n                    {dataLoaded || dataLoadError\r\n                      ? <CDataTable\r\n                      items={tableData5}\r\n                      fields={tableFields5}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                      : \r\n                      <ChartLoading/>\r\n                  \r\n                }\r\n                </div>\r\n\r\n                <h4>Reasons for Filtered Data</h4>\r\n                <div style={{textAlign:'right'}}>\r\n                  {dataLoaded || dataLoadError\r\n                      ? \r\n                      <CDataTable\r\n                      items={tableData6}\r\n                      fields={tableFields6}\r\n                      striped\r\n                      itemsPerPage={5}\r\n                      pagination\r\n                      scopedSlots = {{\r\n                        'status':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n\r\n                      }}\r\n                    />\r\n                    : \r\n                    <ChartLoading/>\r\n                } \r\n                </div>\r\n\r\n\r\n              </CCol>\r\n            </CRow>\r\n\r\n            <CRow>\r\n              <CCol sm={\"12\"}>\r\n\r\n                <h5 className=\"text-center card-title mb-2\">Wind measurements</h5>\r\n                {!loading || dataLoadError ?\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <div className=\"text-left\" style={{width: '100%'}}>Wind Speed (m/s)</div>\r\n                    <Line \r\n                        data={graphData4}\r\n                        options={optionsGraph4} \r\n                      />\r\n                  </div>\r\n                : \r\n                  <div className='text-center'>\r\n                    <CSpinner \r\n                      className=\"loading-spinner\"\r\n                      color='#321fdb'\r\n                    />\r\n                  </div>\r\n                }\r\n\r\n              </CCol>\r\n            </CRow>\r\n          </div>\r\n         }\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\summary.js",["1116","1117","1118","1119","1120","1121","1122","1123"],"import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round, transparentize} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CSelect,\r\n  CButton,\r\n  CRow,\r\n  CCol,\r\n  CLabel,\r\n  CSpinner,\r\n\r\n} from '@coreui/react'\r\n\r\nimport { Bar, Radar } from 'react-chartjs-2';\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateSummary = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [metMastSelected, setMetMastSelected] = useState(true);\r\n  const [allSelected, setAllSelected] = useState(true);\r\n  const [windSpeedAvgs, setWindSpeedAvgs] = useState([]);\r\n\r\n  const [barChartOneData, setBarChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [barChartTwoData, setBarChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [barChartThreeData, setBarChartThreeData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [barChartFourData, setBarChartFourData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [barChartFiveData, setBarChartFiveData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [windRoseChartData, setWindRoseChartData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n    body.groupBy = groupBy;\r\n    body.generators = selectedGenerators;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        setLoading(false);\r\n\r\n        if (responseData && responseData.graphs) {\r\n\r\n          const labels = responseData.graphs[0].data.map( (x,i) => {\r\n            return x.datetimeFrom.split(' ')[0];\r\n          })\r\n          const graphData1 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData2 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData3 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData4 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData5 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData6 = {\r\n            labels: ['0 North',\r\n                    '45 NorthEast',\r\n                    '90 East',\r\n                    '135 SouthEast',\r\n                    '180 South',\r\n                    '225 SouthWest',\r\n                    '270 West',\r\n                    '315 NorthWest'],\r\n            datasets: []\r\n          };\r\n            \r\n\r\n          if (metMastSelected) {\r\n            const datasetMetMastDefault = {\r\n              label: 'Met Mast Average',\r\n              backgroundColor: '#f32e2e',\r\n            }\r\n            const dataset1MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindSpeed;\r\n                      }),\r\n            }\r\n            const dataset2MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTemperature;\r\n                      }),\r\n            }\r\n            const dataset3MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmAirDensity;\r\n                      }),\r\n            }\r\n            const dataset4MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindDirection;\r\n                      }),\r\n            }\r\n            const dataset5MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTurbulenceIntensity;\r\n                      }),\r\n            }\r\n            const dataset6MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindDirection;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(dataset1MetMast)\r\n            graphData2.datasets.push(dataset2MetMast)\r\n            graphData3.datasets.push(dataset3MetMast)\r\n            graphData4.datasets.push(dataset4MetMast)\r\n            graphData5.datasets.push(dataset5MetMast)\r\n            graphData6.datasets.push(dataset6MetMast)\r\n          }\r\n\r\n          if (allSelected) {\r\n            const datasetAllDefault = {\r\n              label: 'Turbine Average',\r\n              backgroundColor: '#0400ff',\r\n            }\r\n            const dataset1All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindSpeed;\r\n                      }),\r\n            }\r\n            const dataset2All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTemperature;\r\n                      }),\r\n            }\r\n            const dataset4All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindDirection;\r\n                      }),\r\n            }\r\n            const dataset5All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTurbulenceIntensity;\r\n                      }),\r\n            }\r\n            const dataset6All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTurbulenceIntensity;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(dataset1All)\r\n            graphData2.datasets.push(dataset2All)\r\n            graphData4.datasets.push(dataset4All)\r\n            graphData5.datasets.push(dataset5All)\r\n            graphData6.datasets.push(dataset6All)\r\n          }\r\n\r\n\r\n          responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n            const dataset1 = {\r\n              label:  gen,\r\n              backgroundColor: generatorColors[gen],\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genWindSpeed[index];\r\n              })\r\n            };\r\n            const dataset4 = {\r\n              label:  gen,\r\n              backgroundColor: generatorColors[gen],\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genWindDirection[index];\r\n              })\r\n            };\r\n            const dataset5 = {\r\n              label:  gen,\r\n              backgroundColor: generatorColors[gen],\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genTurbulenceIntensity[index];\r\n              })\r\n            };\r\n            const dataset6 = {\r\n                label: gen,\r\n                borderColor: generatorColors[gen],\r\n                backgroundColor: transparentize(generatorColors[gen], 0.5),\r\n                data :responseData.graphs[0].data.map( (x,i) => {\r\n                  return x.genTurbulenceIntensity[index];\r\n                })\r\n            };\r\n            graphData1.datasets.push(dataset1);\r\n            graphData4.datasets.push(dataset4);\r\n            graphData5.datasets.push(dataset5);\r\n            graphData6.datasets.push(dataset6);\r\n          });\r\n\r\n          \r\n\r\n          setBarChartOneData(graphData1);\r\n          setBarChartTwoData(graphData2);\r\n          setBarChartThreeData(graphData3);\r\n          setBarChartFourData(graphData4);\r\n          setBarChartFiveData(graphData5);\r\n          // setWindRoseChartData(graphData6);\r\n        \r\n        }\r\n      });\r\n\r\n\r\n      DataAPI(\r\n        {\r\n        'endpoint': 'wind/windRose',\r\n        'method': 'POST',\r\n        'body': body\r\n      })\r\n        .then(function (responseData) {\r\n  \r\n          if (responseData.error && responseData.error.message) {\r\n            setDataLoadError(true)\r\n            alert(responseData.error.message)\r\n          } \r\n  \r\n          setLoading(false);\r\n  \r\n          if (responseData) {\r\n  \r\n            const graphData = {\r\n              labels: ['0 North',\r\n                      '45 NorthEast',\r\n                      '90 East',\r\n                      '135 SouthEast',\r\n                      '180 South',\r\n                      '225 SouthWest',\r\n                      '270 West',\r\n                      '315 NorthWest'],\r\n              datasets: []\r\n            };\r\n              \r\n  \r\n            if (metMastSelected) {\r\n              const datasetMetMast = {\r\n                label: 'Met Mast Average',\r\n                backgroundColor: '#f32e2e2b',\r\n                borderColor: '#f32e2e',\r\n                pointBackgroundColor: '#f32e2e',\r\n                // pointBorderColor: '#f32e2e',\r\n                borderWidth: .9,\r\n                data: responseData.data.map( (x,i) => {\r\n                          return x.met_mast;\r\n                        }),\r\n              }\r\n              graphData.datasets.push(datasetMetMast)\r\n            }\r\n  \r\n            if (allSelected) {\r\n              const datasetAll = {\r\n                label: 'Turbine Average',\r\n                backgroundColor: '#0400ff2b',\r\n                borderColor: '#0400ff',\r\n                pointBackgroundColor: '#0400ff',\r\n                // pointBorderColor: '#0400ff',\r\n                borderWidth: .9,\r\n                data: responseData.data.map( (x,i) => {\r\n                          return x.total_turbine_avg;\r\n                        }),\r\n              }\r\n              graphData.datasets.push(datasetAll)\r\n            }\r\n  \r\n  \r\n            responseData.data[0].turbine_data.forEach((gen,index) => {\r\n\r\n              const dataset = {\r\n                  label: gen.gen_code,\r\n                  borderColor: generatorColors[gen.gen_code],\r\n                  pointBackgroundColor: generatorColors[gen.gen_code],\r\n                  backgroundColor: transparentize(generatorColors[gen.gen_code], 0.5),\r\n                  borderWidth: .9,\r\n                  data: responseData.data.map( (x,i) => {\r\n                    return x.turbine_data[index].turbine_avg;\r\n                  })\r\n              };\r\n              graphData.datasets.push(dataset);\r\n            })\r\n\r\n            const windSpeedAvgs = [];\r\n            responseData.data.forEach((x,i) => {\r\n              let directionWindSpeedAvg = [];\r\n              x.turbine_data.forEach((gen,i2) => {\r\n                directionWindSpeedAvg[gen.gen_code] = gen.ws_avg;\r\n              });\r\n              directionWindSpeedAvg['Turbine Average'] = x.windspeed_avg;\r\n              directionWindSpeedAvg['Met Mast Average'] = x.mm_windspeed_avg;\r\n              windSpeedAvgs.push(directionWindSpeedAvg);\r\n            });\r\n            // const windSpeedAvgs = responseData.data.map( (x,i) => { \r\n            //   return x.turbine_data.map((gen,i) => {\r\n            //     return {gen.ws_avg}; \r\n            //   }); \r\n            // });\r\n            setWindSpeedAvgs(windSpeedAvgs);\r\n\r\n            setWindRoseChartData(graphData);\r\n          \r\n          }\r\n        });\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected.sort());\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0 || allSelected || metMastSelected) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n  const optionsBarGraph = {\r\n    animation: {duration: loading ? 0 : 1000},\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n    }\r\n  };\r\n  const options1 = {\r\n    ...optionsBarGraph,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' m/s';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const options2 = {\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' °C';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const options3 = {\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,2) + ' kg/m3';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const options4 = {\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + '°';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const options5 = {\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' %';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const optionsWindRoseChart = {\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return [tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' %',\r\n                    \"Average Wind Speed: \" + windSpeedAvgs[tooltipItem.dataIndex][tooltipItem.dataset.label] + ' m/s'];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            \r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Summary\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n            \r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\">Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value);}} />\r\n              {/* <CButton color=\"primary\" disabled={loading} className=\"mr-2 ml-3\" onClick={() => { fetchData({period: dateRange, groupBy: groupBy});}} >Submit</CButton> */}\r\n            </CCol>\r\n\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select turbines:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  <CButton \r\n                    style={{backgroundColor:'#f32e2e',color: 'white'}} \r\n                    className={(metMastSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setMetMastSelected(!metMastSelected)}\r\n                    >\r\n                    Met\r\n                  </CButton>\r\n                  <CButton \r\n                    style={{backgroundColor:'#0400ff',color: 'white'}} \r\n                    className={(allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setAllSelected(!allSelected)}\r\n                    >\r\n                    ALL\r\n                  </CButton>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >Submit</CButton>\r\n            </CCol>\r\n          </CRow>\r\n\r\n          { generatorsSelected ?\r\n\r\n            <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Average Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Bar \r\n                      data={barChartOneData}\r\n                      options={options1} \r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\">Average Temperature</h4>\r\n                    <div>°C</div>\r\n                    <Bar \r\n                      data={barChartTwoData}\r\n                      options={options2} \r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol xs=\"12\">\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Average Air Density</h4>\r\n                    <div>kg/m3</div>\r\n                    <Bar \r\n                      data={barChartThreeData}\r\n                      options={options3} \r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n                \r\n                {/* <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Direction</h4>\r\n                    <div>Degrees</div>\r\n                    <Bar \r\n                      data={barChartFourData}\r\n                      options={options4} \r\n                    />\r\n                  </CCol>\r\n                  <CCol xs=\"12\" className={'mt-4'}>\r\n                    <CCard className={'pl-3 pr-2'} style={{maxWidth: '480px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                      <CCardBody>\r\n                        <CRow>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}>0-45 North to NorthEast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>45-90 NorthEast to East</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 90-135 East to SouthEast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>135-180 SouthEast to South</CLabel>\r\n                          </CCol>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}> 180-225 South to SouthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>225-270 SouthWest to West</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 270-315 West to NorthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 315-360 NorthWest to North</CLabel>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </CCol>\r\n                </CRow> */}\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Rose</h4>\r\n                    <div>%</div>\r\n                    <div style={{maxWidth:'900px',margin:'0 auto'}}>\r\n                      <Radar \r\n                        data={windRoseChartData}\r\n                        options={optionsWindRoseChart} \r\n                      />\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" className={'mt-4'}>\r\n                    <CCard className={'pl-3 pr-2'} style={{maxWidth: '540px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                      <CCardBody>\r\n                        <CRow>\r\n                          <CCol xs=\"12\">\r\n                            <h5 className={'mb-3 text-center'} >Range of degrees included in each Wind Sector</h5>\r\n                          </CCol>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}>North (0) includes 337.5-22.4 </CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>NorthEast (45) includes 22.5-67.4</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>East (90) includes 67.5-112.4 </CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>SouthEast (135) includes 112.5-157.4</CLabel>\r\n                          </CCol>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}>South (180) includes 157.5-202.4 </CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>SouthWest (225) includes 202.5-247.4</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>West (270) includes 247.5-292.4 </CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>NorthWest (315) includes 292.5-337.4</CLabel>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Turbulence Intensity</h4>\r\n                    <div>%</div>\r\n                    <Bar \r\n                      data={barChartFiveData}\r\n                      options={options5} \r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateSummary\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\trends.js",["1124","1125","1126","1127","1128","1129","1130","1131","1132"],"import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateTrends = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('hour');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [metMastSelected, setMetMastSelected] = useState(true);\r\n  const [allSelected, setAllSelected] = useState(true);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartThreeData, setLineChartThreeData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartFourData, setLineChartFourData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n\r\n  const fetchData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    body.generators = selectedGenerators;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        setLoading(false);\r\n\r\n        if (responseData && responseData.graphs) {\r\n\r\n          const labels = responseData.graphs[0].data.map( (x,i) => {\r\n            return x.datetimeFrom;\r\n          })\r\n          const graphData1 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData2 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData3 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData4 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n\r\n\r\n          if (metMastSelected) {\r\n            const datasetMetMastDefault = {\r\n              label: 'Met Mast',\r\n              borderColor: '#f32e2e',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            }\r\n            const dataset1MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindSpeed;\r\n                      }),\r\n            }\r\n            const dataset2MetMast1 = {\r\n              ...datasetMetMastDefault,\r\n              label: 'Met Mast Temperature',\r\n              yAxisID: 'yTemperature',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTemperature;\r\n                      }),\r\n            }\r\n            const dataset2MetMast2 = {\r\n              ...datasetMetMastDefault,\r\n              label: 'Met Mast Air Density',\r\n              borderColor: '#0874d3',\r\n              yAxisID: 'yAirDensity',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmAirDensity;\r\n                      }),\r\n            }\r\n            const dataset3MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindDirection;\r\n                      }),\r\n            }\r\n            const dataset4MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTurbulenceIntensity;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(dataset1MetMast)\r\n            graphData2.datasets.push(dataset2MetMast1)\r\n            graphData2.datasets.push(dataset2MetMast2)\r\n            graphData3.datasets.push(dataset3MetMast)\r\n            graphData4.datasets.push(dataset4MetMast)\r\n          }\r\n\r\n          if (allSelected) {\r\n            const datasetAllDefault = {\r\n              label: 'Turbine Average',\r\n              borderColor: '#0400ff',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            }\r\n            const dataset1All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindSpeed;\r\n                      }),\r\n            }\r\n            const dataset2All1 = {\r\n              ...datasetAllDefault,\r\n              label: 'Turbine Average Temperature',\r\n              yAxisID: 'yTemperature',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTemperature;\r\n                      }),\r\n            }\r\n            const dataset3All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindDirection;\r\n                      }),\r\n            }\r\n            const dataset4All = {\r\n              ...datasetAllDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTurbulenceIntensity;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(dataset1All)\r\n            graphData2.datasets.push(dataset2All1)\r\n            graphData3.datasets.push(dataset3All)\r\n            graphData4.datasets.push(dataset4All)\r\n          }\r\n\r\n\r\n          responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n            const datasetDefault = {\r\n              label:  gen,\r\n              borderColor: generatorColors[gen],\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            };\r\n            const dataset1 = {\r\n              ...datasetDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genWindSpeed[index];\r\n              })\r\n            };\r\n            const dataset3 = {\r\n              ...datasetDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genWindDirection[index];\r\n              })\r\n            };\r\n            const dataset4 = {\r\n              ...datasetDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                return x.genTurbulenceIntensity[index];\r\n              })\r\n            };\r\n            graphData1.datasets.push(dataset1);\r\n            graphData3.datasets.push(dataset3);\r\n            graphData4.datasets.push(dataset4);\r\n          });\r\n\r\n          setLineChartOneData(graphData1)\r\n          setLineChartTwoData(graphData2)\r\n          setLineChartThreeData(graphData3)\r\n          setLineChartFourData(graphData4)\r\n\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected.sort());\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const options =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n  }\r\n\r\n  const options1 = {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' m/s';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const options2 =  {\r\n    ...options,\r\n    stacked: false,\r\n    scales: {\r\n      yTemperature: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n      },\r\n      yAirDensity: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            let unit = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? ' kg/m3' : ' °C'\r\n            let decimals = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? 2 : 1\r\n            let label = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? 'Air Density: ' : 'Temperature: '\r\n            return label + round(tooltipItem.raw,decimals) + unit;\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  const options3 = {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + '°';\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      y: {\r\n          max: 360,\r\n          ticks: {\r\n              stepSize: 45,\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  const options4 = {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' %';\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Trends\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select turbines:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  <CButton \r\n                    style={{backgroundColor:'#f32e2e',color: 'white'}} \r\n                    className={(metMastSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setMetMastSelected(!metMastSelected)}\r\n                    >\r\n                    Met\r\n                  </CButton>\r\n                  <CButton \r\n                    style={{backgroundColor:'#0400ff',color: 'white'}} \r\n                    className={(allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setAllSelected(!allSelected)}\r\n                    >\r\n                    ALL\r\n                  </CButton>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >Submit</CButton>\r\n            </CCol>\r\n        </CRow>\r\n\r\n        { generatorsSelected ?\r\n\r\n          <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options1}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\">Temperature and Air Density</h4>\r\n                    <div className='d-flex'>\r\n                      <div className=\"text-left\" style={{width: '50%'}}>°C</div>\r\n                      <div className=\"text-right\" style={{width: '50%'}}>kg/m3</div>\r\n                    </div>\r\n                    <Line \r\n                      data={lineChartTwoData}\r\n                      options={options2} />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-3'}>\r\n                  <CCol xs=\"12\">\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Direction</h4>\r\n                    <div>Degrees</div>\r\n                    <Line\r\n                      data={lineChartThreeData}\r\n                      options={options3}\r\n                    />\r\n                  </CCol>\r\n                  <CCol xs=\"12\" className={'mt-4'}>\r\n                    <CCard className={'pl-3 pr-2'} style={{maxWidth: '480px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                      <CCardBody>\r\n                        <CRow>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}>0-45 North to Northeast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>45-90 NorthEast to East</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 90-135 East to SouthEast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>135-180 SouthEast to South</CLabel>\r\n                          </CCol>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}> 180-225 South to SouthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>225-270 SouthWest to West</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 270-315 West to NorthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 315-360 NorthWest to North</CLabel>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </CCardBody>\r\n                    </CCard>\r\n                    \r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Turbulence Intensity</h4>\r\n                    <div>%</div>\r\n                    <Line\r\n                      data={lineChartFourData}\r\n                      options={options4}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateTrends\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\climate\\forecast.js",["1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {round} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\nimport moment from 'moment-timezone';\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart,\r\n  Plugin\r\n} from 'chart.js';\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport arrow from '../../../../assets/arrow.png'\r\n\r\n\r\nconst ClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [arrowImage, setArrowImage] = useState(null)\r\n  const [datetimes, _setDatetimes] = useState([])\r\n  const datetimesRef = useRef(datetimes);\r\n  const setDatetimes = datetimes => {\r\n    datetimesRef.current = datetimes;\r\n    _setDatetimes(datetimes);\r\n  };\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    var arrowImage = new Image(22,22);\r\n    arrowImage.src = arrow\r\n    arrowImage.onload = function() {\r\n      setArrowImage(this);\r\n    }\r\n\r\n    DataAPI({\r\n      'endpoint': 'weather',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n\r\n          // if (response.error.message) {\r\n          //   return(alert(response.error.message))\r\n          // } else {\r\n          //   return(alert(response.error)) \r\n          // }\r\n        }\r\n\r\n        const graphData = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n\r\n        const responseData = response.data;\r\n\r\n        graphData.labels = responseData.map( (x,i) => {\r\n          const windDirection = x.values.find(y => y.name == \"TYPE_WEATHER_WIND_DIRECTION_100\");\r\n          return windDirection ? windDirection.value : 400;\r\n        })\r\n\r\n  \r\n        const dataset = {\r\n          label:  'Wind speed',\r\n          borderColor: '#ff764a',\r\n          pointBackgroundColor: '#ef5675',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          // data: response.hours.filter( (x,i) => (i%6==0) ).map( (x,i) => {\r\n          //   return x.windSpeed100m.sg;\r\n          // })\r\n          data: responseData.map( (x,i) => {\r\n            const windSpeed = x.values.find(y => y.name == \"TYPE_WEATHER_WIND_SPEED_100\");\r\n            return windSpeed ? windSpeed.value : 0;\r\n          })\r\n        }\r\n        graphData.datasets.push(dataset)\r\n  \r\n        const datetimes = []\r\n        responseData.forEach( (x,i) => {\r\n          datetimes.push(x.time);\r\n        })\r\n        setDatetimes(datetimes)\r\n        \r\n        setLineChartOneData(graphData)\r\n\r\n        setLoading(false)\r\n\r\n      })\r\n\r\n  }\r\n\r\n  const plugins = [{\r\n    afterDraw: (chart) => {\r\n      let ctx = chart.ctx;\r\n      var xAxis = chart.scales['x'];\r\n      var yAxis = chart.scales['y'];\r\n      xAxis.ticks.forEach((value, index) => {\r\n        \r\n        // if (index%2==0) {\r\n          var x = xAxis.getPixelForTick(index);\r\n\r\n          const datetime = datetimesRef.current[index].split(' ')\r\n          let date = datetime[0].split('-')\r\n          date = date[2] + \"-\" + date[1]\r\n          let time = datetime[1].split(':')\r\n          if (time[0] == '00' || time[0] == '06' || time[0] == '12' || time[0] == '18' ) {\r\n\r\n            if (value.label != 400) {\r\n              var deg = value.label;\r\n              var newImageCanvas = document.createElement('canvas');\r\n              newImageCanvas.width  = 22;\r\n              newImageCanvas.height = 22;\r\n              var newCtx = newImageCanvas.getContext('2d') ;\r\n              newCtx.save();\r\n              newCtx.translate(newImageCanvas.width/2,newImageCanvas.height/2);\r\n              newCtx.rotate((deg+90)*0.01745);\r\n              newCtx.translate(-newImageCanvas.width * 0.5, -newImageCanvas.height * 0.5);  \r\n              newCtx.drawImage(arrowImage, 0,0);\r\n              newCtx.restore();\r\n              ctx.drawImage(newImageCanvas, x - 10, yAxis.bottom + 12, arrowImage.width, arrowImage.height)\r\n            }\r\n\r\n            time = time[0] + \":\" + time[1]\r\n            ctx.font = \"9px Arial\"\r\n            ctx.fillText(date, x - 12, yAxis.bottom + 44)\r\n            ctx.fillText(time, x - 12, yAxis.bottom + 56)\r\n          }\r\n          \r\n        // }\r\n      });\r\n      ctx.font = \"12px Arial\";\r\n      // ctx.fillText(\"Direction\", 0, yAxis.bottom + 49);\r\n    }\r\n  }]\r\n\r\n\r\n  const options =  {\r\n    type: 'line',\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            bottom: 80,\r\n            left: 20,\r\n            right: 20\r\n        }\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n            display: false\r\n        }\r\n      },\r\n      y: {\r\n        min: 0,\r\n        beginAtZero: true\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(tooltipItem){\r\n            return '';\r\n          },\r\n          label: function(tooltipItem) {\r\n            const datetime = datetimesRef.current[tooltipItem.dataIndex].split(' ')\r\n            let date = datetime[0].split('-')\r\n            date = date[2] + \"-\" + date[1]\r\n            let time = datetime[1].split(':')\r\n            time = time[0] + \":\" + time[1]\r\n            return [\"Date: \"+date+\" \"+time,\"Wind Speed: \"+round(tooltipItem.raw,1) + ' m/s']\r\n          }\r\n        }\r\n      },\r\n      // legend: {\r\n      //   display: false\r\n      // },\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Forecast</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Previous Week</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateForecast\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\data-availability\\data-availability.js",["1152","1153","1154","1155","1156","1157","1158"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CSelect,\r\n  CSpinner,\r\n  CButton\r\n} from '@coreui/react'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {formatDate, DateFilter, getDateLabel, round} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\n// const getBadge = status => {\r\n//   switch (status) {\r\n//     case '1': return 'success'\r\n//     case '0': return 'danger'\r\n//     default: return 'success'\r\n//   }\r\n// }\r\n\r\nconst fields = [\r\n  'from',\r\n  'to',\r\n  'turbineData',\r\n  {key:'metMastWindSpeed', label:'Wind Speed'},\r\n  {key:'matMastTemperature', label:'Temperature'},\r\n  {key:'metMastWindDirection', label:'Wind Direction'},\r\n  {key:'metMastPressure', label:'Pressure'},\r\n  {key:'metMastHumidity', label:'Humidity'},\r\n  {key:'gridCurtailmentStatus', label:'Curtailment Status'},\r\n]\r\n\r\n\r\n\r\n\r\nconst Charts = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  \r\n  const [period, setPeriod] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n   const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (generator && generator !== '0') body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/dataAvailability',\r\n      'body': body,\r\n      'method': 'POST'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n\r\n          const tableData = [];\r\n        if (response && response.data){\r\n\r\n          // response.data.table.forEach(\r\n          //   row => {\r\n          //     tableData.push({\r\n          //       from: formatDate(row.from),\r\n          //       to: formatDate(row.to),\r\n          //       metMastWindDirection: round(row.metMast.direction)+'%',\r\n          //       metMastWindSpeed: round(row.metMast.speed)+'%',\r\n          //       temperature: round(row.metMast.temperature)+'%',\r\n          //       turbineAlarmCode: round(row.turbineState.alarm)+'%',\r\n          //       turbineStatus: round(row.turbineState.state)+'%',\r\n          //       turbineWindDirection: round(row.windAverages.direction)+'%',\r\n          //       turbineWindPower: round(row.windAverages.powerAverage)+'%',\r\n          //       turbineWindSpeed: round(row.windAverages.speed)+'%',\r\n          //     })\r\n          //   }\r\n          // );\r\n          response.data.table.forEach(\r\n            row => {\r\n              tableData.push({\r\n                from: formatDate(row.from),\r\n                to: formatDate(row.to),\r\n                turbineData: round(row.total.turbineData)+'%',\r\n                metMastWindDirection: round(row.metMast.direction)+'%',\r\n                metMastWindSpeed: round(row.metMast.speed)+'%',\r\n                matMastTemperature: round(row.metMast.temperature)+'%',\r\n                metMastPressure: round(row.metMast.pressure)+'%',\r\n                metMastHumidity: round(row.metMast.humidity)+'%',\r\n                gridCurtailmentStatus: row.turbineState.state+'%',\r\n              })\r\n            }\r\n          );\r\n\r\n          setTableData(tableData);\r\n          setDataLoaded(true);\r\n        }\r\n      }\r\n    ).catch(\r\n      e => {\r\n        setLoading(false);\r\n        alert(e);\r\n\r\n      }\r\n    );\r\n\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n   const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null)\r\n            setGenerators(response.generators);\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  return (\r\n\r\n      <CRow>\r\n        <CCol xs=\"12\" lg=\"12\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"3\">\r\n                  <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                    Data Availability\r\n                  </h3>\r\n                  <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n                  </CCol>\r\n                \r\n                <CCol sm=\"9\" className=\"text-right d-flex px-2 flex-center flex-justify-end\">\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4}}>Turbine</h6>\r\n                  <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                    <option value=\"0\">All turbines</option>\r\n                  {generators.map((oGenerator) => (\r\n                                      <option value={oGenerator.id}>\r\n                                        {oGenerator.code}\r\n                                      </option>\r\n                                    ))}</CSelect>\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4,minWidth:'58px'}}>Group by</h6>\r\n                  <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\">Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                  </CSelect>\r\n\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                  <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value);}} />\r\n                  <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n\r\n            <CCardBody>\r\n             { (loading || dataLoaded) &&\r\n              <div style={{textAlign: 'right'}}>\r\n                { dataLoaded || dataLoadError\r\n                      ? \r\n                    <CDataTable\r\n                      items={tableData}\r\n                      fields={fields}\r\n                      striped\r\n                      itemsPerPage={50}\r\n                      pagination\r\n                      theadTopSlot={[\r\n                            <th colSpan={2}></th>,\r\n                            <th colSpan={1} className={'text-center border-left border-right'}>Turbine</th>,\r\n                            <th colSpan={5} className={'text-center border-left border-right'}>MetMast</th>,\r\n                            <th colSpan={1} className={'text-center border-left border-right'}>Grid</th>\r\n                          \r\n                      ]}\r\n                      // scopedSlots = {{\r\n                      //   'gridCurtailmentStatus':\r\n                      //     (item)=>(\r\n                      //       <td>\r\n                      //         <CBadge color={getBadge(item.gridCurtailmentStatus)}>\r\n                      //           {item.gridCurtailmentStatus}\r\n                      //         </CBadge>\r\n                      //       </td>\r\n                      //     )\r\n\r\n                      // }}\r\n                    />\r\n                    : \r\n                    <ChartLoading/>\r\n              }\r\n              </div>\r\n            }\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\alarms\\alarms.js",["1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CSelect,\r\n  CButton,\r\n  CDataTable\r\n} from '@coreui/react'\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\nimport {DateFilter, round, formatDate, formatDate2, getDateLabel} from '../../../../helpers/utils.js'\r\n\r\n// const fields = [\r\n//   'from',\r\n//   'to',\r\n//   'firstAlarm',\r\n//   'firstAlarmDescription'\r\n// ];\r\n\r\nconst fieldsAlarmsByGenerator = [\r\n  {\r\n    key: \"alarm\",\r\n    label: \"\"\r\n  },\r\n  {\r\n    key: \"generator\",\r\n    label: \"\"\r\n  },\r\n  {\r\n    key: \"tag\",\r\n    label: \"\"\r\n  }\r\n  ];\r\n\r\n\r\nconst Alarms = () => {\r\n\r\n  const [period, setPeriod] = useState('cm');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(0);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [scopedSlots, setScopedSlots] = useState([]);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [fieldsAlarmsByGenerator, setFieldsAlarmsByGenerator] = useState(null);\r\n  \r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n  \r\n  const fetchData = () => {\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (generator && generator !== '0') body.generators = [generator];\r\n    \r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    setLoading(true);\r\n\r\n\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/alarms_v2',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      setDataLoaded(true);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      const data = {\r\n        labels: [],\r\n        datasets: []\r\n      }\r\n\r\n      const data2 = {\r\n        labels: [],\r\n        datasets: []\r\n      }\r\n\r\n      responseData.data.forEach((rD,index) => {\r\n        const rDfrom = rD.from.split(' ')[0]//formatDate(rD.from);\r\n        const rDto = rD.to.split(' ')[0]//formatDate(rD.to);\r\n        const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n        data.labels.push(label);\r\n        data2.labels.push(label);\r\n\r\n      });\r\n\r\n      const alarmKeys = []\r\n      const alarmDescriptions = []\r\n      \r\n      responseData.data.forEach((dK,index) => {\r\n        dK.alarms.forEach((a,index2) => {\r\n          if (!alarmKeys.includes(a.code)) {\r\n            alarmKeys.push(a.code)\r\n            alarmDescriptions[a.code] = a.description\r\n          }\r\n        })\r\n      })\r\n\r\n      alarmKeys.sort(function (a, b) {\r\n        return a.localeCompare(b); \r\n      });\r\n\r\n      alarmKeys.forEach((dK,index) => {\r\n        let color = colors[index%colors.length];\r\n        if (dK == 'Missing') color = \"#d9d9d9\"\r\n        else if (dK == 'Other') color = \"#7c7c7c\"\r\n        if (dK != 'Ok') {\r\n          const dataset = {\r\n            label:  ((dK != 'Missing' && dK != 'Other') ? round(dK,0) + \" - \" : \"\" ) + alarmDescriptions[dK],\r\n            backgroundColor: color,\r\n            data: []\r\n          };\r\n          responseData.data.forEach((rD,index2) => {\r\n            let hours = 0\r\n            rD.alarms.forEach((rA,index3) => {\r\n              if (dK == rA.code)\r\n                hours = rA.hours\r\n            })\r\n            dataset.data.push(hours)\r\n\r\n          });\r\n          data.datasets.push(dataset);\r\n        }\r\n      });\r\n\r\n      setGraphData(data);\r\n\r\n\r\n\r\n      generators.forEach((gen,index) => {\r\n\r\n        if (generator==0 || generator==gen.id) {\r\n\r\n          const dataset2 = {\r\n            label:  gen.code,\r\n            backgroundColor: colors[index%colors.length],\r\n            data: []\r\n          };\r\n\r\n          responseData.data.forEach((rD,index2) => {\r\n            let hours = 0\r\n            rD.alarms.forEach((rA,index3) => {\r\n              if (rA.code != \"Ok\")\r\n                rA.generators.forEach((rG,index4) => {\r\n                  if (rG.id == gen.id)\r\n                    hours += rG.hours\r\n                });\r\n            });\r\n            dataset2.data.push(hours);\r\n          });\r\n\r\n          data2.datasets.push(dataset2);\r\n\r\n        }\r\n\r\n      });\r\n\r\n      setGraphData2(data2);\r\n\r\n\r\n\r\n\r\n      const tableData = [];\r\n\r\n      const fieldsAlarmsByGenerator = [{\r\n        key: \"alarm\",\r\n        label: \"Alarm Code\"\r\n      },\r\n      {\r\n        key: \"generator\",\r\n        label: \"Turbine\"\r\n      },\r\n      {\r\n        key: \"tag\",\r\n        label: \"Events and Duration (hours)\",\r\n        _style: { minWidth: '100px'}\r\n      }]\r\n      responseData.data.forEach((rD,index) => {\r\n        const rDfrom = rD.from.split(' ')[0]//formatDate(rD.from);\r\n        const rDto = rD.to.split(' ')[0]//formatDate(rD.to);\r\n        const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n        fieldsAlarmsByGenerator.push(\r\n          {\r\n            key: \"period-\"+index,\r\n            label: label\r\n          }\r\n        )\r\n\r\n      })\r\n\r\n      const scopedSlots = []\r\n      scopedSlots[\"alarm\"] = (item)=>(\r\n        <td>\r\n          <div style={{fontWeight: 'bold'}}>\r\n            {item.alarm}\r\n          </div>\r\n        </td>\r\n      )\r\n      scopedSlots[\"generator\"] = (item)=>(\r\n        <td>\r\n          <div style={{fontWeight: 'bold'}}>\r\n            {item.generator}\r\n          </div>\r\n        </td>\r\n      )\r\n\r\n      alarmKeys.forEach((alarm,index) => {\r\n        let alarmFirstLine = true\r\n        generators.forEach((gen,index2) => {\r\n          const rowEvents = {\r\n            alarm: '',\r\n            generator: gen.code,\r\n            tag: \"Events\",\r\n          }\r\n          const rowDuration = {\r\n            alarm: '',\r\n            generator: '',\r\n            tag: \"Duration\",\r\n          }\r\n          let hasAlarm = false\r\n          \r\n          responseData.data.forEach((rD,index3) => {\r\n            let occurrences = 0\r\n            let hours = 0\r\n            rD.alarms.forEach((rA,index4) => {\r\n              if (rA.code != \"Ok\") {\r\n                rA.generators.forEach((rG,index5) => {\r\n                  if (rA.code == alarm && rG.id == gen.id) {\r\n                    occurrences = rG.occurrences\r\n                    hours = round(rG.hours,1)\r\n                    hasAlarm = true\r\n                    \r\n                  }\r\n                });\r\n              }\r\n            })\r\n\r\n            scopedSlots[\"period-\"+index3] = (item)=>(\r\n              <td>\r\n                <div className={\"table-item-circle\"} style={\r\n                  item[\"period-\"+index3] >= 20 ?\r\n                    {backgroundColor: \"#ff8484\"}\r\n                  :\r\n                    item[\"period-\"+index3] >= 10 ?\r\n                      {backgroundColor: \"#ffc251\"}\r\n                    :\r\n                      item[\"period-\"+index3] >= 5 ?\r\n                        {backgroundColor: \"#ffff83\"}\r\n                      :\r\n                        {backgroundColor: \"transparent\"}\r\n                  }>\r\n                  {item[\"period-\"+index3]}\r\n                </div>\r\n              </td>\r\n            )\r\n            \r\n            rowEvents[\"period-\"+index3] = occurrences\r\n            rowDuration[\"period-\"+index3] = hours\r\n           \r\n          })\r\n          if(hasAlarm) {\r\n            if (alarmFirstLine) {\r\n              rowEvents['alarm'] = alarm\r\n              alarmFirstLine = false\r\n            }\r\n            tableData.push(rowEvents)\r\n            tableData.push(rowDuration)\r\n          }\r\n        })\r\n      })\r\n\r\n      setFieldsAlarmsByGenerator(fieldsAlarmsByGenerator)\r\n      setTableData(tableData)\r\n\r\n      setScopedSlots(scopedSlots)\r\n\r\n\r\n\r\n    }).catch(\r\n      e => {\r\n        setLoading(false);\r\n        alert(e);\r\n      }\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // DataAPI(\r\n    //   {\r\n    //   'endpoint': 'chart/alarms',\r\n    //   'body': body\r\n    // }).then(function (responseData) {\r\n\r\n    //   setLoading(false);\r\n    //   setDataLoaded(true);\r\n    //   if (responseData.error) {\r\n    //     setDataLoadError(true);\r\n    //       if (responseData.error.message) {\r\n    //       return(alert(responseData.error.message))\r\n    //       } else {\r\n    //       return(alert(responseData.error)) \r\n    //       }\r\n    //   }\r\n\r\n    //   const data = {\r\n    //     labels: [],\r\n    //     datasets: []\r\n    //   }\r\n\r\n    //   responseData.data.forEach((rD,index) => {\r\n    //     const rDfrom = formatDate(rD.from);\r\n    //     const rDto = formatDate(rD.to);\r\n    //     const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n    //     data.labels.push(label);\r\n    //   });\r\n\r\n    //   responseData.dataKeys.forEach((dK,index) => {\r\n    //     let color = colors[index%colors.length];\r\n    //     if (dK == 'missing') color = \"#d9d9d9\"\r\n    //     else if (dK == 'other') color = \"#7c7c7c\"\r\n    //     if (dK != 'total' && dK != 'turbineOK') {\r\n    //       const dataset = {\r\n    //         label:  ((dK != 'missing' && dK != 'other') ? round(dK,0) + \" - \" : \"\" ) + responseData.dataKeysDescription[index],\r\n    //         backgroundColor: color,\r\n    //         data: []\r\n    //       };\r\n    //       responseData.data.forEach((rD,index2) => {\r\n    //         rD.alarms.forEach((alarm,index3) => {\r\n    //           if (index == index3) {\r\n    //             dataset.data.push(alarm);\r\n    //           }\r\n    //         });\r\n    //       });\r\n    //       data.datasets.push(dataset);\r\n    //     }\r\n    //   });\r\n\r\n    //   setGraphData(data);\r\n\r\n\r\n\r\n    //   //First alarms table\r\n    //   const tableData = [];\r\n    //   responseData.data.forEach(\r\n    //     row => {\r\n    //       tableData.push({\r\n    //         from: formatDate(row.from),\r\n    //         to: formatDate(row.to),\r\n    //         firstAlarm: round(row.firstAlarm),\r\n    //         firstAlarmDescription: round(row.firstAlarmDescription)\r\n    //       })\r\n    //     }\r\n    //   );\r\n\r\n    //   setTableData(tableData);\r\n\r\n    // }).catch(\r\n    //   e => {\r\n    //     setLoading(false);\r\n    //     alert(e);\r\n    //   }\r\n    // );\r\n  \r\n\r\n\r\n\r\n\r\n  //     responseData.data.forEach((rD,index) => {\r\n  //       const rDfrom = formatDate(rD.from);\r\n  //       const rDto = formatDate(rD.to);\r\n  //       const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n  //       data.labels.push(label);\r\n\r\n  //     });\r\n\r\n  //     responseData.chart.ids.forEach((gen,index) => {\r\n\r\n  //       const dataset = {\r\n  //         label:  gen,\r\n  //         backgroundColor: colors[index%colors.length],\r\n  //         data: []\r\n  //       };\r\n\r\n  //       responseData.data.forEach((rD,index2) => {\r\n  //         let hours = 0\r\n  //         rD.alarms.forEach((rA,index3) => {\r\n  //           rA.alarm.generators.forEach((rG,index4) => {\r\n  //             if (rG.generator.id == gen)\r\n  //               hours += rG.generator.hours\r\n  //           });\r\n  //         });\r\n  //         dataset.data.push(hours);\r\n  //       });\r\n\r\n  //       data.datasets.push(dataset);\r\n\r\n  //     });\r\n\r\n  //     setGraphData2(data);\r\n\r\n\r\n\r\n\r\n\r\n    \r\n  //   DataAPI(\r\n  //     {\r\n  //     'endpoint': 'chart/alarmsGenerator',\r\n  //     'body': body\r\n  //   }).then(function (responseData) {\r\n\r\n  //     setLoading(false);\r\n  //     if (responseData.error) {\r\n  //       setDataLoadError(true);\r\n  //         if (responseData.error.message) {\r\n  //         return(alert(responseData.error.message))\r\n  //         } else {\r\n  //         return(alert(responseData.error)) \r\n  //         }\r\n  //     }\r\n\r\n  //     const data = {\r\n  //       labels: [],\r\n  //       datasets: []\r\n  //     }\r\n\r\n  //     responseData.data.forEach((rD,index) => {\r\n  //       const rDfrom = formatDate(rD.from);\r\n  //       const rDto = formatDate(rD.to);\r\n  //       const label = (groupBy == \"day\") ? `${rDfrom}` : `${rDfrom} - ${rDto}`\r\n  //       data.labels.push(label);\r\n  //     });\r\n\r\n  //     responseData.dataKeys.forEach((dK,index) => {\r\n  //       if (dK != 'total' && dK != 'turbineOK') {\r\n  //         const dataset = {\r\n  //           label: responseData.dataKeysCode[index],\r\n  //           backgroundColor: colors[index%colors.length],\r\n  //           data: []\r\n  //         };\r\n  //         responseData.data.forEach((rD,index2) => {\r\n  //           rD.alarms.forEach((alarm,index3) => {\r\n  //             if (index == index3) {\r\n  //               dataset.data.push(alarm);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //         data.datasets.push(dataset);\r\n  //       }\r\n  //     });\r\n\r\n  //     setGraphData2(data);\r\n\r\n  //   });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response && !response.error) {\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n          }\r\n          setGeneratorsLoaded(true)\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  const optionsStackedBar = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        stacked: true,\r\n      },\r\n      y: {\r\n        stacked: true,\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' hours';\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"3\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Alarms\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            \r\n            <CCol sm=\"9\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                <h6 className=\"mr-2 ml-4 mb-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n                <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                  <option value=\"0\">All turbines</option>\r\n                {generators.map((oGenerator) => (\r\n                                    <option value={oGenerator.id}>\r\n                                      {oGenerator.code}\r\n                                    </option>\r\n                                  ))}</CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\" selected>Day</option>\r\n                    <option value=\"week\">Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value);}} />\r\n              <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData()}} >Submit</CButton>\r\n            </CCol>\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        <CCardBody>\r\n\r\n         { (loading || dataLoaded) &&\r\n            \r\n          <div>\r\n            <div style={{marginBottom:'50px'}}>\r\n              <h4 className=\"pb-2 mb-4 border-bottom\" >Alarms by alarm code</h4>\r\n              { (dataLoaded || dataLoadError) ?\r\n              <div>\r\n                <div class=\"ml-2\">hours</div>\r\n                <Bar options={optionsStackedBar} data={graphData} />\r\n                <CRow className=\"text-center d-block\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n              </div>\r\n              :\r\n                <div className='text-center'>\r\n                  <CSpinner className=\"loading-spinner\" color='#321fdb'/>\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            {/* <div style={{marginBottom:'50px'}}>\r\n              <h4 className=\"pb-2 mb-4 border-bottom\" >First Alarms</h4>\r\n              <CDataTable\r\n                  items={tableData}\r\n                  fields={fields}\r\n                  striped\r\n                  itemsPerPage={50}\r\n                  pagination\r\n                />\r\n            </div> */}\r\n\r\n            <div style={{marginBottom:'50px'}}>\r\n              <h4 className=\"pb-2 mb-4 border-bottom\" >Alarms by generator</h4>\r\n              { (dataLoaded || dataLoadError) ?\r\n              <div>\r\n                <div class=\"ml-2\">hours</div>\r\n                <Bar options={optionsStackedBar} data={graphData2} />\r\n                <CRow className=\"text-center d-block\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                <div className=\"mt-5\">\r\n                  <CDataTable\r\n                    items={tableData}\r\n                    fields={fieldsAlarmsByGenerator}\r\n                    striped\r\n                    itemsPerPage={200}\r\n                    pagination\r\n                    scopedSlots = {scopedSlots}\r\n                  />\r\n                </div>\r\n              </div>\r\n              :\r\n              <div className='text-center'>\r\n                <CSpinner className=\"loading-spinner\" color='#321fdb'/>\r\n              </div>\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n\r\n          </div>\r\n          }\r\n        </CCardBody>\r\n        \r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Alarms\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\curtailments\\curtailments.js",["1179","1180","1181"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CSelect,\r\n  CButton\r\n} from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n} from '@coreui/react-chartjs'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\n\r\nimport {DateFilter, getDateLabel, formatDate} from '../../../../helpers/utils.js'\r\nimport {getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nconst Charts = () => {\r\n\r\n  const [period, setPeriod] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  useEffect(() => {\r\n      \r\n\r\n  }, []);\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/curtailments',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n\r\n      setLoading(false);\r\n\r\n      if (responseData.error) {\r\n           if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n           } else {\r\n            return(alert(responseData.error)) \r\n           }\r\n        }\r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n        responseData.dataSet.forEach((rDs) => {\r\n          const datasets = {\r\n            label: rDs.label,\r\n            backgroundColor: rDs.id === 1 ? '#f87979' : '#0400ff',\r\n            data: []\r\n          };\r\n          responseData.data.forEach((rD) => {\r\n            const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n            const value = (Math.round(dsData.value * 100) / 100).toFixed(2);\r\n            datasets.data.push(value);\r\n          });\r\n          data.datasets.push(datasets);\r\n        });\r\n\r\n        responseData.data.forEach((rD) => {\r\n          const rDfrom = rD.from;\r\n          const rDto = rD.to;\r\n          // data.labels.push(rDfrom.replace(\" 00:00:00\", \"\") + ' / ' + rDto.replace(\" 00:00:00\", \"\"));\r\n          const label = (groupBy == \"day\") ? `${formatDate(rDfrom)}` : `${formatDate(rDfrom)} - ${formatDate(rDto)}`\r\n          data.labels.push(label);\r\n\r\n        });\r\n        setGraphData(data)\r\n        setDataLoaded(true)\r\n      });\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"6\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Curtailments\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n              </CCol>\r\n            \r\n              <CCol sm=\"6\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupBy\" id=\"groupBy\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\" selected>Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value); }} />\r\n                <CButton color=\"primary\" disabled={loading} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n            </CCol>\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n      <CCardBody>\r\n       { (loading || dataLoaded) &&\r\n        <div>\r\n          MWh\r\n          <CChartBar\r\n            datasets={graphData.datasets}\r\n            labels={graphData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n          <p class=\"text-center\">Week</p>\r\n        </div>\r\n       }\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\wind\\maintenance\\maintenance.js",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect,\r\n  CInput,\r\n  CDataTable,\r\n  CLink,\r\n  CTextarea\r\n} from '@coreui/react'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../../helpers/utils.js'\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Charts = () => {\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [term, setTerm] = useState([]);\r\n  const [generator, setGenerator] = useState();\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [status, setStatus] = useState('null');\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n   useEffect(() => {\r\n      fetchGenerators();\r\n      fetchData();\r\n      refreshChart([]);\r\n  }, []);\r\n\r\n\r\n  // const refreshChart = () => {\r\n  //   fetchData();\r\n  // }\r\n\r\n  const fetchGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/generators/current/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!generatorsLoaded) {\r\n          setGenerators(response);\r\n          setGeneratorsLoaded(true);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true)\r\n    setDataLoaded(false)\r\n\r\n    let endpoint;\r\n\r\n    let isOpen = ''\r\n    if (status != 'null')\r\n      isOpen = status=='open' ? true : false\r\n\r\n    if (generator && generator !== '0') {\r\n      endpoint = `admin/documents/generator/${generator}?term=${term}&period=${dateRange}&size=-1&isOpen=${isOpen}`\r\n    } else {\r\n      endpoint = `admin/documents?term=${term}&period=${dateRange}&size=-1&isOpen=${isOpen}`\r\n    }\r\n\r\n    DataAPI({\r\n      endpoint: endpoint,\r\n      method: 'GET',\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (!responseData) return;\r\n        if (responseData.error) {\r\n          setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n          } else {\r\n            return(alert(responseData.error))\r\n          }\r\n        }\r\n\r\n        setData(responseData)\r\n        refreshChart(responseData)\r\n        setLoading(false)\r\n        setDataLoaded(true)\r\n\r\n  })\r\n\r\n\r\n\r\n    // const APIPayload = {\r\n    //     'period' : dateRange,\r\n    //   }\r\n\r\n    // if (generator) APIPayload.generators = [generator]\r\n\r\n    // DataAPI({\r\n    //   endpoint: 'chart/performanceIndex',\r\n    //   method: 'POST',\r\n    //   body: APIPayload,\r\n    // })\r\n    //   .then(function (responseData) {\r\n\r\n    //     console.log('responseData PI >', responseData)\r\n\r\n    //     setLoading(false);\r\n\r\n    //     const tableData = [];\r\n\r\n    //     responseData.data.forEach(\r\n    //       generatorData => {\r\n\r\n    //         tableData.push({\r\n    //           turbineId: generatorData.name\r\n    //         });\r\n\r\n    //       }\r\n    //     );\r\n\r\n    //     // setTableData(tableData);\r\n\r\n    //     const data = {\r\n    //       labels: [],\r\n    //       datasets: [],\r\n    //       backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n    //     }\r\n\r\n    //     const colors = [\r\n    //         '#003f5c',\r\n    //         '#374c80',\r\n    //         '#7a5195',\r\n    //         '#bc5090',\r\n    //         '#ef5675',\r\n    //         '#ff764a',\r\n    //         '#ffa600'\r\n    //       ];\r\n\r\n\r\n    //       const dataset100 = {\r\n    //         labels: [''],\r\n    //         label: '',\r\n    //         backgroundColor: colors.pop(),\r\n    //         data: []\r\n    //       };\r\n\r\n    //     responseData.data.forEach((rDs) => {\r\n\r\n    //       const dataset = {\r\n    //         labels: [],\r\n    //         label: rDs.name,\r\n    //         backgroundColor: colors.pop(),\r\n    //         data: [],\r\n    //         hidden: rDs.name!='Total'\r\n    //       };\r\n\r\n    //       rDs.data.graph.forEach((rD) => {\r\n    //         // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n    //         dataset.labels.push(`${formatDate(rD.from)} - ${formatDate(rD.to)}`);\r\n    //         dataset.data.push(rD.value)\r\n\r\n    //         dataset100.data.push(100)\r\n\r\n    //       });\r\n\r\n    //       dataset.labels.reverse();\r\n    //       dataset.data.reverse();\r\n\r\n    //       data.datasets.push(dataset);\r\n    //       // data.datasets.push(dataset100);\r\n\r\n    //     });\r\n\r\n    //     responseData.data[0].data.graph.forEach((rD) => {\r\n    //       const rDfrom = rD.from;\r\n    //       const rDto = rD.to;\r\n    //       data.labels.push(`${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`);\r\n\r\n    //     });\r\n\r\n    //     data.labels.reverse();\r\n\r\n    //     setGraphData(data)\r\n\r\n    //   })\r\n    //   .catch(\r\n    //     err => console.warn(`ERROR! ${err}`)\r\n    //     // err => alert(`ERROR! ${err}`)\r\n    //   );\r\n\r\n  }\r\n\r\n  const refreshChart = (responseData) => {\r\n\r\n    setLoading(true)\r\n    const tableData = []\r\n\r\n    responseData.forEach(\r\n      (row,index) => {\r\n\r\n        let allGenerators;\r\n\r\n        if (row.generators) {\r\n          allGenerators = row.generators.map(generator => generator.code).join(', ');\r\n        } else {\r\n          allGenerators = '-';\r\n        }\r\n\r\n        const serviceOrder =  row.name.split('_').pop();\r\n\r\n        const startDateEndDate = [];\r\n\r\n        if (row.from) startDateEndDate.push(formatDate(row.from));\r\n        if (row.to) startDateEndDate.push(formatDate(row.to));\r\n        \r\n\r\n        tableData.push({\r\n          serviceOrder: '#'+serviceOrder,\r\n          turbineId: allGenerators,\r\n          startDateEndDate: startDateEndDate.join('-'),\r\n          issue: row.name,\r\n          status: row.isOpen ? 'open' : 'closed',\r\n          comment: row.observations,\r\n          download: process.env.REACT_APP_API_URL+row.downloadLink.replace('api/rest/', ''),\r\n        })\r\n\r\n      }\r\n    )\r\n\r\n    setTableData(tableData)\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n  const toggleStatus = (status, index) => {\r\n    // let newStatuses = statuses\r\n    // newStatuses[index] = 'Open'\r\n    // setStatuses(newStatuses)\r\n    const body = {}\r\n    body.id = data[index].id;\r\n    body.observations = \"con comentarios\";\r\n    body.isOpen = status == 'open';\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'admin/documents',\r\n      'method': 'PUT',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        let new_data = data\r\n        new_data[index].isOpen = status=='open'\r\n        setData(new_data)\r\n        refreshChart(new_data)\r\n\r\n      })\r\n  }\r\n\r\n  const changeComment = (comment, index) => {\r\n    let new_data = data\r\n    new_data[index].observations = comment\r\n    setData(new_data)\r\n  }\r\n\r\n  const enableCommentChanged = (index) => {\r\n    document.getElementById(\"save-comment-\"+index).hidden = false;\r\n  }\r\n\r\n  const saveComment = (index) => {\r\n    \r\n    const body = {}\r\n    body.id = data[index].id;\r\n    body.observations = data[index].observations;\r\n    body.isOpen = data[index].isOpen;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'admin/documents',\r\n      'method': 'PUT',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        document.getElementById(\"save-comment-\"+index).hidden = true;\r\n\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const fields = [\r\n    'turbineId',\r\n    'serviceOrder',\r\n    'startDateEndDate',\r\n    'issue',\r\n    'status',\r\n    'comment',\r\n    { label: 'Open Report', key: 'download' },\r\n\r\n\r\n  ];\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          {/* <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Maintenance\r\n              </h3>\r\n              <br />\r\n              </CCol>\r\n\r\n              </CRow>\r\n              <CRow>\r\n\r\n              <CCol sm=\"3\" class=\"text-right\">\r\n\r\n            <DateFilter options={'y,cm,cy,12w,12m,x,xx'.split(',')} value={dateRange} onChange={(value) => { setDateRange(value);}} />\r\n\r\n                            </CCol>\r\n\r\n              <CCol sm=\"3\" class=\"text-right\">\r\n            <CSelect className={'input-md'} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n\r\n            <option value=\"0\">All generators</option>\r\n\r\n            {generators.map((oGenerator) => (\r\n                                <option value={oGenerator.id}>\r\n                                  {oGenerator.code}\r\n                                </option>\r\n                              ))}</CSelect>\r\n            </CCol>\r\n\r\n               \r\n\r\n            \r\n            <CCol sm=\"3\" class=\"text-right\">\r\n              <CInput type=\"text\" placeholder=\"Search term\" autoComplete=\"username\" onChange={(ev) => { setTerm(ev.target.value);}} />\r\n            </CCol>\r\n\r\n            <CCol sm=\"3\" class=\"text-right\">\r\n              <CButton disabled={loading}  onClick={ () => { refreshChart(); } } color=\"primary\" className=\"px-4\">Submit</CButton>\r\n            </CCol>\r\n          </CRow> */}\r\n\r\n\r\n\r\n\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Maintenance\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n            \r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 mb-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                <option value=\"0\">All turbines</option>\r\n              {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:2.4}}>Status</h6>\r\n              <CSelect className={'input-sm'} disabled={loading} onChange={(ev) => {setStatus(ev.target.value); }} custom name=\"status\" id=\"status\">\r\n                <option value=\"null\">All</option>\r\n                <option value=\"open\">Open</option>\r\n                <option value=\"closed\">Closed</option>\r\n              </CSelect>\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value);}} />\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:2.4,minWidth:'75px'}} >Search term</h6>\r\n              <CInput type=\"text\" placeholder=\"\" autoComplete=\"username\" style={{minWidth:'100px'}} disabled={loading} onChange={(ev) => { setTerm(ev.target.value);}} />\r\n              <CButton color=\"primary\" disabled={loading} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n            </CCol>\r\n          </CRow>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </CCardHeader>\r\n      <CCardBody>\r\n        {!loading && (dataLoaded || dataLoadError) ? \r\n          <CDataTable\r\n              items={tableData}\r\n              fields={fields}\r\n              striped\r\n              itemsPerPage={50}\r\n              pagination\r\n              scopedSlots = {{\r\n                'download':\r\n                  (item, index)=>{\r\n                    return (\r\n                      <td className=\"py-2\">\r\n                        <a href={item.download}>DOWNLOAD</a>\r\n                      </td>\r\n                      )\r\n                  },\r\n                'status':\r\n                (item, index)=>{\r\n                  return (\r\n                      <td className=\"py-1\">\r\n                        <CSelect\r\n                          color=\"primary\"\r\n                          size=\"md\"\r\n                          className={\"select-status input-sm \"+item.status}\r\n                          value={item.status}\r\n                          onChange={(ev)=>{toggleStatus(ev.target.value, index)}}\r\n                        >\r\n                          <option key={'status-'+index+'-open'} value='open'>Open</option>\r\n                          <option key={'status-'+index+'-closed'} value='closed'>Closed</option>\r\n                        </CSelect>\r\n                      </td>\r\n                      )\r\n                  },\r\n                'comment':\r\n                (item, index)=>{\r\n                  return (\r\n                      <td className=\"py-1 position-relative\">\r\n                        <CInput\r\n                          color=\"primary\"\r\n                          // size=\"md\"\r\n                          className={\"w-100\"}\r\n                          defaultValue={data[index].observations}\r\n                          onChange={(ev)=>{changeComment(ev.target.value, index); enableCommentChanged(index) }}\r\n                        >\r\n                        </CInput>\r\n                        <CButton \r\n                          hidden={true}\r\n                          size=\"sm\"\r\n                          color=\"primary\" \r\n                          className=\"btn-comment position-absolute\"\r\n                          id={'save-comment-'+index}\r\n                          style={{right: '14.5px', top: '7.5px'}}\r\n                          onClick={(ev)=>{saveComment(index)}}\r\n                        >\r\n                          Save\r\n                        </CButton>\r\n                      </td>\r\n                      )\r\n                  },\r\n              }}\r\n            />\r\n        : \r\n          <ChartLoading/>\r\n        }\r\n\r\n        {/* <Line data={graphData} /> */}\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\overview\\overview.js",["1214","1215","1216","1217","1218","1219","1220","1221","1222","1223"],"import React, { lazy, useEffect, useState } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CSpinner,\r\n  CWidgetDropdown,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {DateFilter, round, getDateLabel, getCurrentDateNDaysBefore} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\n\r\nconst WidgetsDropdown = lazy(() => import('./Widgets.js'))\r\nconst WidgetsBrand = lazy(() => import('../../../widgets/WidgetsBrand.js'))\r\n\r\nconst Overview = () => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoaded2, setDataLoaded2] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  \r\n  const [period, setPeriod] = useState('y');\r\n\r\n  const [totalACProductionMwh, setTotalACProductionMwh] = useState();\r\n  const [irradiationKwhM2, setIrradiationKwhM2] = useState();\r\n  const [avgAmbientTemp, setAvgAmbientTemp] = useState();\r\n\r\n  const [timeAvailability, setTimeAvailability] = useState('');\r\n  const [performanceRatio, setPerformanceRatio] = useState('');\r\n  const [specificYield, setSpecificYield] = useState();\r\n\r\n  const [timeAvailabilityChartData, setTimeAvailabilityChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [performanceChartData, setPerformanceChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [specificYieldChartData, setSpecificYieldChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    refreshChart(period);\r\n  }, []);\r\n\r\nconst loadGenerators = () => {\r\n\r\n  DataAPI({\r\n    'endpoint': 'admin/locations/current',\r\n    'method': 'GET'\r\n  }).then(\r\n    response => {\r\n      \r\n      if (response && response.error) {\r\n        setCookie('lastTimeStamp', '');\r\n        setCookie('name', '');\r\n        window.location.reload();\r\n      }\r\n      else if ((!dataLoaded || !dataLoaded2) && response && !response.error) {\r\n        let gen = [];\r\n        if (response.generators != null) {\r\n          response.generators.forEach(\r\n            generator => { \r\n              gen.push(generator.id)\r\n            })\r\n          setGenerators(gen);\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n\r\n}\r\n\r\nconst fetchData = (period) => {\r\n\r\n  setLoading(true);\r\n  \r\n  const body = {}\r\n  body.location = getCookie('location')\r\n  if (period && period.split('--').length==2) {\r\n    body.from = period.split('--')[0]\r\n    body.to = period.split('--')[1]\r\n  } else {\r\n    body.period = period\r\n  }\r\n\r\n  DataAPI({\r\n    'endpoint': 'solar/overview',\r\n    'method': 'POST',\r\n    'body': body\r\n  }).then(\r\n    response => {\r\n\r\n\r\n      setLoading(false);\r\n\r\n      if (response.error) {\r\n          if (response.error.message) {\r\n          return(alert(response.error.message))\r\n          } else {\r\n          return(alert(response.error)) \r\n          }\r\n      }\r\n\r\n      let chartData = response.data && response.data[0];\r\n\r\n      if (chartData) {\r\n\r\n        const timeAvailability = round(chartData.timeBasedAvailability);\r\n        const performanceRatio = round(chartData.performanceRatio)\r\n        const specificYield = round(chartData.specificYield);\r\n        const totalACProductionMwh = round(chartData.productionMwh);\r\n        const irradiationKwhM2 = round(chartData.irradiationKwhM2);\r\n        const avgAmbientTemp = round(chartData.avgAmbientTemp);\r\n\r\n        const specificYieldDataset = {\r\n          labels: [''],\r\n          datasets: [{\r\n            label: 'Specific Yield',\r\n            backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)'],\r\n            data: [specificYield],\r\n          }\r\n        ]}\r\n\r\n        const timeAvailabilityDataset = {\r\n          clip:true,\r\n          labels: ['Time-based Availability'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [timeAvailability,100-timeAvailability],\r\n            backgroundColor: ['#0a58ca', '#052c65']\r\n          }\r\n        ]}\r\n\r\n        const performanceDataset = {\r\n          clip:true,\r\n          labels: ['Performance Ratio'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [performanceRatio,100-performanceRatio],\r\n            backgroundColor: ['#722595', '#380a4e']\r\n          }\r\n        ]}\r\n      \r\n        setTimeAvailability(`${timeAvailability}%`)\r\n        setPerformanceRatio(`${performanceRatio}%`)\r\n        setSpecificYield(`${specificYield} MWh/MW`)\r\n\r\n        setTotalACProductionMwh(totalACProductionMwh)\r\n        setIrradiationKwhM2(irradiationKwhM2)\r\n        setAvgAmbientTemp(avgAmbientTemp)\r\n        \r\n        setTimeAvailabilityChartData(timeAvailabilityDataset)\r\n        setPerformanceChartData(performanceDataset)\r\n        setSpecificYieldChartData(specificYieldDataset)\r\n        \r\n        setDataLoaded(true)\r\n\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n  const refreshChart = (period) => {\r\n    fetchData(period);\r\n  }\r\n\r\n  const filterData = (date) => {\r\n    setPeriod(date);\r\n    fetchData(date);\r\n  }\r\n\r\n  const options = {\r\n    animation: { duration: loading ? 0 : 1000 },\r\n  };\r\n\r\n  const optionsBar = {\r\n    ...options,\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          color: \"#ffffff\",\r\n          beginAtZero: true,\r\n        },\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n        labels: {\r\n          color: '#ffffff'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            return round(tooltipItem.raw,1) + ' MWh/MW'\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  const optionsDoughnut = {\r\n    ...options,\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: '#ffffff'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            return round(tooltipItem.raw,1) + ' %'\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  const bodyOpacity = loading?.7:1\r\n\r\n  return (\r\n    <>\r\n      \r\n      <CCard>\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Overview\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"3\" className=\"text-right\">\r\n              <DateFilter warning={\"Seleccionar un rango máximo de 31 días\"} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { filterData(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n        </CCardHeader>\r\n        \r\n        <CCardBody>\r\n          <div style={{opacity:{bodyOpacity}}} >\r\n\r\n            {false && <div style={{zIndex: 999, position: 'absolute', width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,.7)'}}><CSpinner style={{position: 'absolute'}} /></div>}\r\n          \r\n            <CRow>\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CCard\r\n                  color={\"success\"}\r\n                  textColor={\"white\"}\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                >\r\n                  <CCardBody>\r\n                    <CCardTitle>PRODUCTION AND CLIMATE</CCardTitle>\r\n                    <CCardText>\r\n                      <p class=\"h6\">Production: {totalACProductionMwh!=undefined?round(totalACProductionMwh )+' MWh':''}</p>\r\n                      <p class=\"h6\">Irradiation: {irradiationKwhM2!=undefined?round(irradiationKwhM2)+' Kwh/m2':''}</p>\r\n                      <p class=\"h6\">Average Ambient Temperature: {avgAmbientTemp!=undefined?round(avgAmbientTemp)+' °C':''}</p>\r\n                    </CCardText>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CWidgetDropdown\r\n                  color=\"gradient-warning\"\r\n                  header=\"SPECIFIC YIELD (MWh/MW)\"\r\n                  text={specificYield}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        { dataLoaded &&\r\n                          <Bar\r\n                            data={specificYieldChartData}\r\n                            options={optionsBar}\r\n                            height={null}\r\n                            width={null}\r\n                          />\r\n                        }\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                  \r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CWidgetDropdown\r\n                  color=\"gradient-info\"\r\n                  header=\"TIME-BASED AVAILABILITY (%)\"\r\n                  text={timeAvailability}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={timeAvailabilityChartData}\r\n                          options={optionsDoughnut}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CWidgetDropdown\r\n                  color=\"gradient-purple\"\r\n                  header=\"PERFORMANCE RATIO (%)\"\r\n                  text={performanceRatio}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={performanceChartData}\r\n                          options={optionsDoughnut}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n            </CRow>\r\n          </div>\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\overview\\Widgets.js",["1224","1225","1226","1227","1228","1229","1230","1231"],"import React, {useState, useEffect} from 'react'\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport { round } from '../../../../helpers/utils.js'\r\n\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst Widgets = (props) => {\r\n\r\n  console.log('widgets');\r\n\r\n\t// const [data, setData] = useState(false);\r\n\r\n  const [averageWindSpeed, setAverageWindSpeed] = useState();\r\n  const [metMastWindSpeed, setMetMastWindSpeed] = useState();\r\n\r\n\tconst [dataLoaded, setDataLoaded] = useState(false);\r\n\tconst [availability, setAvailability] = useState('');\r\n\tconst [loadFactor, setLoadFactor] = useState();\r\n\tconst [mWh, setMWh] = useState([]);\r\n\r\n\tconst [availabilityChartData, setAvailabilityChartData] = useState([]);\r\n\tconst [loadFactorChartData, setLoadFactorChartData] = useState([]);\r\n\r\n\tconst [graphData, setGraphData] = useState({\r\n\t    labels: [],\r\n\t    datasets: []\r\n\t  });\r\n\r\n\r\n\r\n\r\n  graph();\r\n\r\n\r\n  function graph(){\r\n\r\n    console.log('dataLoaded', dataLoaded)\r\n\r\n    if (!dataLoaded) {\r\n\r\n      const chartData = props.data && props.data.data && props.data.data[0];\r\n\r\n      if (chartData){\r\n\r\n        // console.log('chartData', chartData);\r\n\r\n        const availability = Math.round(chartData.timeBasedAvailability*10)/10;\r\n        const loadFactor = Math.round(chartData.capacityFactor*10)/10;\r\n        const mWh = Math.round(chartData.mWhFromWindTurbines*10)/10;\r\n\r\n        const loadFactorDataset = {\r\n          clip:true,\r\n          labels: ['Load Factor'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [loadFactor,100-loadFactor],\r\n            backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)']\r\n          }\r\n        ]}\r\n\r\n\r\n        const availabilityDataset = {\r\n          clip:true,\r\n          labels: ['Availability'],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [availability,100-availability],\r\n            backgroundColor: ['#0a58ca', '#052c65']\r\n          }\r\n        ]}\r\n\r\n\r\n        setAverageWindSpeed(props.data.data[0].averageWindSpeed);\r\n        setMetMastWindSpeed(props.data.data[0].metMastWindSpeed);\r\n\r\n        setAvailability(`${availability}%`)\r\n        setLoadFactor(`${loadFactor}%`)\r\n        \r\n        setAvailabilityChartData(availabilityDataset)\r\n        setLoadFactorChartData(loadFactorDataset)\r\n\r\n        setMWh(mWh)\r\n\r\n        setDataLoaded(true);\r\n        \r\n      }\r\n\r\n      \r\n      // setGraphData(datasets2);\r\n\r\n    }\r\n  }\r\n\r\n  // render\r\n  return (\r\n    <>\r\n    <CRow>\r\n      \r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"LOAD FACTOR (%)\"\r\n          text={loadFactor}\r\n          footerSlot={\r\n            <div class=\"px-lg-5 pb-lg-5\">\r\n            <Doughnut\r\n               data={loadFactorChartData}\r\n            />\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-info\"\r\n          header=\"AVAILABILITY (%)\"\r\n          text={availability}\r\n          footerSlot={\r\n            <div class=\"px-lg-5 pb-lg-5\">\r\n            <Doughnut\r\n               data={availabilityChartData}\r\n            />\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n\r\n\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n          \r\n\r\n          <CCard\r\n      color={\"success\"}\r\n      textColor={\"white\"}\r\n\r\n    >\r\n\r\n      <CCardBody>\r\n        <CCardTitle>PRODUCTION AND WIND</CCardTitle>\r\n        <CCardText>\r\n          <p class=\"h6\">Production: {round(mWh)} MW</p>\r\n          <p class=\"h6\">Turbine average wind speed: {round(averageWindSpeed)} m/s</p>\r\n          <p class=\"h6\">Met mast average wind speed: {round(metMastWindSpeed)} m/s</p>\r\n        </CCardText>\r\n      </CCardBody>\r\n    </CCard>\r\n\r\n      </CCol>\r\n    </CRow>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Widgets\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\performance\\performance.js",["1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CSpinner,\r\n  Fade\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\n\r\nimport {formatDate, formatDate2, round, getDateLabel, DateFilter, formatNumber} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\nconst SolarPerformance = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({ labels: [], datasets: [] });\r\n  const [graphData2, setGraphData2] = useState({labels: [],datasets: [] });\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [park, setPark] = useState();\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    const {period, groupBy} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location')\r\n    body.generators = selectedGenerators;\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      endpoint: 'solar/performanceIndex',\r\n      method: 'POST',\r\n      body: body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData.error) {\r\n          setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n        }\r\n\r\n        const labels = responseData.data.map((rD, index) => {\r\n          const label = (groupBy == \"day\") ? `${rD.from.split(' ')[0]}` : `${rD.from.split(' ')[0]} - ${rD.to.split(' ')[0]}`\r\n          return label\r\n        })\r\n\r\n        const data = {\r\n          labels: labels,\r\n          datasets: []\r\n        }\r\n        const data2 = {\r\n          labels: labels,\r\n          datasets: []\r\n        }\r\n\r\n        const dataset2y1 = {\r\n          label: \"Irradiance\",\r\n          backgroundColor: \"#f32e2e\",\r\n          borderColor: \"#f32e2e\",\r\n          borderWidth: 1,\r\n          pointBorderColor: \"#f32e2e\",\r\n          pointBorderWidth: 2,\r\n          // pointBackgroundColor: '#d8dbe0',\r\n          yAxisID: 'y1',\r\n          pointRadius: 4,\r\n          pointHoverRadius: 5,\r\n          data: responseData.data.map((rD, index) => {\r\n            return rD.genData[0].irradiationKwhM2\r\n          }),\r\n        };\r\n        data2.datasets.push(dataset2y1);\r\n\r\n        const dataset1Total = {\r\n          label: \"Total\",\r\n          backgroundColor: \"#0400ff\",\r\n          data: responseData.data.map((rD, index) => {\r\n            return rD.performanceRatio\r\n          }),\r\n        }\r\n        data.datasets.push(dataset1Total)\r\n\r\n        const dataset2Total = {\r\n          label: \"Total\",\r\n          backgroundColor: \"#0400ff\",\r\n          borderColor: \"#0400ff\",\r\n          borderWidth: 1,\r\n          pointBorderColor: \"#0400ff\",\r\n          pointBorderWidth: 2,\r\n          yAxisID: 'y',\r\n          pointRadius: 4,\r\n          pointHoverRadius: 5,\r\n          data: responseData.data.map((rD, index) => {\r\n            return rD.totalACProductionMwh\r\n          }),\r\n        }\r\n        data2.datasets.push(dataset2Total)\r\n\r\n        responseData.data[0].genData.forEach((gen) => {\r\n\r\n          const dataset = {\r\n            label: gen.code,\r\n            backgroundColor: generatorColors[gen.code],\r\n            data: responseData.data.map((rD, index) => {\r\n                return rD.genData.filter(rGen => rGen.code == gen.code).map((rGen, index2) => rGen.performanceRatio)[0]\r\n              }),\r\n          };\r\n          const dataset2y = {\r\n            label: \"Production: \"+gen.code,\r\n            backgroundColor: generatorColors[gen.code],\r\n            borderColor: generatorColors[gen.code],\r\n            borderWidth: 1,\r\n            pointBorderColor: generatorColors[gen.code],\r\n            pointBorderWidth: 2,\r\n            yAxisID: 'y',\r\n            pointRadius: 4,\r\n            pointHoverRadius: 5,\r\n            data: responseData.data.map((rD, index) => {\r\n              return rD.genData.filter(rGen => rGen.code == gen.code).map((rGen, index2) => rGen.acProductionMwh)[0]\r\n            }),\r\n          };\r\n          \r\n          data.datasets.push(dataset);\r\n          data2.datasets.push(dataset2y);\r\n\r\n        });\r\n\r\n        setGraphData(data);\r\n        setGraphData2(data2);\r\n        setDataLoaded(true);\r\n\r\n      })\r\n      .catch(\r\n        err => {\r\n          console.warn(`ERROR! ${err}`)\r\n          setLoading(false);\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  const loadGenerators = () => {\r\n  \r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n          \r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              generatorColors[\"Total\"] = \"#0400ff\";\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n  \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const options = {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n              return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1)+\"%\";\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  const options2 =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    stacked: false,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.yAxisID == \"y\")\r\n              return tooltipItem.dataset.label + \": \" + formatNumber(round(tooltipItem.raw,1)) + ' MWh';\r\n            else\r\n              return tooltipItem.dataset.label + \": \" + formatNumber(round(tooltipItem.raw,1)) + ' Kwh/m2';\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        lineWidth: 4,\r\n        borderRadius: 10,\r\n        usePointStyle: true,\r\n        pointStyle: {\r\n          borderWidth: 5,\r\n          pointBorderWidth: 5,\r\n        }\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setGeneratorsSelected(true);\r\n    fetchData({period: dateRange, groupBy: groupBy})\r\n\r\n  }\r\n\r\n  return (\r\n\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n\r\n              <CCol sm=\"7\">\r\n                <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                  Performance\r\n                </h3>\r\n                <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n                </CCol>\r\n\r\n                <CCol sm=\"5\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                  <CSelect className={'input-md'} value={groupBy} style={{maxWidth:'150px'}} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\" selected>Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                  </CSelect>\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                  <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n                \r\n                </CCol>\r\n            </CRow>\r\n\r\n          </CCardHeader>\r\n\r\n          <CCardBody>\r\n\r\n            <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n              <CCol sm=\"10\" className={\"d-flex \"} >\r\n                <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select inverter:</h6>\r\n                \r\n                {generatorsLoaded && \r\n                  <div>\r\n                  { generators.map((gen, index) => (  \r\n                      <CButton \r\n                        style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                        className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-1 my-1\"}\r\n                        onClick={() => selectGenerator(gen.id)} \r\n                        id={gen.id}\r\n                        >\r\n                          {gen.code}\r\n                      </CButton>\r\n                  )) }\r\n                  </div>\r\n                }\r\n              </CCol>\r\n              <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end\">\r\n                <CButton disabled={selectedGenerators.length==0} color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n            </CRow>\r\n\r\n            {generatorsSelected && \r\n            \r\n              <div>\r\n                {(!loading || dataLoadError) ?\r\n\r\n                <div>\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Performance Ratio</h4>\r\n                    <div className=\"text-left float-left\" style={{width: '50%'}}>%</div>\r\n                    <div className=\"text-left\" style={{width: '100%'}}></div>\r\n                    <Line data={graphData} options={options} />\r\n                    <CRow className=\"text-center d-block mt-2\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                  </div>\r\n\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Production and Irradiance</h4>\r\n                    <div className=\"text-left float-left\" style={{width: '50%'}}>MWh</div>\r\n                    <div className=\"text-right float-right\" style={{width: '50%'}}>Kwh/m2</div>\r\n                    <Line data={graphData2} options={options2} />\r\n                    <CRow className=\"text-center d-block mt-2\" style={{textTransform: 'capitalize'}}>{groupBy}</CRow>\r\n                  </div>\r\n                </div>\r\n\r\n                :\r\n                <CRow style={{justifyContent:'center'}}>\r\n                  <CSpinner \r\n                    className=\"loading-spinner\"\r\n                    color='#321fdb'\r\n                  />\r\n                </CRow>\r\n                }\r\n              </div>\r\n            }\r\n            \r\n          </CCardBody>\r\n\r\n        </CCard>\r\n  )\r\n}\r\n\r\nexport default SolarPerformance\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\climate\\trends.js",["1246","1247","1248","1249","1250","1251","1252"],"C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\solar\\climate\\forecast.js",["1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {round} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\nimport moment from 'moment-timezone';\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart,\r\n  Plugin\r\n} from 'chart.js';\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport arrow from '../../../../assets/arrow.png'\r\n\r\n\r\nconst SolarClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [arrowImage, setArrowImage] = useState(null)\r\n  const [datetimes, _setDatetimes] = useState([])\r\n  const datetimesRef = useRef(datetimes);\r\n  const setDatetimes = datetimes => {\r\n    datetimesRef.current = datetimes;\r\n    _setDatetimes(datetimes);\r\n  };\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    var arrowImage = new Image(22,22);\r\n    arrowImage.src = arrow\r\n    arrowImage.onload = function() {\r\n      setArrowImage(this);\r\n    }\r\n\r\n    DataAPI({\r\n      'endpoint': 'solar/weather',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n\r\n          // if (response.error.message) {\r\n          //   return(alert(response.error.message))\r\n          // } else {\r\n          //   return(alert(response.error)) \r\n          // }\r\n        }\r\n\r\n        const graphData = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n\r\n        const responseData = response.data;\r\n\r\n        graphData.labels = responseData.map( (x,i) => {\r\n          return x.values.find(y => y.name == \"TYPE_WEATHER_RADIATION_FLUX\").value;\r\n        })\r\n  \r\n        const datasetIrradiance = {\r\n          label:  'Irradiance',\r\n          yAxisID: 'y',\r\n          unit: 'W/m2',\r\n          borderColor: '#ff764a',\r\n          pointBackgroundColor: '#ef5675',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          data: responseData.map( (x,i) => {\r\n            return x.values.find(y => y.name == \"TYPE_WEATHER_RADIATION_FLUX\").value;\r\n          })\r\n        }\r\n\r\n        // const datasetTemperature = {\r\n        //   label:  'Temperature',\r\n        //   yAxisID: 'y1',\r\n        //   unit: '°C',\r\n        //   borderColor: '#0400ff',\r\n        //   pointBackgroundColor: '#0400ff',\r\n        //   pointBorderColor: 'transparent',\r\n        //   backgroundColor: 'transparent',\r\n        //   data: responseData.map( (x,i) => {\r\n        //     return x.values.find(y => y.name == \"TYPE_WEATHER_RADIATION_FLUX\").value;\r\n        //   })\r\n        // }\r\n\r\n        graphData.datasets.push(datasetIrradiance);\r\n        // graphData.datasets.push(datasetTemperature);\r\n  \r\n        const datetimes = []\r\n        responseData.forEach( (x,i) => {\r\n          datetimes.push(x.time);\r\n        })\r\n        setDatetimes(datetimes)\r\n        \r\n        setLineChartOneData(graphData)\r\n\r\n        setLoading(false)\r\n\r\n      })\r\n\r\n  }\r\n\r\n  const plugins = [{\r\n    afterDraw: (chart) => {\r\n      let ctx = chart.ctx;\r\n      var xAxis = chart.scales['x'];\r\n      var yAxis = chart.scales['y'];\r\n      xAxis.ticks.forEach((value, index) => {\r\n        \r\n        // if (index%6==0) {\r\n          var x = xAxis.getPixelForTick(index);\r\n        \r\n          const datetime = datetimesRef.current[index].split(' ')\r\n          let date = datetime[0].split('-')\r\n          date = date[2] + \"-\" + date[1]\r\n          let time = datetime[1].split(':')\r\n          if (time[0] == '00' || time[0] == '06' || time[0] == '12' || time[0] == '18' ) {\r\n            time = time[0] + \":\" + time[1]\r\n            // const month = datetime.month()+1 > 9 ? datetime.month()+1 : '0'+(datetime.month()+1)\r\n            // const day = datetime.date() > 9 ? datetime.date() : '0'+datetime.date()\r\n            // const hour = datetime.hour() > 9 ? datetime.hour() : '0'+(datetime.hour())\r\n            // const minute = datetime.minutes() > 9 ? datetime.minutes() : '0'+datetime.minutes()\r\n            // const date = day+\"-\"+month\r\n            // const time = hour+\":\"+minute\r\n            \r\n            ctx.font = \"9px Arial\";\r\n            ctx.fillText(date, x - 12, yAxis.bottom + 16);\r\n          ctx.fillText(time, x - 12, yAxis.bottom + 28);\r\n          }\r\n          \r\n        // }\r\n      });\r\n      ctx.font = \"12px Arial\";\r\n    }\r\n  }]\r\n\r\n\r\n  const options =  {\r\n    type: 'line',\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            bottom: 80,\r\n            left: 20,\r\n            right: 20\r\n        }\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n            display: false,\r\n        },\r\n        grid: {\r\n          display: true\r\n        },\r\n      },\r\n      y: {\r\n        min: 0,\r\n        beginAtZero: true\r\n      },\r\n      y1: {\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(tooltipItem){\r\n            return '';\r\n          },\r\n          label: function(tooltipItem) {\r\n            const datetime = datetimesRef.current[tooltipItem.dataIndex].split(' ')\r\n            let date = datetime[0].split('-')\r\n            date = date[2] + \"-\" + date[1]\r\n            let time = datetime[1].split(':')\r\n            time = time[0] + \":\" + time[1]\r\n            return [\"Date: \"+date+\" \"+time,tooltipItem.dataset.label+\": \"+round(tooltipItem.raw,1) + ' ' + tooltipItem.dataset.unit]\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Global Horizontal Irradiance</h4>\r\n                    <div className=\"text-left float-left\" style={{width: '50%'}}>W/m2</div>\r\n                    <div className=\"text-right float-right\" style={{width: '50%'}}>°C</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default SolarClimateForecast\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\status\\ten-min-average.js",["1272","1273","1274","1275","1276","1277","1278","1279"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CBadge\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nimport { freeSet } from '@coreui/icons';\r\nimport DataAPI from '../../../helpers/DataAPI.js';\r\nimport { formatDate2, round, formatNumber } from '../../../helpers/utils.js';\r\nimport CIcon from '@coreui/icons-react';\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n);\r\n\r\nconst StatusTenMinAverage = () => {\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [hasWindParks, setHasWindParks] = useState(false);\r\n  const [hasSolarParks, setHasSolarParks] = useState(false);\r\n\r\n  const [windGeneratorsTableData, setWindGeneratorsTableData] = useState([]);\r\n  const [tableDataWindStatus, setTableDataWindStatus] = useState(false);\r\n\r\n  const [solarGeneratorsTableData, setSolarGeneratorsTableData] = useState([]);\r\n  const [tableDataSolarStatus, setTableDataSolarStatus] = useState(false);\r\n\r\n  const fetchData = () => {\r\n\r\n    // const body = {}\r\n    // body.location = getCookie('location');\r\n    setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'wind/dashboard',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDate2(responseData.dateData));\r\n\r\n      if( getCookie('parkType') == '')\r\n        setCookie('parkType', responseData.locations[0].type);\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasWindParks(true);\r\n\r\n      const tableDataWindStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                  today:formatNumber(round(responseData.dataToday.production,1))+\" MWh\"\r\n                },\r\n                {\r\n                  item:\"Turbine average wind speed:\",\r\n                  now:round(responseData.dataNow.windSpeed,1)+\" m/s\",\r\n                  today:round(responseData.dataToday.windSpeed,1)+\" m/s\"\r\n                },\r\n                {\r\n                  item:\"Turbines in operation:\",\r\n                  now:responseData.amountGeneratorsOk+\"/\"+responseData.amountGenerators,\r\n                  today:\"\"\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now',\r\n          'today'\r\n        ]\r\n      }\r\n      setTableDataWindStatus(tableDataWindStatus)\r\n\r\n      const windGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const turbinesStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.turbine = d.code;\r\n            line.indicator = d.dataNow.indicator;\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\");\r\n            line.windSpeed = (d.dataNow.windSpeed!=undefined?formatNumber(round(d.dataNow.windSpeed,1)):\"\");\r\n            line.status = d.dataNow.status;\r\n            return line;\r\n          });\r\n\r\n          const total =  {\r\n            turbine: \"Total\",\r\n            indicator: \"\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            windSpeed: formatNumber(round(rL.dataNow.windSpeed,1)),\r\n            status: \"\"\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(turbinesStatus),\r\n            fields:  [\r\n              'turbine',\r\n              { key: 'indicator', label: '' },\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'windSpeed', label: 'Wind Speed (m/s)' },\r\n              'status'\r\n            ]\r\n          }\r\n    \r\n          windGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setWindGeneratorsTableData(windGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'solar/dashboard',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDate2(responseData.dateData));\r\n\r\n      if( getCookie('parkType') == '')\r\n        setCookie('parkType', responseData.locations[0].type);\r\n      \r\n      setCookie('parkName', responseData.locations[0].name);\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasSolarParks(true);\r\n\r\n      const tableDataSolarStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                  today:formatNumber(round(responseData.dataToday.production,1))+\" MWh\"\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now',\r\n          'today'\r\n        ]\r\n      }\r\n      setTableDataSolarStatus(tableDataSolarStatus)\r\n\r\n      const solarGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const generatorStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.inverter = d.code\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\")\r\n            line.irradiance = \"\"\r\n            return line\r\n          });\r\n\r\n          const total =  {\r\n            inverter: \"Total\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            irradiance: formatNumber(round(rL.dataNow.irradiance,3))\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(generatorStatus),\r\n            fields:  [\r\n              'inverter',\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'irradiance', label: 'Irradiance (kw/m2)' }\r\n            ]\r\n          }\r\n    \r\n          solarGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setSolarGeneratorsTableData(solarGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (response  && !response.error) {\r\n          // setGenerators(response.generators);\r\n          fetchData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return ''\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol xs=\"10\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Status - 10-min Average\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Last updated on: {lastUpdated}</div>\r\n            </CCol>\r\n            <CCol xs=\"2\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <CIcon content={freeSet.cilReload} className={\"cursor-pointer animate-rotate\"} size={'lg'} title={'Refresh'}\r\n                onClick={() => fetchData()}/>\r\n            </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n\r\n            <CRow>\r\n\r\n              { hasWindParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-wind px-sm-4 mb-4\">\r\n\r\n                  <div style={{marginBottom:'30px'}}>\r\n                    <CRow>\r\n                    \r\n                      { tableDataWindStatus &&\r\n                        <CCol xl={!hasSolarParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\">\r\n                          <h4>Wind Portfolio</h4>\r\n                          <CDataTable\r\n                              addTableClasses=\"current-status-table\"\r\n                              striped\r\n                              items={tableDataWindStatus.items}\r\n                              fields={tableDataWindStatus.fields}\r\n                            />\r\n                        </CCol>\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n              { hasSolarParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n\r\n                <div style={{marginBottom:'30px'}}>\r\n                      <CRow>\r\n                      \r\n                        { tableDataSolarStatus &&\r\n                          <CCol xl={!hasWindParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\">\r\n                            <h4>Solar Portfolio</h4>\r\n                            <CDataTable\r\n                                addTableClasses=\"current-status-table\"\r\n                                striped\r\n                                items={tableDataSolarStatus.items}\r\n                                fields={tableDataSolarStatus.fields}\r\n                              />\r\n                          </CCol>\r\n                        }\r\n\r\n                      </CRow>\r\n                    </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n            <CRow>\r\n\r\n              { hasWindParks &&\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-wind px-sm-4 mb-4\">\r\n\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { windGeneratorsTableData.length > 0 &&\r\n                        windGeneratorsTableData.map(park => (  \r\n                        <CCol xl={!hasSolarParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'windSpeed':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.windSpeed}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n              { hasSolarParks &&\r\n\r\n                <CCol xl={hasWindParks&&hasSolarParks?\"6\":\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { solarGeneratorsTableData.length > 0 &&\r\n                        solarGeneratorsTableData.map(park => (  \r\n                        <CCol xl={!hasWindParks?\"6\":\"12\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'irradiance':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.irradiance}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n                  \r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default StatusTenMinAverage\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\user\\settings.js",["1280","1281","1282","1283","1284","1285","1286","1287","1288"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CButton,\r\n  CCardGroup,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CAlert,\r\n  CLabel,\r\n  CSelect,\r\n  CRow,\r\n  CSpinner\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport { setCookie } from 'src/helpers/sessionCookie.js'\r\n\r\n\r\nconst Settings = () => {\r\n  \r\n  const [loading, setLoading] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [newPasswordConfirm, setNewPasswordConfirm] = useState('');\r\n  const [passwordChanged, setPasswordChanged] = useState(false);\r\n  const [changePassword, setChangePassword] = useState(false);\r\n  const [changing, setChanging] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [differentPassword, setDifferentPassword] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  \r\n  \r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n  }, []);\r\n\r\n\r\n  const loadUser = () => {\r\n\r\n    setLoading(true);\r\n    \r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n        else if (!generatorsLoaded && response) {\r\n          if (response.location.generators != null)\r\n            setGenerators(response.location.generators);\r\n          setGeneratorsLoaded(true)\r\n        }\r\n\r\n        setName(response.name)\r\n        setEmail(response.email)\r\n        \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const enableSave = () => {\r\n  }\r\n\r\n  const saveNewPassword = () => {\r\n\r\n    if (newPassword !== newPasswordConfirm) {\r\n      setDifferentPassword(true);\r\n    } else {\r\n      setChanging(true);\r\n      DataAPI({\r\n        'endpoint': 'security/authenticate/reset',\r\n        'method': 'POST',\r\n        'body': {\r\n          \"newPassword\": newPassword,\r\n          \"newPasswordConfirm\": newPasswordConfirm\r\n      }\r\n      }).then(\r\n        response => {\r\n\r\n          if (response.changed) {          \r\n            \r\n            setPasswordChanged(true)\r\n            setChangePassword(false)\r\n            setMessage('Your password was updated.')\r\n\r\n          } else {\r\n            setErrorMessage(response.error)\r\n            // alert(response.error)\r\n          }\r\n\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard sm=\"7\" className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                  <h3 id=\"settings\" className=\"card-title mb-0\">\r\n                    Client Settings\r\n                  </h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n              <CRow className=\"\">\r\n                <CCol md=\"6\" >\r\n                  <CForm>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={enableSave} value={name} type=\"text\" placeholder=\"Name\" disabled />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-envelope-closed\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={enableSave} value={email} type=\"text\" placeholder=\"E-mail\" disabled />\r\n                    </CInputGroup>\r\n\r\n                    { passwordChanged &&\r\n                      <CAlert color=\"success\" >{message}</CAlert>\r\n                    }\r\n                    { errorMessage !== '' &&\r\n                      <CAlert color=\"danger\" >{errorMessage}</CAlert>\r\n                    }\r\n\r\n                    { changePassword ?\r\n                      <div>\r\n                        <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                            <CInputGroupText>\r\n                              <CIcon name=\"cil-lock-locked\" />\r\n                            </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput onChange={(ev) => {setDifferentPassword(false);setNewPassword(ev.target.value)}} type=\"password\" placeholder=\"New Password\" maxLength={100} />\r\n                        </CInputGroup>\r\n                        <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                            <CInputGroupText>\r\n                              <CIcon name=\"cil-lock-locked\" />\r\n                            </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput onChange={(ev) => {setDifferentPassword(false);setNewPasswordConfirm(ev.target.value)}} type=\"password\" placeholder=\"Confirm New Password\" maxLength={100}  />\r\n                          { differentPassword &&\r\n                            <CLabel className={'text-danger mt-1 w-100'}>Please make sure your passwords match.</CLabel>\r\n                          }\r\n                        </CInputGroup>\r\n                        <CRow>\r\n                          <CCol xs=\"12\">\r\n                            <CButton onClick={saveNewPassword} color=\"primary\" className=\"px-4 mr-3\" disabled={newPassword==='' || changing}>Save new password</CButton>\r\n                            <CButton onClick={() => setChangePassword(false)} color=\"secondary\" className=\"px-4\" disabled={changing}>Cancel</CButton>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </div>\r\n                      :\r\n                      <CRow className={'mt-4'}>\r\n                        <CCol xs=\"12\">\r\n                          <CButton onClick={() => {setChangePassword(true); setPasswordChanged(false);} } color=\"primary\" className=\"px-4 mr-3\">Change Password</CButton>\r\n                        </CCol>\r\n                      </CRow>\r\n                    }\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\renovus\\falconer_ui_web\\src\\views\\pages\\client\\settings.js",["1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CButton,\r\n  CCardGroup,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CAlert,\r\n  CLabel,\r\n  CSelect,\r\n  CRow,\r\n  CSpinner\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport { setCookie } from 'src/helpers/sessionCookie.js'\r\n\r\n\r\nconst Settings = () => {\r\n  \r\n  const [loading, setLoading] = useState(false);\r\n  const [estimations, setEstimations] = useState([]);\r\n  const [estimationsLoaded, setEstimationsLoaded] = useState(false);\r\n  const [fiscalYearEndMonth, setFiscalYearEndMonth] = useState(1);\r\n  const [neighbors, setNeighbors] = useState([]);\r\n  const [neighborsLoaded, setNeighborsLoaded] = useState(false);\r\n  const [clientPreferencesChanged1, setClientPreferencesChanged1] = useState(false);\r\n  const [clientPreferencesChanged2, setClientPreferencesChanged2] = useState(false);\r\n  const [clientPreferencesChanged3, setClientPreferencesChanged3] = useState(false);\r\n  const [clientPreferencesChanged, setClientPreferencesChanged] = useState(false);\r\n  const [clientPreferencesSaved, setClientPreferencesSaved] = useState(false);\r\n  const [clientResponse, setClientResponse] = useState(null);\r\n  \r\n  \r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n    fetchEstimations();\r\n    fetchNeighbors();\r\n  }, []);\r\n\r\n\r\n  const loadUser = () => {\r\n\r\n    setLoading(true);\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/clients/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setClientResponse(response)\r\n        response.settings.forEach(setting => {\r\n          if (setting.name === \"fiscalYearEndMonth\") {\r\n            setFiscalYearEndMonth(setting.value)\r\n            setCookie('fiscalYearEndMonth',setting.value)\r\n          }\r\n        });\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const fetchEstimations = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/estimations',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!estimationsLoaded) {\r\n          setEstimations(response);\r\n          setEstimationsLoaded(true);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const fetchNeighbors = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/generators/neighbors',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!neighborsLoaded) {\r\n          const neighbors = response.filter(park => park.generators != undefined).map(park => { \r\n            return {id:park.id, name:park.name, generators: park.generators.map(gen => { return {id: gen.id, code: gen.code, neighbors: gen.neighbors?gen.neighbors:[] }  })}\r\n          })\r\n          setNeighbors(neighbors);\r\n          setNeighborsLoaded(true);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const saveClientPreferences = () => {\r\n    if (clientPreferencesChanged1) savePreferences1()\r\n    if (clientPreferencesChanged2) savePreferences2()\r\n    if (clientPreferencesChanged3) savePreferences3()\r\n  }\r\n\r\n  const savePreferences1 = () => {\r\n    \r\n    setClientPreferencesChanged1(false)\r\n    setClientPreferencesChanged(false)\r\n\r\n    const body = estimations.map((park) => ({id:park.id,estimations:park.estimations}))\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/estimations',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }     \r\n        \r\n        setClientPreferencesSaved(true)\r\n\r\n          \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const savePreferences2 = () => {\r\n    \r\n    setClientPreferencesChanged2(false)\r\n    setClientPreferencesChanged(false)\r\n\r\n    const body = {}\r\n    body.settings = [\r\n      {\r\n        \"name\":\"fiscalYearEndMonth\",\r\n        \"value\":fiscalYearEndMonth\r\n      }\r\n    ]\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/clients/current',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }     \r\n        \r\n        setClientPreferencesSaved(true)\r\n        setCookie('fiscalYearEndMonth',fiscalYearEndMonth)\r\n          \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const savePreferences3 = () => {\r\n    \r\n    setClientPreferencesChanged3(false)\r\n    setClientPreferencesChanged(false)\r\n\r\n    const body = neighbors\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/generators/neighbors',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }     \r\n        \r\n        setClientPreferencesSaved(true)\r\n          \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const setEstimationTitle = (park_id,est_index,new_title) => {\r\n    setClientPreferencesChanged1(true);\r\n    setClientPreferencesChanged(true);\r\n    const new_estimations = estimations.map((park) => {\r\n      if (park.id == park_id) {\r\n        park.estimations.map((estimation,e) => {\r\n          if (e==est_index) {\r\n            estimation.title = new_title\r\n          }\r\n          return estimation\r\n        })\r\n      } \r\n      return park\r\n    })\r\n    setEstimations(new_estimations)\r\n  }\r\n\r\n  const setEstimationValue = (park_id,est_index,month,new_value) => {\r\n    setClientPreferencesChanged1(true);\r\n    setClientPreferencesChanged(true);\r\n    const new_estimations = estimations.map((park) => {\r\n      if (park.id == park_id) {\r\n        park.estimations.map((estimation,e) => {\r\n          if (e==est_index) {\r\n            estimation[\"month\"+(month<10?\"0\"+month:month)] = new_value\r\n          }\r\n          return estimation\r\n        })\r\n      } \r\n      return park\r\n    })\r\n    setEstimations(new_estimations)\r\n  }\r\n\r\n  const setNeighbor = (park_id,gen_id,index,new_value) => {\r\n    setClientPreferencesChanged3(true);\r\n    setClientPreferencesChanged(true);\r\n    const new_neighbors = neighbors.map((park) => {\r\n      if (park.id == park_id) {\r\n        park.generators.map((gen) => {\r\n          if (gen.id == gen_id) {\r\n            gen.neighbors[index] = new_value\r\n          }\r\n          return gen\r\n        })\r\n      }\r\n      return park\r\n    })\r\n    setNeighbors(new_neighbors)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard sm=\"7\" className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                  <h3 id=\"settings\" className=\"card-title mb-0\">\r\n                    Client Settings\r\n                  </h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n      \r\n            <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n\r\n              <CRow className={'pb-1 mb-4 border-bottom'}>\r\n                <CCol>\r\n                  <h5 id=\"settings\" className=\"card-title mb-0 row\">\r\n                    Estimated MWh\r\n                  </h5>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow className=\"mb-4\">\r\n                <CCol md=\"8\" >\r\n                  { estimationsLoaded ?\r\n                  <CForm>\r\n                    <CFormGroup>\r\n                      <table className='table-striped table table-sm table-align-middle'>\r\n                        <tbody>\r\n                        <tr className='' >\r\n                          <td className='border-right bg-white border-top-0'></td>\r\n                          {estimations.map((park) => (\r\n                            <td colspan=\"2\" className='pl-3 border-right'><h5 className='my-1'>{park.name}</h5></td>\r\n                          ))}\r\n                        </tr>\r\n                        <tr className='border-bottom' >\r\n                          <td className='border-right bg-white border-top-0'></td>\r\n                          {estimations.map((park) => (\r\n                            park.estimations.map((est,i) => (\r\n                              <td className='pl-3 border-right'>Estimate {i+1}</td>\r\n                            ))\r\n                            \r\n                          ))}\r\n                        </tr>\r\n                        <tr>\r\n                          <td className='border-right border-left border-bottom pl-2 py-0' style={{minWidth: \"120px\"}}><h6 className='m-0'>Estimate title</h6></td>\r\n                          {estimations.map((park) => (\r\n                            park.estimations.map((est,e) => (\r\n                              <td className='border-right border-bottom py-0'><CInput value={est.title} className=\"border-0 bg-transparent focus-shadow-0\" onChange={(ev) => {setEstimationTitle(park.id,e,ev.target.value);}}/></td>        \r\n                            ))\r\n                          ))}\r\n                        </tr>\r\n                        { [1,2,3,4,5,6,7,8,9,10,11,12].map((m) => (\r\n                          <tr>\r\n                            <td className='border-right border-left border-bottom pl-2 py-0'><h6 className='m-0'>{months[m-1]}</h6></td>\r\n                            {estimations.map((park) => (\r\n                              park.estimations.map((est,e) => {\r\n                                const estArray =  Object.values(est)\r\n                                const val = estArray[m]\r\n                                return <td className='border-right border-bottom py-0'><CInput type={'number'} name={park.id+\"-\"+'month'+(m<10?\"0\"+m:m)+\"-\"+e+1} value={val} className=\"border-0 bg-transparent focus-shadow-0\" onChange={(ev) => {setEstimationValue(park.id,e,m,ev.target.value);}}/></td> \r\n                              }\r\n                                       \r\n                              )\r\n                            ))}\r\n                          </tr>\r\n                        ))}\r\n                        </tbody>\r\n                        \r\n                      </table>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                  : \r\n                    <div className='text-center'>\r\n                      <CSpinner \r\n                        className=\"loading-spinner\"\r\n                        color='#321fdb'\r\n                      />\r\n                    </div>\r\n                  }\r\n                </CCol>\r\n              </CRow>\r\n\r\n              <CRow className={'pb-2 mb-3 border-bottom'}>\r\n                <CCol sm=\"6\">\r\n                  <h5 id=\"settings\" className=\"card-title mb-0 row\">\r\n                    Fiscal Year settings\r\n                  </h5>\r\n                </CCol>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-4\">\r\n                <CCol md=\"6\" >\r\n                  <CForm>\r\n                    <CFormGroup>\r\n                      <CInputGroup>\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText >\r\n                          Select Fiscal Year End\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CSelect custom value={fiscalYearEndMonth} onChange={(ev) => { setClientPreferencesChanged2(true);setClientPreferencesChanged(true); setFiscalYearEndMonth(ev.target.value)}} name=\"fiscalYearEnd\" id=\"fiscalYearEnd\" className={\"input-md\"} >\r\n                          <option value=\"1\">January</option>\r\n                          <option value=\"2\">February</option>\r\n                          <option value=\"3\">March</option>\r\n                          <option value=\"4\">April</option>\r\n                          <option value=\"5\">May</option>\r\n                          <option value=\"6\">June</option>\r\n                          <option value=\"7\">July</option>\r\n                          <option value=\"8\">August</option>\r\n                          <option value=\"9\">September</option>\r\n                          <option value=\"10\">October</option>\r\n                          <option value=\"11\">November</option>\r\n                          <option value=\"12\">December</option>\r\n                        </CSelect>\r\n                      </CInputGroup>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n\r\n\r\n              <CRow className={'pb-1 mb-4 border-bottom'}>\r\n                <CCol>\r\n                  <h5 id=\"settings\" className=\"card-title mb-0 row\">\r\n                    Neighbor Turbines\r\n                  </h5>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow className=\"mb-4\">\r\n                <CCol >\r\n                  { neighborsLoaded ?\r\n                  <CForm>\r\n                    <CFormGroup>\r\n                    <CRow className={'pb-1 mb-4 border-bottom'}>\r\n                    {neighbors.map((park,indexPark) => (\r\n                      <CCol md=\"4\" >\r\n                          <h5 id=\"settings\" className=\"card-title\">\r\n                            {park.name}\r\n                          </h5>\r\n                          <table className='table-striped table table-sm table-align-middle'>\r\n                            <tbody>\r\n                            <tr className='' >\r\n                              <td className='px-2 border'>Turbine</td>\r\n                              <td className='px-2 border'>Primary Neighbor</td>\r\n                              <td className='px-2 border'>Secondary Neighbor</td>\r\n                            </tr>\r\n\r\n                            {park.generators.map((gen) => (\r\n                              <tr>\r\n                                <td className='border-right border py-0'>{gen.code}</td>        \r\n                                <td className='border-right border py-0'>\r\n                                  <CSelect custom value={gen.neighbors!=null&&gen.neighbors.length>0?gen.neighbors[0]:''} onChange={(ev) => { setClientPreferencesChanged3(true);setClientPreferencesChanged(true); setNeighbor(park.id,gen.id,0,ev.target.value)}} className={\"border-0 bg-transparent focus-shadow-0\"} >\r\n                                    <option value=\"\"></option>\r\n                                    {park.generators.filter(genSelect => genSelect.id!=gen.id && genSelect.id!=gen.neighbors[1])\r\n                                    .map((genSelect) => (\r\n                                        <option key={park.id+\"-\"+genSelect.id} value={genSelect.id}>{genSelect.code}</option>\r\n                                    ))}\r\n                                  </CSelect>\r\n                                </td>        \r\n                                <td className='border-right border py-0'>\r\n                                  { gen.neighbors[0] != null && gen.neighbors[0] != \"\" &&\r\n                                    <CSelect custom value={gen.neighbors!=null&&gen.neighbors.length>0?gen.neighbors[1]:''} onChange={(ev) => { setClientPreferencesChanged3(true);setClientPreferencesChanged(true); setNeighbor(park.id,gen.id,1,ev.target.value)}} className={\"border-0 bg-transparent focus-shadow-0\"} >\r\n                                      <option value=\"\"></option>\r\n                                      {park.generators.filter((genSelect,indexGen) => genSelect.id!=gen.id && genSelect.id!=gen.neighbors[0])\r\n                                      .map((genSelect) => (\r\n                                          <option key={park.id+\"-\"+genSelect.id} value={genSelect.id}>{genSelect.code}</option>\r\n                                      ))}\r\n                                    </CSelect>\r\n                                  }\r\n                                </td>        \r\n                              </tr>\r\n                            ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </CCol>\r\n                      ))}\r\n                      </CRow>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                  : \r\n                    <div className='text-center'>\r\n                      <CSpinner \r\n                        className=\"loading-spinner\"\r\n                        color='#321fdb'\r\n                      />\r\n                    </div>\r\n                  }\r\n                </CCol>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-4\">\r\n                <CCol>\r\n                  <CForm>\r\n                    <CFormGroup className={\"mt-4\"}>\r\n                      <CButton onClick={() => {saveClientPreferences();} } color=\"primary\" className=\"px-4 mr-3\" disabled={!clientPreferencesChanged}>Save Preferences</CButton>\r\n                      { clientPreferencesSaved && !clientPreferencesChanged &&\r\n                        <div className=\"text-success d-inline-block\" style={{fontWeight:\"500\"}}>Saved!</div> \r\n                      }\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n\r\n\r\n            </CCardBody>\r\n\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\index.js",[],["1309","1310"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\store.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\App.js",["1311"],"import {getCookie} from './helpers/sessionCookie.js'\r\nimport React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport SessionTimeout from './helpers/SessionTimeout';\r\nimport './scss/style.scss';\r\nimport { useTranslation} from 'react-i18next';\r\n\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\n\r\n// Containers\r\nconst TheLayout = React.lazy(() => import('./containers/TheLayout'));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/pages/login/Login'));\r\nconst RequestPasswordReset = React.lazy(() => import('./views/pages/login/RequestPasswordReset'));\r\nconst ResetPassword = React.lazy(() => import('./views/pages/login/ResetPassword'));\r\nconst Register = React.lazy(() => import('./views/pages/register/Register'));\r\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\r\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\r\n// const PowerCurve = React.lazy(() => import('./views/pages/power-curve/power-curve'));\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n      this.state ={\r\n        authenticated: getCookie('name')!==false && getCookie('name')!==''\r\n      }\r\n    }\r\n\r\n    \r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      this.state.authenticated ?\r\n\r\n      <HashRouter>\r\n          <React.Suspense fallback={loading}>\r\n            <Switch>\r\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\r\n              <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} />\r\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\r\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />\r\n\r\n              \r\n            </Switch>\r\n          </React.Suspense>\r\n          <SessionTimeout />\r\n      </HashRouter>\r\n\r\n      :\r\n\r\n      <HashRouter>\r\n          <React.Suspense fallback={loading}>\r\n            <Switch>\r\n              <Route path=\"/requestPasswordReset\" name=\"Request password reset\" render={props => <RequestPasswordReset {...props}/>} />\r\n              <Route path=\"/resetPassword\" name=\"Reset password\" render={props => <ResetPassword {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props => <Login {...props}/>} />\r\n\r\n              \r\n            </Switch>\r\n          </React.Suspense>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\serviceWorker.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\polyfill.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\sessionCookie.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\SessionTimeout.js",["1312","1313","1314"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheLayout.js",["1315","1316","1317"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  TheContent,\r\n  TheSidebar,\r\n  TheFooter,\r\n  TheHeader\r\n} from './index'\r\nimport {getCookie} from '../helpers/sessionCookie.js'\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n\r\nconst TheLayout = () => {\r\n\r\n  const location = useLocation()\r\n  // const parkType = location.pathname == '/modules/solar-battery'? 'solar' : getCookie('parkType')\r\n  const parkType = getCookie('parkType')\r\n\r\n  return (\r\n    <div className={\"c-app solar c-default-layout \"+parkType}>\r\n      <TheSidebar/>\r\n      <div className=\"c-wrapper\">\r\n        <TheHeader/>\r\n        <div className=\"c-body\">\r\n          <TheContent/>\r\n        </div>\r\n        <TheFooter/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TheLayout\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\RequestPasswordReset.js",["1318"],"import { Redirect } from \"react-router-dom\";\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport React, {useState} from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CLabel,\r\n  CLink,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst RequestPasswordReset = () => {\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const {t, i18n} = useTranslation()\r\n  \r\n  const authenticated = getCookie('name')!==false && getCookie('name')!=='';\r\n\r\n\r\n  const sendPasswordResetRequest = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/reset/'+email,\r\n      'method' : 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.received) {          \r\n          setEmailSent(true);\r\n          setMessage(\"An e-mail has been sent with the instruction to set your new password. If you don't receive it in the next minute try re-sending the request.\");\r\n        } else {\r\n          alert('An error occurred!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('An error occurred!') }\r\n    )\r\n  }\r\n\r\n  const resendRequest = () => {\r\n    setEmailSent(false);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />\r\n      \r\n    :\r\n    \r\n    <div className=\"bg-gradient-custom c-app solar c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"6\">\r\n            <CCard className=\"p-4 border-light shadow\">\r\n              <CCardBody>\r\n                {!emailSent ?\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">{t('Reset Password')}</h1>\r\n                    <p className=\"text-muted\">{t('Enter your e-mail address')}</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-envelope-closed\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setEmail(ev.target.value)}} value={email} type=\"text\" placeholder={t('E-mail')} autoComplete=\"username\" />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"12\">\r\n                        <CButton onClick={sendPasswordResetRequest} color=\"primary\" className=\"px-4 mr-3\">{t('Send')}</CButton>\r\n                        <CLink className=\"px-3 mr-3 text-dark-blue\" to=\"/\" >{t('Back to Login')}</CLink>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                  :\r\n                  <div className=\"text-center\">\r\n                    <CLabel className='text-dark mb-3'>{message}</CLabel>\r\n                    <CButton onClick={resendRequest} color=\"primary\" className=\"px-4 mr-3\">{t('Re-send email')}</CButton>\r\n                    <CLink className=\"pt-2 mr-3 text-dark-blue d-block\" to=\"/\" >{t('Back to Login')}</CLink>\r\n                  </div>\r\n                }\r\n\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default RequestPasswordReset\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\page404\\Page404.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\ResetPassword.js",["1319","1320"],"import { \r\n  Redirect,\r\n  useLocation } from \"react-router-dom\";\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {getCookie} from '../../../helpers/sessionCookie.js'\r\nimport { useTranslation } from 'react-i18next'\r\nimport React, {useState} from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\n\r\nconst ResetPassword = () => {\r\n\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [newPasswordConfirm, setNewPasswordConfirm] = useState(false);\r\n  const [changed, setChanged] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const {t, i18n} = useTranslation()\r\n  \r\n  const authenticated = getCookie('name')!==false && getCookie('name')!=='';\r\n\r\n  const useQuery = () => {\r\n    const { search } = useLocation();\r\n    return React.useMemo(() => new URLSearchParams(search), [search]);\r\n  }\r\n\r\n  const query = useQuery();\r\n\r\n  const sendResetPassword = () => {\r\n\r\n    const reset_token = query.get(\"reset_token\")\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/reset',\r\n      'method' : 'POST',\r\n      'body': {\r\n          \"id\": reset_token,\r\n          \"newPassword\": newPassword,\r\n          \"newPasswordConfirm\": newPasswordConfirm\r\n      },\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.changed) {          \r\n          \r\n          setChanged(true);\r\n          setMessage('Your password was updated')\r\n\r\n          // window.location.reload();\r\n        } else {\r\n          alert('An error occurred!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('An error occurred!') }\r\n    )\r\n  }\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />:\r\n\r\n  \r\n    \r\n    <div className=\"bg-gradient-custom c-app solar c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={changed?\"4\":\"5\"}>\r\n            <CCard className=\"p-4 border-light shadow\">\r\n              <CCardBody>\r\n                {!changed ?\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">Reset Password</h1>\r\n                    <p className=\"text-muted\">Enter your e-mail address</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setNewPassword(ev.target.value)}} type=\"password\" placeholder=\"New Password\" maxLength={100} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setNewPasswordConfirm(ev.target.value)}} type=\"password\" placeholder=\"Confirm New Password\" maxLength={100}  />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"12\">\r\n                        <CButton onClick={sendResetPassword} color=\"primary\" className=\"px-4 mr-3\">Send</CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                  :\r\n\r\n                  <div>\r\n                    <CRow className=\"justify-content-center text-dark text-center\">\r\n                      <CCol>\r\n                        <h5>{message}</h5>\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"text-center\">\r\n                      <CCol>\r\n                        <CButton onClick={()=> window.open(\"/\",\"_top\")} color=\"primary\" className=\"px-4 mt-3\">Go to Login</CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </div>\r\n\r\n                }\r\n\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default ResetPassword\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\page500\\Page500.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\register\\Register.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\login\\Login.js",["1321","1322","1323"],"import { Redirect } from \"react-router-dom\";\r\n\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {setCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {getDateLabel} from '../../../helpers/utils.js'\r\nimport i18n from '../../../helpers/i18n.js'\r\nimport React, {useState} from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CLink,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport logo from '../../../assets/logo-solarec.png'\r\nimport LanguageSwitcher from \"src/views/others/LanguageSwitcher.js\"\r\n\r\nconst Login = () => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n  const {t, i18n} = useTranslation()\r\n\r\n  const authenticateUser = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate',\r\n      'method' : 'POST',\r\n      'body': {\r\n          \"email\": username,\r\n          \"password\": password\r\n      },\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        if (response.authenticated) {\r\n          console.log('response~~~~~~',response)\r\n          \r\n          setCookie('name', response.name)\r\n          setCookie('user', response.id && response.id)\r\n          setCookie('client', response.client.id && response.client.id)\r\n          setCookie('location', response.location.id)\r\n          setCookie('parkType', response.location.type)\r\n          // let functionalities = [...response.functionalities, {'url':'/modules/power-curve/benchmark'}, {'url':'/modules/power-curve/analysis'}];\r\n          // setCookie('functionalities', JSON.stringify(functionalities.map((f) => f.url)))\r\n          setCookie('functionalities', JSON.stringify(response.functionalities.map((f) => f.url)))\r\n          setCookie('dashboard', response.functionalities[0].url)\r\n          \r\n          setAuthenticated(true);\r\n          window.location.reload();\r\n        } else {\r\n          alert('wrong user!');\r\n        }\r\n\r\n      }\r\n    ).catch(\r\n      e=> { alert('error!') }\r\n    )\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n\r\n    authenticated ?\r\n\r\n      <Redirect to={'/'} />:\r\n\r\n  \r\n    \r\n    <div className=\"bg-gradient-custom c-app solar c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"8\">\r\n            <CCardGroup className=\"shadow\">\r\n              <CCard className=\"p-4 border-light\">\r\n                <CCardBody>\r\n                  <CForm>\r\n                    <h1 className=\"text-dark-blue\">{t('Login')}</h1>\r\n                    <p className=\"text-muted\">{t('Sign In to your account')}</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setUsername(ev.target.value)}} value={username} type=\"text\" placeholder={t('E-mail')} autoComplete=\"username\" />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={(ev) => {setPassword(ev.target.value)}} type=\"password\" placeholder={t('Password')} autoComplete=\"current-password\" />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs=\"6\">\r\n                        <CButton onClick={authenticateUser} color=\"primary\" className=\"px-4 mr-3\">{t('Login')}</CButton>\r\n                        \r\n                      </CCol>\r\n                      <CCol xs=\"6\" className=\"text-right d-flex justify-content-end align-items-center\">\r\n                        <CLink to=\"/requestPasswordReset\" className=\"text-dark-blue\">{t('Reset password?')}</CLink>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n              <CCard className=\"text-dark bg-login-right border-light py-5 d-md-down-none\" style={{ width: '44%' }}>\r\n                <CCardBody className=\"text-center\">\r\n                  <div>\r\n                    <img src={logo} width=\"250\" alt=\"Solarec\" class=\"mb-3\"/>\r\n                    <p>{t('Please login with your e-mail and password.')}</p>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <LanguageSwitcher/>\r\n      </CContainer>\r\n    </div>\r\n    \r\n  )\r\n\r\n\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\DataAPI.js",["1324","1325","1326","1327","1328"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\logo-negative.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\logo.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\assets\\icons\\sygnet.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheSidebar.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownTasks.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdown.js",["1329"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheFooter.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownNotif.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeader.js",["1330","1331"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n// import { useTranslation } from 'react-i18next'\r\nimport i18n from '../helpers/i18n'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {setCookie, getCookie} from '../helpers/sessionCookie.js'\r\nimport {\r\n  CHeader,\r\n  CToggler,\r\n  CHeaderBrand,\r\n  CHeaderNav,\r\n  CHeaderNavItem,\r\n  CHeaderNavLink,\r\n  CSubheader,\r\n  CBreadcrumbRouter,\r\n  CLink,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { freeSet } from '@coreui/icons';\r\n\r\nimport DataAPI from '../helpers/DataAPI.js'\r\n// import i18next from 'i18next'\r\n\r\n// routes config\r\nimport routes from '../routes'\r\n\r\nimport {\r\n  TheHeaderDropdown,\r\n  TheHeaderDropdownMssg,\r\n  TheHeaderDropdownNotif,\r\n  TheHeaderDropdownTasks\r\n}  from './index'\r\n\r\nconst TheHeader = () => {\r\n  const dispatch = useDispatch()\r\n  const sidebarShow = useSelector(state => state.sidebarShow)\r\n  // i18next.changeLanguage(getCookie('language'))\r\n  // const { t } = useTranslation()\r\n  const [clients, setClients] = useState([]);\r\n  const [clientsLoaded, setClientsLoaded] = useState(false);\r\n  const [parks, setParks] = useState([]);\r\n  const [parksLoaded, setParksLoaded] = useState(false);\r\n  const [modalContact, setModalContact] = useState(false);\r\n  const [clientSettingPermission, setClientSettingPermission] = useState(false);\r\n  const [userSettingPermission, setUserSettingPermission] = useState(false);\r\n  const [dashboard, setDashboard] = useState('/overview');\r\n\r\n  let history = useHistory();\r\n  const location = useLocation();\r\n  const noParkPages = [];\r\n\r\n  // const getLanguage = () => i18next.language || window.localStorage.i18nextLng\r\n  \r\n\r\n  useEffect(() => {\r\n    userPermissions()\r\n    fetchClients()\r\n    if(!noParkPages.includes(location.pathname))\r\n      fetchParks()\r\n  },[]);\r\n \r\n\r\n  const userPermissions = () => {\r\n\r\n    const functionalities = JSON.parse(getCookie('functionalities'));\r\n\r\n    if(functionalities.indexOf('/client/settings') > -1){\r\n      setClientSettingPermission(true)\r\n    }\r\n    if(functionalities.indexOf('/user/settings') > -1){\r\n      setUserSettingPermission(true)\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const updateClient = (clientId) => {\r\n\r\n    DataAPI({\r\n      'endpoint': `security/authenticate/${clientId}`,\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        console.log(response)\r\n        \r\n        setCookie('client', clientId)\r\n        setCookie('clientName', response.client.name)\r\n        setCookie('location', response.location.id)\r\n        setCookie('parkType', response.location.type)\r\n        setCookie('parkName', response.location.name)\r\n        // let functionalities = [...response.functionalities, {'url':'/modules/power-curve/benchmark'}, {'url':'/modules/power-curve/analysis'}];\r\n        // setCookie('functionalities', JSON.stringify(functionalities.map((f) => f.url)))\r\n        setCookie('functionalities', JSON.stringify(response.functionalities.map((f) => f.url)))\r\n        setCookie('dashboard', response.functionalities[0].url)\r\n        setDashboard(response.functionalities[0].url)\r\n        \r\n        window.location.reload();\r\n\r\n      }\r\n    ).catch(\r\n      response => {\r\n        console.error(response)\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const updateLocation = (locationId) => {\r\n\r\n    console.log(`Updating location to: security/authenticate/location/${locationId}`)\r\n\r\n    DataAPI({\r\n      'endpoint': `security/authenticate/location/${locationId}`,\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        console.log(response)\r\n        \r\n        setCookie('location', locationId)\r\n        setCookie('parkType', response.location.type)\r\n        setCookie('parkName', response.location.name)\r\n        // let functionalities = [...response.functionalities, {'url':'/modules/power-curve/benchmark'}, {'url':'/modules/power-curve/analysis'}];\r\n        // setCookie('functionalities', JSON.stringify(functionalities.map((f) => f.url)))\r\n        setCookie('functionalities', JSON.stringify(response.functionalities.map((f) => f.url)))\r\n        setCookie('dashboard', response.functionalities[0].url)\r\n        setDashboard(response.functionalities[0].url)\r\n        \r\n        window.location.reload();\r\n\r\n      }\r\n    ).catch(\r\n      response => {\r\n        console.error(response)\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const fetchClients = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!clientsLoaded) {\r\n          setClients(response);\r\n          setClientsLoaded(true);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const fetchParks = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!parksLoaded) {\r\n          setParks(response);\r\n          setParksLoaded(true);\r\n          if( getCookie('parkType') == '')\r\n            setCookie('parkType',response[0].type)\r\n          setCookie('parkName', response[0].name);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const toggleContact = ()=>{\r\n    setModalContact(!modalContact);\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    const val = [true, 'responsive'].includes(sidebarShow) ? false : 'responsive'\r\n    dispatch({type: 'set', sidebarShow: val})\r\n  }\r\n\r\n  const toggleSidebarMobile = () => {\r\n    const val = [false, 'responsive'].includes(sidebarShow) ? true : 'responsive'\r\n    dispatch({type: 'set', sidebarShow: val})\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <CHeader withSubheader>\r\n      <CToggler\r\n        inHeader\r\n        className=\"ml-md-3 d-lg-none\"\r\n        onClick={toggleSidebarMobile}\r\n      />\r\n      <CToggler\r\n        inHeader\r\n        className=\"ml-3 d-md-down-none\"\r\n        onClick={toggleSidebar}\r\n      />\r\n      <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\"></CHeaderBrand>\r\n\r\n\r\n\r\n      {true && <CHeaderNav className=\"d-md-down-none mr-auto\">\r\n        <CHeaderNavItem className=\"px-3\" >\r\n          {false && <CHeaderNavLink to={dashboard}>Dashboard</CHeaderNavLink>}\r\n        </CHeaderNavItem>\r\n        <CHeaderNavItem className=\"px-3\">\r\n        </CHeaderNavItem>\r\n      </CHeaderNav>}\r\n\r\n      <CHeaderNav className=\"px-md-3\">\r\n\r\n\r\n\r\n      {/* { getCookie('name') }&nbsp;<a onClick={(ev) => { setCookie('name', ''); ev.preventDefault(); ev.stopPropagation(); window.location.reload(); return false;   }} href=\"#\">Logout</a> */}\r\n\r\n        <CSelect value={getCookie('client')} onChange={(ev) => { updateClient(ev.target.value); }} custom name=\"client\" id=\"client\" className=\"w-auto mx-2 mr-3\">\r\n          {clients && clients.map((client) => (\r\n            <option key={client.id} value={client.id}>\r\n              {client.name}\r\n            </option>\r\n          ))}\r\n        </CSelect>\r\n\r\n        <CDropdown>\r\n          <CDropdownToggle className={'btn-light'}>\r\n            <CIcon name={'cilUser'} className={'mb-1 mr-1'}/> {getCookie('name')}&nbsp;\r\n          </CDropdownToggle>\r\n          <CDropdownMenu className=\"p-0\" placement=\"bottom-end\">\r\n            { clientSettingPermission &&\r\n              <CDropdownItem onClick={() => history.push(\"/client/settings\")}>\r\n                <CIcon name={'cilSettings'} className={'mr-2'}/>\r\n                {i18n.t('Settings')}\r\n              </CDropdownItem>\r\n            }\r\n            { userSettingPermission &&\r\n              <CDropdownItem onClick={() => history.push(\"/user/settings\")}>\r\n                <CIcon name={'cilUser'} className={'mr-2'}/>\r\n                {i18n.t('User')}\r\n              </CDropdownItem>\r\n            }\r\n            <CDropdownItem onClick={toggleContact}>\r\n              <CIcon content={freeSet.cilContact} className={'mr-2'}/>\r\n              {i18n.t('Contact us')}\r\n            </CDropdownItem>\r\n            <CDropdownItem onClick={(ev) => { setCookie('name', ''); ev.preventDefault(); ev.stopPropagation(); window.location.reload(); return false;  }}>\r\n              <CIcon content={freeSet.cilAccountLogout} className={'mr-2'}/>\r\n              {i18n.t('Logout')}\r\n            </CDropdownItem>\r\n          \r\n          </CDropdownMenu>\r\n        </CDropdown>\r\n\r\n        <CModal\r\n          show={modalContact}\r\n          onClose={toggleContact}\r\n          size='sm'\r\n        >\r\n          {/* <CModalHeader closeButton>Contact us</CModalHeader> */}\r\n          <CModalBody>\r\n            Contact us at <a href='mailto:support@renovus.tech'>support@renovus.tech</a>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={toggleContact}>{i18n.t('Close')}</CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n\r\n\r\n        {false && <><TheHeaderDropdownNotif/>\r\n        <TheHeaderDropdownTasks/>\r\n        <TheHeaderDropdownMssg/></>}\r\n        <TheHeaderDropdown/>\r\n      </CHeaderNav>\r\n\r\n    {/* { location.pathname != '/modules/solar-battery' &&   */}\r\n      <CSubheader className=\"px-3 justify-content-between\">\r\n        <CBreadcrumbRouter\r\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\r\n          routes={routes}\r\n        />\r\n          {false && <div className=\"d-md-down-none mfe-2 c-subheader-nav\">\r\n                    <CLink className=\"c-subheader-nav-link\"href=\"#\">\r\n                      <CIcon name=\"cil-speech\" alt={i18n.t('Settings')} />\r\n                    </CLink>\r\n                    <CLink\r\n                      className=\"c-subheader-nav-link\"\r\n                      aria-current=\"page\"\r\n                      to={dashboard}\r\n                    >\r\n                      <CIcon name=\"cil-graph\" alt={i18n.t('Dashboard')} />&nbsp;{i18n.t('Dashboard')}\r\n                    </CLink>\r\n                    <CLink className=\"c-subheader-nav-link\" href=\"#\">\r\n                      <CIcon name=\"cil-settings\" alt={i18n.t('Settings')} />&nbsp;{i18n.t('Settings')}\r\n                    </CLink>\r\n                    </div>\r\n                  }\r\n\r\n\r\n\r\n        { !noParkPages.includes(location.pathname) &&\r\n          <CRow className=\"flex-center\">\r\n            <CCol style={{whiteSpace: 'nowrap'}}>{i18n.t('Park')}&nbsp;\r\n            <CSelect value={getCookie('location')} onChange={(ev) => { updateLocation(ev.target.value); }} custom name=\"park\" id=\"park\" className=\"w-auto ml-1 ml-sm-2 mr-md-3\">\r\n              {parks && parks.map((park) => (\r\n                <option key={park.id} value={park.id}>\r\n                  {park.name}\r\n                </option>\r\n              ))}\r\n            </CSelect>\r\n            </CCol>\r\n          </CRow>\r\n        }\r\n\r\n      </CSubheader>\r\n    {/* } */}\r\n\r\n    </CHeader>\r\n  )\r\n}\r\n\r\nexport default TheHeader\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheContent.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\TheHeaderDropdownMssg.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\containers\\_nav.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\routes.js",["1332"],"import React from 'react';\r\nimport { getCookie } from './helpers/sessionCookie';\r\nimport i18n from './helpers/i18n'\r\n\r\nconst Toaster = React.lazy(() => import('./views/notifications/toaster/Toaster'));\r\nconst Tables = React.lazy(() => import('./views/base/tables/Tables'));\r\n\r\nconst Breadcrumbs = React.lazy(() => import('./views/base/breadcrumbs/Breadcrumbs'));\r\nconst Cards = React.lazy(() => import('./views/base/cards/Cards'));\r\n// const Carousels = React.lazy(() => import('./views/base/carousels/Carousels'));\r\nconst Collapses = React.lazy(() => import('./views/base/collapses/Collapses'));\r\nconst BasicForms = React.lazy(() => import('./views/base/forms/BasicForms'));\r\n\r\nconst Jumbotrons = React.lazy(() => import('./views/base/jumbotrons/Jumbotrons'));\r\nconst ListGroups = React.lazy(() => import('./views/base/list-groups/ListGroups'));\r\nconst Navbars = React.lazy(() => import('./views/base/navbars/Navbars'));\r\nconst Navs = React.lazy(() => import('./views/base/navs/Navs'));\r\nconst Paginations = React.lazy(() => import('./views/base/paginations/Pagnations'));\r\nconst Popovers = React.lazy(() => import('./views/base/popovers/Popovers'));\r\nconst ProgressBar = React.lazy(() => import('./views/base/progress-bar/ProgressBar'));\r\nconst Switches = React.lazy(() => import('./views/base/switches/Switches'));\r\n\r\nconst Tabs = React.lazy(() => import('./views/base/tabs/Tabs'));\r\nconst Tooltips = React.lazy(() => import('./views/base/tooltips/Tooltips'));\r\nconst BrandButtons = React.lazy(() => import('./views/buttons/brand-buttons/BrandButtons'));\r\nconst ButtonDropdowns = React.lazy(() => import('./views/buttons/button-dropdowns/ButtonDropdowns'));\r\nconst ButtonGroups = React.lazy(() => import('./views/buttons/button-groups/ButtonGroups'));\r\nconst Buttons = React.lazy(() => import('./views/buttons/buttons/Buttons'));\r\nconst Charts = React.lazy(() => import('./views/charts/Charts'));\r\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'));\r\nconst CoreUIIcons = React.lazy(() => import('./views/icons/coreui-icons/CoreUIIcons'));\r\nconst Flags = React.lazy(() => import('./views/icons/flags/Flags'));\r\nconst Brands = React.lazy(() => import('./views/icons/brands/Brands'));\r\nconst Alerts = React.lazy(() => import('./views/notifications/alerts/Alerts'));\r\nconst Badges = React.lazy(() => import('./views/notifications/badges/Badges'));\r\nconst Modals = React.lazy(() => import('./views/notifications/modals/Modals'));\r\nconst Colors = React.lazy(() => import('./views/theme/colors/Colors'));\r\nconst Typography = React.lazy(() => import('./views/theme/typography/Typography'));\r\nconst Widgets = React.lazy(() => import('./views/widgets/Widgets'));\r\nconst Users = React.lazy(() => import('./views/users/Users'));\r\nconst User = React.lazy(() => import('./views/users/User'));\r\nconst UserSettings = React.lazy(() => import('./views/pages/user/settings'));\r\nconst ClientSettings = React.lazy(() => import('./views/pages/client/settings'));\r\n\r\n// Solar\r\nconst Overview = React.lazy(() => import('./views/pages/energy/overview'));\r\nconst Performance = React.lazy(() => import('./views/pages/energy/performance'));\r\nconst Trends = React.lazy(() => import('./views/pages/energy/trends'));\r\nconst CertificatesOffsets = React.lazy(() => import('./views/pages/revenue/certificates-and-offsets'));\r\nconst Sales = React.lazy(() => import('./views/pages/revenue/sales'));\r\n\r\n\r\nlet routes = [\r\n  { path: '/', exact: true, name: 'Home' },\r\n  { path: '/dashboard', name: i18n.t('Overview'), component: Overview },\r\n  { path: '/theme', name: 'Theme', component: Colors, exact: true },\r\n  { path: '/theme/colors', name: 'Colors', component: Colors },\r\n  { path: '/theme/typography', name: 'Typography', component: Typography },\r\n  { path: '/base', name: 'Base', component: Cards, exact: true },\r\n  { path: '/base/breadcrumbs', name: 'Breadcrumbs', component: Breadcrumbs },\r\n  { path: '/base/cards', name: 'Cards', component: Cards },\r\n  // { path: '/base/carousels', name: 'Carousel', component: Carousels },\r\n  { path: '/base/collapses', name: 'Collapse', component: Collapses },\r\n  { path: '/base/forms', name: 'Forms', component: BasicForms },\r\n  { path: '/base/jumbotrons', name: 'Jumbotrons', component: Jumbotrons },\r\n  { path: '/base/list-groups', name: 'List Groups', component: ListGroups },\r\n  { path: '/base/navbars', name: 'Navbars', component: Navbars },\r\n  { path: '/base/navs', name: 'Navs', component: Navs },\r\n  { path: '/base/paginations', name: 'Paginations', component: Paginations },\r\n  { path: '/base/popovers', name: 'Popovers', component: Popovers },\r\n  { path: '/base/progress-bar', name: 'Progress Bar', component: ProgressBar },\r\n  { path: '/base/switches', name: 'Switches', component: Switches },\r\n  { path: '/base/tables', name: 'Tables', component: Tables },\r\n  { path: '/base/tabs', name: 'Tabs', component: Tabs },\r\n  { path: '/base/tooltips', name: 'Tooltips', component: Tooltips },\r\n  { path: '/buttons', name: 'Buttons', component: Buttons, exact: true },\r\n  { path: '/buttons/buttons', name: 'Buttons', component: Buttons },\r\n  { path: '/buttons/button-dropdowns', name: 'Dropdowns', component: ButtonDropdowns },\r\n  { path: '/buttons/button-groups', name: 'Button Groups', component: ButtonGroups },\r\n  { path: '/buttons/brand-buttons', name: 'Brand Buttons', component: BrandButtons },\r\n  { path: '/charts', name: 'Charts', component: Charts },\r\n  { path: '/icons', exact: true, name: 'Icons', component: CoreUIIcons },\r\n  { path: '/icons/coreui-icons', name: 'CoreUI Icons', component: CoreUIIcons },\r\n  { path: '/icons/flags', name: 'Flags', component: Flags },\r\n  { path: '/icons/brands', name: 'Brands', component: Brands },\r\n  { path: '/notifications', name: 'Notifications', component: Alerts, exact: true },\r\n  { path: '/notifications/alerts', name: 'Alerts', component: Alerts },\r\n  { path: '/notifications/badges', name: 'Badges', component: Badges },\r\n  { path: '/notifications/modals', name: 'Modals', component: Modals },\r\n  { path: '/notifications/toaster', name: 'Toaster', component: Toaster },\r\n  { path: '/widgets', name: 'Widgets', component: Widgets },\r\n  { path: '/users', exact: true,  name:  i18n.t('Users'), component: Users },\r\n  { path: '/users/:id', exact: true, name:  i18n.t('User Details'), component: User },\r\n  { path: '/user/settings', exact: true, name:  i18n.t('User Settings'), component: UserSettings },\r\n  { path: '/client/settings', exact: true, name:  i18n.t('Client Settings'), component: ClientSettings },\r\n]\r\nroutes = [...routes, \r\n  { path: '/modules/energy/overview', exact: true, name:  i18n.t('Overview'), component: Overview },\r\n  { path: '/modules/energy/trends', exact: true, name:  i18n.t('Trends'), component: Trends },\r\n  { path: '/modules/energy/performance', exact: true, name:  i18n.t('Performance'), component: Performance },\r\n  { path: '/modules/revenue/certificates-and-offsets', exact: true, name:  i18n.t('Certificates and Offsets'), component: CertificatesOffsets },\r\n  { path: '/modules/revenue/sales', exact: true, name:  i18n.t('Sales'), component: Sales },\r\n]\r\n\r\n\r\n\r\nconst functionalities = JSON.parse(getCookie('functionalities'))\r\n\r\n// const filteredRoutes = routes\r\n\r\nconst filteredRoutes = routes.filter(r => functionalities.indexOf(r.path) > -1 )\r\n\r\nexport default filteredRoutes;\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\revenue\\sales.js",["1333","1334","1335","1336","1337","1338","1339","1340","1341"],"import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n} from '@coreui/react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Sales = () => {\r\n  const { t, i18n } = useTranslation()\r\n  const [dateRange, setDateRange] = useState('y')\r\n  const [groupBy, setGroupBy] = useState('hour')\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false)\r\n  const [selectedGenerators, setSelectedGenerators] = useState([])\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false)\r\n  const [generators, setGenerators] = useState([])\r\n  const [generatorColors, setGeneratorColors] = useState([])\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false)\r\n  const [allSelected, setAllSelected] = useState(true)\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n\r\n  const fetchData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (period && period.split('--').length === 2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    body.generators = selectedGenerators;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'solar/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        setLoading(false);\r\n\r\n          const labels = responseData.data.map((rD, index) => {\r\n            const label = `${rD.from}`\r\n            return label\r\n          })\r\n\r\n          const graphData1 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData2 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n\r\n          if (allSelected) {\r\n\r\n            const datasetTotalACProductionMwh = {\r\n              label: 'Total AC Production',\r\n              yAxisID: 'yACProduction',\r\n              borderColor: '#0400ff',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n              order: 0,\r\n              type: 'line',\r\n              data: responseData.data.map( (x,i) => {\r\n                        return x.totalACProductionMwh;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(datasetTotalACProductionMwh)\r\n          }\r\n\r\n          responseData.data[0].genData.forEach((gen) => {\r\n            const datasetACProduction = {\r\n              label:  gen.code,\r\n              borderColor: generatorColors[gen.code],\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n              yAxisID: 'yACProduction',\r\n              data: responseData.data.map((rD, index) => {\r\n                return rD.genData.filter(rGen => rGen.code == gen.code).map((rGen, index2) => rGen.acProductionMwh)[0]\r\n              }),\r\n            };\r\n            graphData1.datasets.push(datasetACProduction);\r\n          });\r\n\r\n          const datasetIrradiance = {\r\n            label: 'Irradiance',\r\n            yAxisID: 'yIrradiance',\r\n            borderColor: 'red',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: responseData.data.map( (x,i) => {\r\n                    return x.totalIrradiationKwhM2;\r\n                  }),\r\n          }\r\n          graphData1.datasets.push(datasetIrradiance)\r\n\r\n          setLineChartOneData(graphData1)\r\n          setLineChartTwoData(graphData2)\r\n\r\n      });\r\n\r\n  }\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected.sort());\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const options =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n  }\r\n\r\n  const options1 = {\r\n    ...options,\r\n    scales: {\r\n      yACProduction: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        beginAtZero: false,\r\n      },\r\n      yIrradiance: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            let decimals = 3\r\n            let unit = ' MWh'\r\n            if (tooltipItem.dataset.label == 'Irradiance') {\r\n              decimals = 2\r\n              unit = ' Kwh/m2'\r\n            }\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,decimals) + unit;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const options2 =  {\r\n    ...options,\r\n    scales: {\r\n      yACProduction: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        beginAtZero: false,\r\n      },\r\n      yIrradiance: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            // let unit = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? ' kg/m3' : ' °C'\r\n            // let decimals = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? 2 : 1\r\n            // let label = tooltipItem.dataset.yAxisID === \"yAirDensity\" ? 'Air Density: ' : 'Temperature: '\r\n            // return label + round(tooltipItem.raw,decimals) + unit;\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,2) + ' Kwh/m2';\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n \r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Trends\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>{t('Period')}</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>{t('Select inverter')}:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  <CButton \r\n                    style={{backgroundColor:'#0400ff',color: 'white'}} \r\n                    className={(allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setAllSelected(!allSelected)}\r\n                    >\r\n                    ALL\r\n                  </CButton>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >{t('Submit')}</CButton>\r\n            </CCol>\r\n        </CRow>\r\n\r\n        { generatorsSelected ?\r\n\r\n          <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >{t('Production and Irradiance')}</h4>\r\n                    <div className='d-flex'>\r\n                      <div className=\"text-left\" style={{width: '50%'}}>MWh</div>\r\n                      <div className=\"text-right\" style={{width: '50%'}}>Kwh/m2</div>\r\n                    </div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options1}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n              {t('Select one or more inverters')}\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default Sales\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\revenue\\certificates-and-offsets.js",["1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\trends.js",["1355","1356","1357","1358","1359","1360"],"import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, round, colors} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n} from '@coreui/react'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Trends = () => {\r\n  const { t, i18n } = useTranslation()\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('hour');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [allSelected, setAllSelected] = useState(true);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n\r\n  const fetchData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    body.generators = selectedGenerators;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'solar/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        setLoading(false);\r\n\r\n          const labels = responseData.data.map((rD, index) => {\r\n            const label = `${rD.from}`\r\n            return label\r\n          })\r\n\r\n          const graphData1 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n\r\n          if (allSelected) {\r\n\r\n            const datasetTotalACProductionMwh = {\r\n              label: 'Total AC Production',\r\n              yAxisID: 'yACProduction',\r\n              borderColor: '#0400ff',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n              order: 0,\r\n              type: 'line',\r\n              data: responseData.data.map( (x,i) => {\r\n                        return x.totalACProductionMwh;\r\n                      }),\r\n            }\r\n            graphData1.datasets.push(datasetTotalACProductionMwh)\r\n          }\r\n\r\n          responseData.data[0].genData.forEach((gen) => {\r\n            const datasetACProduction = {\r\n              label:  gen.code,\r\n              borderColor: generatorColors[gen.code],\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n              yAxisID: 'yACProduction',\r\n              data: responseData.data.map((rD, index) => {\r\n                return rD.genData.filter(rGen => rGen.code == gen.code).map((rGen, index2) => rGen.acProductionMwh)[0]\r\n              }),\r\n            };\r\n            graphData1.datasets.push(datasetACProduction);\r\n          });\r\n\r\n          const datasetIrradiance = {\r\n            label: 'Irradiance',\r\n            yAxisID: 'yIrradiance',\r\n            borderColor: 'red',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: responseData.data.map( (x,i) => {\r\n                    return x.totalIrradiationKwhM2;\r\n                  }),\r\n          }\r\n          graphData1.datasets.push(datasetIrradiance)\r\n\r\n          setLineChartOneData(graphData1)\r\n\r\n      });\r\n\r\n  }\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null) {\r\n            setGenerators(response.generators);\r\n            // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n            let colorIndex = 0\r\n            response.generators.forEach((gen) => {\r\n              generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n              setGeneratorColors(generatorColors);\r\n              colorIndex++\r\n            });\r\n          }\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected.sort());\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const options =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n  }\r\n\r\n  const options1 = {\r\n    ...options,\r\n    scales: {\r\n      yACProduction: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        beginAtZero: false,\r\n      },\r\n      yIrradiance: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            let decimals = 3\r\n            let unit = ' MWh'\r\n            if (tooltipItem.dataset.label == 'Irradiance') {\r\n              decimals = 2\r\n              unit = ' Kwh/m2'\r\n            }\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,decimals) + unit;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              {t('Climate - Trends')}\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>{t('Period')}</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>{t('Select inverter')}:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  <CButton \r\n                    style={{backgroundColor:'#0400ff',color: 'white'}} \r\n                    className={(allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setAllSelected(!allSelected)}\r\n                    >\r\n                    {t('ALL')}\r\n                  </CButton>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >{t('Submit')}</CButton>\r\n            </CCol>\r\n        </CRow>\r\n\r\n        { generatorsSelected ?\r\n\r\n          <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >{t('Production and Irradiance')}</h4>\r\n                    <div className='d-flex'>\r\n                      <div className=\"text-left\" style={{width: '50%'}}>MWh</div>\r\n                      <div className=\"text-right\" style={{width: '50%'}}>Kwh/m2</div>\r\n                    </div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options1}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n              {t('Select one or more inverters')}\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default Trends\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\utils.js",["1361","1362"],"import React, {useState} from 'react'\r\n\r\nimport {CSelect,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n} from '@coreui/react'\r\n\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport colorLib from '@kurkle/color';\r\n\r\nimport i18n from './i18n'\r\n\r\nexport const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\nexport const formatDate = (date, flags = '') => {\r\n\r\n  if (!date) return date;\r\n\r\n\tconst dateArr = date.split(' ')[0].split('-');\r\n\r\n  if (flags.includes('noyear')){\r\n    return `${dateArr[2]}/${dateArr[1]}`; \r\n  }else if (flags.includes('time')){\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]} ${dateArr[3]}`;\r\n  } else {\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const formatDate2 = (sourceDate, options = '') => {\r\n\r\n  const dateArr = sourceDate.split(' ');\r\n  const date = dateArr[0].split('-');\r\n  const time = dateArr[1];\r\n\r\n  const timeArr = time.split(':');\r\n\r\n  const hours = timeArr[0];\r\n  const minutes = timeArr[1];\r\n\r\n  return `${date[2]}/${date[1]}/${date[0]} ${hours}:${minutes}`;\r\n}\r\n\r\nexport const formatDateWithSeconds = (sourceDate, options = '') => {\r\n\r\n  const dateArr = sourceDate.split(' ');\r\n  const date = dateArr[0].split('-');\r\n  const time = dateArr[1];\r\n\r\n  const timeArr = time.split(':');\r\n\r\n  const hours = timeArr[0];\r\n  const minutes = timeArr[1];\r\n  const seconds = timeArr[2];\r\n\r\n  return `${date[2]}/${date[1]}/${date[0]} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\n\r\nexport function getCurrentDateNDaysBefore(separator='',daysBefore){\r\n\r\n  let today = new Date();\r\n  let yesterday = new Date();\r\n  yesterday.setDate(today.getDate() - daysBefore);\r\n  let date = yesterday.getDate();\r\n  let month = yesterday.getMonth() + 1;\r\n  let year = yesterday.getFullYear();\r\n  \r\n  return `${year}${separator}${month<10?`0${month}`:`${month}`}${separator}${date<10?`0${date}`:`${date}`}`\r\n}\r\n\r\nexport const round = (number,decimals=1) => {\r\n\r\n  if (!number) return number;\r\n\r\n  return (+(Math.round(number + \"e+\" + decimals) + \"e-\" + decimals )).toFixed(decimals);\r\n\r\n}\r\n\r\nexport const formatNumber = (number) => {\r\n\r\n  if (!number) return number\r\n  number = '' + number\r\n  return number.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n\r\n}\r\n\r\nexport const transparentize = (value, opacity) => {\r\n  var alpha = opacity === undefined ? 0.5 : 1 - opacity;\r\n  return colorLib(value).alpha(alpha).rgbString();\r\n}\r\n\r\nexport const getDateLabel = (dateValue,from,to,t) => {\r\n\r\n  switch(dateValue) {\r\n    case 'y' : return i18n.t('Yesterday');\r\n    case '30d' : return '30 '+i18n.t('days');\r\n    case '12w' : return '12 '+i18n.t('weeks'); \r\n    case '12m' : return '12 '+i18n.t('month');\r\n    case 'cy' : return i18n.t('Current year');\r\n    case 'cm' : return i18n.t('Current month');\r\n    case 'cw' : return i18n.t('Current week');\r\n    case 'x' : return i18n.t('Custom range');\r\n    case 'xx' : return from+' - '+to;\r\n    default : return `{${dateValue}}`;\r\n  }\r\n\r\n}\r\n\r\nexport const DateFilter = (props) => {\r\n\r\n  const [modal, setModal] = useState(false);\r\n  // const [disabled, setDisabled] = useState(props.disabled);\r\n  const [from, setFrom] = useState('');\r\n  const [to, setTo] = useState('');\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  let options = [];\r\n\r\n  if(props.options) {\r\n\r\n    options = props.options;\r\n\r\n  } else {\r\n\r\n    options = 'y,cm,cy,x,xx'.split(',');\r\n\r\n  }\r\n\r\n\r\n  const setDate = (x) => {\r\n    alert(x);\r\n  }\r\n\r\n  const changeListener = (ev) => {\r\n\r\n    if (ev.target.value === 'x') {\r\n      setModal(true);\r\n    } else {\r\n      props.onChange(ev.target.value);\r\n      setValue(ev.target.value)\r\n    }\r\n\r\n  }\r\n\r\n  const applyCustomRange = (value) => {\r\n\r\n    if (modal) {\r\n      let sdate = \"\";\r\n      let edate = \"\";\r\n      if (startDate !== null) {\r\n        sdate =  `${startDate.getFullYear()}-${(\"0\" + (startDate.getMonth() + 1)).slice(-2)}-${(\"0\" + startDate.getDate()).slice(-2)}`;\r\n      }\r\n      if (endDate !== null) {\r\n        edate =  `${endDate.getFullYear()}-${(\"0\" + (endDate.getMonth() + 1)).slice(-2)}-${(\"0\" + endDate.getDate()).slice(-2)}`;\r\n      }\r\n      props.onChange(`${sdate}--${edate}`);\r\n      setModal(false);\r\n      setFrom(sdate);\r\n      setTo(edate);\r\n      setValue('xx');\r\n\r\n    } else {\r\n      props.onChange(value);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // const [dateRange, setDateRange] = useState([null, null]);\r\n  // const [startDate, endDate] = dateRange;\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  \r\n\r\n\treturn (<>\r\n\r\n\r\n\r\n\r\n\r\n            <CModal \r\n              show={modal} \r\n              onClose={setModal}\r\n              size=\"sm\"\r\n            >\r\n              <CModalHeader closeButton>\r\n                <CModalTitle>Select Period</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody className={\"text-center\"}>\r\n                \r\n                {/* <p>Seleccionar el intervalo temporal para filtrar los datos, utlizando el formato \"YYYY-MM-DD\".</p>\r\n\r\n                {props.warning && <p><strong>{props.warning}</strong></p>}\r\n\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInput placeholder=\"Desde\" onChange={(ev) => { setFrom(ev.target.value) }} aria-label=\"Username\" />\r\n                  &nbsp;\r\n                  <CInput placeholder=\"Hasta\" onChange={(ev) => { setTo(ev.target.value) }} aria-label=\"Server\" />\r\n                </CInputGroup> */}\r\n\r\n                <DatePicker\r\n                  dateFormat=\"yyyy-MM-dd\"\r\n                  selectsRange={true}\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  maxDate={new Date()}\r\n                  onChange={(dates) => {\r\n                    // setDateRange(update);\r\n                    const [start, end] = dates;\r\n                    setStartDate(start)\r\n                    setEndDate(end)\r\n                  }}\r\n                  inline\r\n                  \r\n                />\r\n\r\n\r\n              </CModalBody>\r\n              <CModalFooter>\r\n                <CButton color=\"primary\"  onClick={applyCustomRange} >{i18n.t('Submit')}</CButton>{' '}\r\n                <CButton \r\n                  color=\"secondary\" \r\n                  onClick={() => setModal(false)}\r\n                >Cancel</CButton>\r\n              </CModalFooter>\r\n            </CModal>\r\n\r\n      <CSelect value={value} disabled={props.disabled} onChange={changeListener} custom name=\"period\" id=\"period\" className='input-sm'>{options.map((option) => {\r\n\r\n                return <option key={option} selected={props.selected==option} value={option} onClick={changeListener}>\r\n                  {getDateLabel(option,from,to)}\r\n                </option>\r\n              })}</CSelect>\r\n\r\n\r\n\r\n             \r\n              \r\n\r\n              </>)\r\n\r\n}","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\performance.js",["1363","1364","1365","1366","1367","1368","1369","1370","1371"],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\energy\\overview.js",["1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CSpinner,\r\n  CWidgetDropdown,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, round, getDateLabel } from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport i18n from '../../../helpers/i18n'\r\n\r\nconst Overview = () => {\r\n  const { t, i18n } = useTranslation()\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoaded2, setDataLoaded2] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  \r\n  const [period, setPeriod] = useState('y');\r\n\r\n  const [user, setUser] = useState();\r\n  const [region, setRegion] = useState();\r\n  const [country, setCountry] = useState();\r\n  const [capacity, setCapacity] = useState();\r\n\r\n  const [totalACProductionMwh, setTotalACProductionMwh] = useState();\r\n  const [irradiationKwhM2, setIrradiationKwhM2] = useState();\r\n  const [avgAmbientTemp, setAvgAmbientTemp] = useState();\r\n\r\n  const [timeAvailability, setTimeAvailability] = useState('');\r\n  const [performanceRatio, setPerformanceRatio] = useState('');\r\n\r\n  const [timeAvailabilityChartData, setTimeAvailabilityChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [performanceChartData, setPerformanceChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    refreshChart(period);\r\n  }, []);\r\n\r\nconst loadGenerators = () => {\r\n\r\n  DataAPI({\r\n    'endpoint': 'admin/locations/current',\r\n    'method': 'GET'\r\n  }).then(\r\n    response => {\r\n      \r\n      if (response && response.error) {\r\n        setCookie('lastTimeStamp', '');\r\n        setCookie('name', '');\r\n        window.location.reload();\r\n      }\r\n      else if ((!dataLoaded || !dataLoaded2) && response && !response.error) {\r\n        let gen = [];\r\n        if (response.generators != null) {\r\n          response.generators.forEach(\r\n            generator => { \r\n              gen.push(generator.id)\r\n            })\r\n          setGenerators(gen);\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n\r\n}\r\n\r\nconst fetchData = (period) => {\r\n\r\n  setLoading(true);\r\n  \r\n  const body = {}\r\n  body.location = getCookie('location')\r\n  if (period && period.split('--').length==2) {\r\n    body.from = period.split('--')[0]\r\n    body.to = period.split('--')[1]\r\n  } else {\r\n    body.period = period\r\n  }\r\n\r\n  DataAPI({\r\n    'endpoint': 'solar/overview',\r\n    'method': 'POST',\r\n    'body': body\r\n  }).then(\r\n    response => {\r\n\r\n\r\n      setLoading(false);\r\n\r\n      if (response.error) {\r\n          if (response.error.message) {\r\n          return(alert(response.error.message))\r\n          } else {\r\n          return(alert(response.error)) \r\n          }\r\n      }\r\n\r\n      let chartData = response.data && response.data[0];\r\n\r\n      if (chartData) {\r\n\r\n        const timeAvailability = round(chartData.timeBasedAvailability);\r\n        const performanceRatio = round(chartData.performanceRatio)\r\n        const totalACProductionMwh = round(chartData.productionMwh);\r\n        const irradiationKwhM2 = round(chartData.irradiationKwhM2);\r\n        const avgAmbientTemp = round(chartData.avgAmbientTemp);\r\n\r\n        const timeAvailabilityDataset = {\r\n          clip:true,\r\n          labels: [i18n.t('Time-based Availability')],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [timeAvailability,100-timeAvailability],\r\n            backgroundColor: ['#0a58ca', '#052c65']\r\n          }\r\n        ]}\r\n\r\n        const performanceDataset = {\r\n          clip:true,\r\n          labels: [i18n.t('Performance Ratio')],\r\n          datasets: [{\r\n            borderWidth: 0,\r\n            data: [performanceRatio,100-performanceRatio],\r\n            backgroundColor: ['#722595', '#380a4e']\r\n          }\r\n        ]}\r\n      \r\n        setTimeAvailability(`${timeAvailability}%`)\r\n        setPerformanceRatio(`${performanceRatio}%`)\r\n\r\n        setTotalACProductionMwh(totalACProductionMwh)\r\n        setIrradiationKwhM2(irradiationKwhM2)\r\n        setAvgAmbientTemp(avgAmbientTemp)\r\n        \r\n        setTimeAvailabilityChartData(timeAvailabilityDataset)\r\n        setPerformanceChartData(performanceDataset)\r\n        \r\n        setDataLoaded(true)\r\n\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n  const refreshChart = (period) => {\r\n    fetchData(period);\r\n  }\r\n\r\n  const filterData = (date) => {\r\n    setPeriod(date);\r\n    fetchData(date);\r\n  }\r\n\r\n  const options = {\r\n    animation: { duration: loading ? 0 : 1000 },\r\n  };\r\n\r\n  const optionsBar = {\r\n    ...options,\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          color: \"#ffffff\",\r\n          beginAtZero: true,\r\n        },\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n        labels: {\r\n          color: '#ffffff'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            return round(tooltipItem.raw,1) + ' MWh/MW'\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  const optionsDoughnut = {\r\n    ...options,\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: '#ffffff'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            return round(tooltipItem.raw,1) + ' %'\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  const bodyOpacity = loading?.7:1\r\n\r\n  return (\r\n    <>\r\n      \r\n      <CCard>\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                {i18n.t('Overview')}\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n            </CCol>\r\n            <CCol sm=\"3\" className=\"text-right\">\r\n              <DateFilter warning={\"Seleccionar un rango máximo de 31 días\"} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { filterData(value); }} />\r\n            </CCol>\r\n          </CRow>\r\n        </CCardHeader>\r\n        \r\n        <CCardBody>\r\n          <div style={{opacity:{bodyOpacity}}} >\r\n\r\n            {false && <div style={{zIndex: 999, position: 'absolute', width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,.7)'}}><CSpinner style={{position: 'absolute'}} /></div>}\r\n          \r\n            <CRow>\r\n\r\n              \r\n            <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CCard\r\n                  color={\"gradient-warning\"}\r\n                  textColor={\"white\"}\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                >\r\n                  <CCardBody>\r\n                    <CCardTitle>{t('PLANT CHARACTERISTICS')}</CCardTitle>\r\n                    <CCardText>\r\n                      <p class=\"h6\">{t('User')+':'} {user!=undefined?user:''}</p>\r\n                      <p class=\"h6\">{t('Region')+':'} {region!=undefined?region:''}</p>\r\n                      <p class=\"h6\">{t('Country')+':'} {country!=undefined?country:''}</p>\r\n                      <p class=\"h6\">{t('Capacity')+':'} {capacity!=undefined?round(capacity)+' KW':''}</p>\r\n                    </CCardText>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CCard\r\n                  color={\"success\"}\r\n                  textColor={\"white\"}\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                >\r\n                  <CCardBody>\r\n                    <CCardTitle>{t('PRODUCTION AND CLIMATE')}</CCardTitle>\r\n                    <CCardText>\r\n                      <p class=\"h6\">{t('Production')+':'} {totalACProductionMwh!=undefined?round(totalACProductionMwh )+' MWh':''}</p>\r\n                      <p class=\"h6\">{t('Irradiation')+':'}  {irradiationKwhM2!=undefined?round(irradiationKwhM2)+' Kwh/m2':''}</p>\r\n                      <p class=\"h6\">{t('Average Ambient Temperature')+':'} {avgAmbientTemp!=undefined?round(avgAmbientTemp)+' °C':''}</p>\r\n                    </CCardText>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CWidgetDropdown\r\n                  color=\"gradient-info\"\r\n                  header={t('TIME-BASED AVAILABILITY')+\"(%)\"}\r\n                  text={timeAvailability}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={timeAvailabilityChartData}\r\n                          options={optionsDoughnut}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n              <CCol sm=\"6\" lg=\"3\" className=\"px-2 pb-3\">\r\n                <CWidgetDropdown\r\n                  color=\"gradient-purple\"\r\n                  header={t('PERFORMANCE RATIO') + '(%)'}\r\n                  text={performanceRatio}\r\n                  className=\"h-100 overview-box\"\r\n                  style={{opacity: loading ? 0.7 : 1}}\r\n                  footerSlot={\r\n                    <div className=\"px-lg-3 pb-lg-3 text-center\">\r\n                      <div className=\"d-inline-block w-100\" style={{maxWidth:'300px'}}>\r\n                        <Doughnut\r\n                          data={performanceChartData}\r\n                          options={optionsDoughnut}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                </CWidgetDropdown>\r\n              </CCol>\r\n\r\n            </CRow>\r\n          </div>\r\n          \r\n        </CCardBody>\r\n\r\n      </CCard>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\client\\settings.js",["1389","1390","1391","1392"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport { setCookie } from 'src/helpers/sessionCookie.js'\r\n\r\n\r\nconst Settings = () => {\r\n  const {t, i18n} = useTranslation()\r\n  const [loading, setLoading] = useState(false);\r\n  const [dRecsSoldPorcentage , setDRecsSoldPorcentage ] = useState([]);\r\n  const [dRecsPrice , setDRecsPrice ] = useState(false);\r\n  const [clientPreferencesChanged, setClientPreferencesChanged] = useState(false);\r\n  const [clientPreferencesSaved, setClientPreferencesSaved] = useState(false);\r\n  const [clientResponse, setClientResponse] = useState(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n  }, []);\r\n\r\n\r\n  const loadUser = () => {\r\n\r\n    setLoading(true);\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/clients/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setClientResponse(response)\r\n        response.settings.forEach(setting => {\r\n          if (setting.name === \"dRecsSoldPorcentage\") {\r\n            setDRecsSoldPorcentage(setting.value)\r\n            setCookie('dRecsSoldPorcentage',setting.value)\r\n          } else if (setting.name === \"dRecsPrice\") {\r\n            setDRecsPrice(setting.value)\r\n            setCookie('dRecsPrice',setting.value)\r\n          } \r\n        });\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const saveClientPreferences = () => {\r\n    if (clientPreferencesChanged) savePreferences()\r\n  }\r\n\r\n  const savePreferences = () => {\r\n    \r\n    setClientPreferencesChanged(false)\r\n\r\n    const body = {}\r\n    body.settings = [\r\n      {\r\n        \"name\":\"dRecsSoldPorcentage\",\r\n        \"value\":dRecsSoldPorcentage\r\n      },\r\n      {\r\n        \"name\":\"dRecsPrice\",\r\n        \"value\":dRecsPrice\r\n      }\r\n    ]\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/clients/current',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }     \r\n        \r\n        setClientPreferencesSaved(true)\r\n        setCookie('dRecsSoldPorcentage',dRecsSoldPorcentage)\r\n        setCookie('dRecsPrice',dRecsPrice)\r\n          \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const handleDRecsSoldPorcentageChange = (value) => {\r\n    setClientPreferencesChanged(true);\r\n    if (value>=0 && value<=100)\r\n      setDRecsSoldPorcentage(value)\r\n  };\r\n\r\n  const handleDRecsPriceChange = (value) => {\r\n    setClientPreferencesChanged(true);\r\n    if (value>=0)\r\n      setDRecsPrice(value)\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard sm=\"7\" className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                  <h3 id=\"settings\" className=\"card-title mb-0\">\r\n                    {t('Client Settings')}\r\n                  </h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n      \r\n            <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n\r\n              {/* <CRow className={'pb-2 mb-3 border-bottom'}>\r\n                <CCol sm=\"6\">\r\n                  <h5 id=\"settings\" className=\"card-title mb-0 row\">\r\n                    Fiscal Year settings\r\n                  </h5>\r\n                </CCol>\r\n              </CRow> */}\r\n\r\n              <CRow className=\"mb-0\">\r\n                <CCol md=\"3\" sm=\"6\" >\r\n                  <CForm>\r\n                    <CFormGroup>\r\n                      <CInputGroup className={'mb-2'}>\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText >\r\n                          {t('Select dRecs Sold Porcentage')}\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput type='number' min='0' max='100' custom value={dRecsSoldPorcentage} onChange={(ev) => { handleDRecsSoldPorcentageChange(ev.target.value)}} name=\"dRecsSoldPorcentage\" id=\"dRecsSoldPorcentage\" className={\"input-sm\"} >\r\n                        </CInput>\r\n                      </CInputGroup>\r\n                      <CInputGroup>\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText >\r\n                          {t('Select dRecs Price')}\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput type='number' min='0' custom value={dRecsPrice} onChange={(ev) => { handleDRecsPriceChange(ev.target.value)}} name=\"dRecsPrice\" id=\"dRecsPrice\" className={\"input-sm\"} >\r\n                        </CInput>\r\n                      </CInputGroup>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n\r\n\r\n              <CRow className=\"mb-4\">\r\n                <CCol>\r\n                  <CForm>\r\n                    <CFormGroup className={\"mt-4\"}>\r\n                      <CButton onClick={() => {saveClientPreferences();} } color=\"primary\" className=\"px-4 mr-3\" disabled={!clientPreferencesChanged}>{t('Save Preferences')}</CButton>\r\n                      { clientPreferencesSaved && !clientPreferencesChanged &&\r\n                        <div className=\"text-success d-inline-block\" style={{fontWeight:\"500\"}}>Saved!</div> \r\n                      }\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n\r\n\r\n            </CCardBody>\r\n\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\pages\\user\\settings.js",["1393","1394","1395","1396","1397"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCol,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CAlert,\r\n  CLabel,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst Settings = () => {\r\n  const { t, i18n } = useTranslation()\r\n  const [loading, setLoading] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [newPasswordConfirm, setNewPasswordConfirm] = useState('');\r\n  const [passwordChanged, setPasswordChanged] = useState(false);\r\n  const [changePassword, setChangePassword] = useState(false);\r\n  const [changing, setChanging] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [differentPassword, setDifferentPassword] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  \r\n  \r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n  }, []);\r\n\r\n\r\n  const loadUser = () => {\r\n\r\n    setLoading(true);\r\n    \r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n        else if (!generatorsLoaded && response) {\r\n          if (response.location.generators != null)\r\n            setGenerators(response.location.generators);\r\n          setGeneratorsLoaded(true)\r\n        }\r\n\r\n        setName(response.name)\r\n        setEmail(response.email)\r\n        \r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const enableSave = () => {\r\n  }\r\n\r\n  const saveNewPassword = () => {\r\n    if (newPassword !== newPasswordConfirm) {\r\n      setDifferentPassword(true);\r\n    } else {\r\n      setChanging(true);\r\n      DataAPI({\r\n        'endpoint': 'security/authenticate/reset',\r\n        'method': 'POST',\r\n        'body': {\r\n          \"newPassword\": newPassword,\r\n          \"newPasswordConfirm\": newPasswordConfirm\r\n      }\r\n      }).then(\r\n        response => {\r\n          if (response.changed) {    \r\n            setPasswordChanged(true)\r\n            setChangePassword(false)\r\n            setMessage('Your password was updated.')\r\n          } else {\r\n            setErrorMessage(response.error)\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard sm=\"7\" className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                  <h3 id=\"settings\" className=\"card-title mb-0\">\r\n                  {t('User Settings')}\r\n                  </h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n              <CRow className=\"\">\r\n                <CCol md=\"6\" >\r\n                  <CForm>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={enableSave} value={name} type=\"text\" placeholder={t('Name')} disabled />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-envelope-closed\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput onChange={enableSave} value={email} type=\"text\" placeholder={t('E-mail')} disabled />\r\n                    </CInputGroup>\r\n\r\n                    { passwordChanged &&\r\n                      <CAlert color=\"success\" >{message}</CAlert>\r\n                    }\r\n                    { errorMessage !== '' &&\r\n                      <CAlert color=\"danger\" >{errorMessage}</CAlert>\r\n                    }\r\n\r\n                    { changePassword ?\r\n                      <div>\r\n                        <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                            <CInputGroupText>\r\n                              <CIcon name=\"cil-lock-locked\" />\r\n                            </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput onChange={(ev) => {setDifferentPassword(false);setNewPassword(ev.target.value)}} type=\"password\" placeholder={t('New Password')} maxLength={100} />\r\n                        </CInputGroup>\r\n                        <CInputGroup className=\"mb-3\">\r\n                          <CInputGroupPrepend>\r\n                            <CInputGroupText>\r\n                              <CIcon name=\"cil-lock-locked\" />\r\n                            </CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CInput onChange={(ev) => {setDifferentPassword(false);setNewPasswordConfirm(ev.target.value)}} type=\"password\" placeholder={t('Confirm New Password')} maxLength={100}  />\r\n                          { differentPassword &&\r\n                            <CLabel className={'text-danger mt-1 w-100'}>{t('Please make sure your passwords match.')}</CLabel>\r\n                          }\r\n                        </CInputGroup>\r\n                        <CRow>\r\n                          <CCol xs=\"12\">\r\n                            <CButton onClick={saveNewPassword} color=\"primary\" className=\"px-4 mr-3\" disabled={newPassword==='' || changing}>{t('Save new password')}</CButton>\r\n                            <CButton onClick={() => setChangePassword(false)} color=\"secondary\" className=\"px-4\" disabled={changing}>{t('Cancel')}</CButton>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </div>\r\n                      :\r\n                      <CRow className={'mt-4'}>\r\n                        <CCol xs=\"12\">\r\n                          <CButton onClick={() => {setChangePassword(true); setPasswordChanged(false);} } color=\"primary\" className=\"px-4 mr-3\">{t('Change Password')}</CButton>\r\n                        </CCol>\r\n                      </CRow>\r\n                    }\r\n                  </CForm>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\User.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\Users.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\Widgets.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\theme\\typography\\Typography.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\dashboard\\Dashboard.js",["1398","1399","1400","1401"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CBadge\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nimport { freeSet } from '@coreui/icons'\r\nimport DataAPI from '../../helpers/DataAPI.js'\r\nimport { formatDateWithSeconds, round, formatNumber } from '../../helpers/utils.js'\r\nimport CIcon from '@coreui/icons-react';\r\nimport {setCookie,getCookie} from '../../helpers/sessionCookie.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [hasSolarParks, setHasSolarParks] = useState(false);\r\n\r\n  const [solarGeneratorsTableData, setSolarGeneratorsTableData] = useState([]);\r\n  const [tableDataSolarCurrentStatus, setTableDataSolarCurrentStatus] = useState(false);\r\n\r\n  const fetchData = () => {\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'solar/dashboard/now',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDateWithSeconds(responseData.dateData));\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasSolarParks(true);\r\n\r\n      const tableDataSolarCurrentStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                },\r\n                {\r\n                  item:\"Irradiance average:\",\r\n                  now:round(responseData.dataNow.irradiance,2)+\" kW/m2\",\r\n                },\r\n                {\r\n                  item:\"Inverters in operation:\",\r\n                  now:responseData.amountGeneratorsOk+\"/\"+responseData.amountGenerators,\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now'\r\n        ]\r\n      }\r\n      setTableDataSolarCurrentStatus(tableDataSolarCurrentStatus)\r\n\r\n      const solarGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const generatorStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.inverter = d.code\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\")\r\n            line.irradiance = \"\"\r\n            return line\r\n          });\r\n\r\n          const total =  {\r\n            inverter: \"Total\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            irradiance: formatNumber(round(rL.dataNow.irradiance,3))\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(generatorStatus),\r\n            fields:  [\r\n              'inverter',\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'irradiance', label: 'Irradiance (kw/m2)' }\r\n            ]\r\n          }\r\n    \r\n          solarGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setSolarGeneratorsTableData(solarGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    const interval = setInterval(() => fetchData(), 5000)\r\n    return () => clearInterval(interval) // cleanup\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (response  && !response.error) {\r\n          // setGenerators(response.generators);\r\n          setLoading(true);\r\n          fetchData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return ''\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol xs=\"10\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Current Status\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Last updated on: {lastUpdated}</div>\r\n            </CCol>\r\n            <CCol xs=\"2\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <CIcon content={freeSet.cilReload} className={\"cursor-pointer animate-rotate\"} size={'lg'} title={'Refresh'}\r\n                onClick={() => fetchData()}/>\r\n            </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n\r\n            <CRow>\r\n\r\n              { hasSolarParks &&\r\n                <CCol xl={\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n\r\n                <div style={{marginBottom:'30px'}}>\r\n                      <CRow>\r\n                      \r\n                        { tableDataSolarCurrentStatus &&\r\n                          <CCol xl={\"6\"} className=\"px-sm-4 mb-4\">\r\n                            <h4>Solar Portfolio</h4>\r\n                            <CDataTable\r\n                                addTableClasses=\"current-status-table\"\r\n                                striped\r\n                                items={tableDataSolarCurrentStatus.items}\r\n                                fields={tableDataSolarCurrentStatus.fields}\r\n                              />\r\n                          </CCol>\r\n                        }\r\n\r\n                      </CRow>\r\n                    </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n            <CRow>\r\n\r\n              { hasSolarParks &&\r\n\r\n                <CCol xl={\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { solarGeneratorsTableData.length > 0 &&\r\n                        solarGeneratorsTableData.map(park => (  \r\n                        <CCol xl={\"6\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'irradiance':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.irradiance}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n                  \r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\Charts.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\theme\\colors\\Colors.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\badges\\Badges.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\toaster\\Toaster.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\alerts\\Alerts.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\notifications\\modals\\Modals.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\flags\\Flags.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\brands\\Brands.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\button-groups\\ButtonGroups.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\brand-buttons\\BrandButtons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\buttons\\Buttons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\switches\\Switches.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tabs\\Tabs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\progress-bar\\ProgressBar.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tooltips\\Tooltips.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\paginations\\Pagnations.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\list-groups\\ListGroups.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\jumbotrons\\Jumbotrons.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\navbars\\Navbars.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\cards\\Cards.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\navs\\Navs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\collapses\\Collapses.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\forms\\BasicForms.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\tables\\Tables.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\base\\popovers\\Popovers.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\users\\UsersData.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\ChartLineSimple.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\charts\\ChartBarSimple.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\WidgetsDropdown.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\widgets\\WidgetsBrand.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\reusable\\index.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\reusable\\DocsLink.js",[],"C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\helpers\\i18n.js",["1402"],"import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getCookie } from \"./sessionCookie\";\r\nimport translationGB from \"../locales/GB/translation.json\";\r\nimport translationES from \"../locales/ES/translation.json\";\r\nimport translationFR from \"../locales/FR/translation.json\";\r\nimport translationPT from \"../locales/PT/translation.json\";\r\n\r\n// const { t, i18n } = useTranslation();\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: \"GB\",\r\n    lng: getCookie('language'),\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n    resources: {\r\n      GB: {\r\n        translation: translationGB\r\n      },\r\n      ES: {\r\n        translation: translationES\r\n      },\r\n      FR:{\r\n        translation: translationFR\r\n      },\r\n      PT: {\r\n        translation: translationPT\r\n      },\r\n    },\r\n  })\r\n\r\n\r\nexport default i18n;","C:\\Users\\nicob\\Desktop\\Renovus\\solarec2\\renovusUnicef\\ui_web\\src\\views\\others\\LanguageSwitcher.js",[],{"ruleId":"1403","replacedBy":"1404"},{"ruleId":"1405","replacedBy":"1406"},{"ruleId":"1407","severity":1,"message":"1408","line":1,"column":10,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1411","line":1,"column":17,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":27,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":15,"column":38,"nodeType":"1415","messageId":"1416","endLine":15,"endColumn":40},{"ruleId":"1407","severity":1,"message":"1417","line":8,"column":10,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":14},{"ruleId":"1418","severity":1,"message":"1419","line":122,"column":21,"nodeType":"1420","endLine":122,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1421","line":1,"column":9,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":15,"column":51,"nodeType":"1415","messageId":"1416","endLine":15,"endColumn":53},{"ruleId":"1413","severity":1,"message":"1422","line":31,"column":34,"nodeType":"1415","messageId":"1416","endLine":31,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":42,"column":24,"nodeType":"1415","messageId":"1416","endLine":42,"endColumn":26},{"ruleId":"1413","severity":1,"message":"1414","line":56,"column":73,"nodeType":"1415","messageId":"1416","endLine":56,"endColumn":75},{"ruleId":"1423","severity":1,"message":"1424","line":36,"column":11,"nodeType":"1420","endLine":36,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1425","line":24,"column":3,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1426","line":53,"column":10,"nodeType":"1409","messageId":"1410","endLine":53,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1427","line":53,"column":20,"nodeType":"1409","messageId":"1410","endLine":53,"endColumn":31},{"ruleId":"1428","severity":1,"message":"1429","line":64,"column":5,"nodeType":"1430","endLine":64,"endColumn":7,"suggestions":"1431"},{"ruleId":"1407","severity":1,"message":"1432","line":81,"column":15,"nodeType":"1409","messageId":"1410","endLine":81,"endColumn":19},{"ruleId":"1413","severity":1,"message":"1414","line":136,"column":37,"nodeType":"1415","messageId":"1416","endLine":136,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1433","line":5,"column":10,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":16},{"ruleId":"1413","severity":1,"message":"1414","line":278,"column":27,"nodeType":"1415","messageId":"1416","endLine":278,"endColumn":29},{"ruleId":"1413","severity":1,"message":"1414","line":122,"column":27,"nodeType":"1415","messageId":"1416","endLine":122,"endColumn":29},{"ruleId":"1407","severity":1,"message":"1434","line":190,"column":7,"nodeType":"1409","messageId":"1410","endLine":190,"endColumn":22},{"ruleId":"1435","severity":1,"message":"1436","line":88,"column":36,"nodeType":"1437","messageId":"1438","endLine":88,"endColumn":42},{"ruleId":"1435","severity":1,"message":"1436","line":89,"column":36,"nodeType":"1437","messageId":"1438","endLine":89,"endColumn":42},{"ruleId":"1435","severity":1,"message":"1436","line":90,"column":37,"nodeType":"1437","messageId":"1438","endLine":90,"endColumn":43},{"ruleId":"1435","severity":1,"message":"1436","line":91,"column":37,"nodeType":"1437","messageId":"1438","endLine":91,"endColumn":43},{"ruleId":"1435","severity":1,"message":"1436","line":92,"column":40,"nodeType":"1437","messageId":"1438","endLine":92,"endColumn":46},{"ruleId":"1435","severity":1,"message":"1436","line":93,"column":41,"nodeType":"1437","messageId":"1438","endLine":93,"endColumn":47},{"ruleId":"1435","severity":1,"message":"1436","line":94,"column":40,"nodeType":"1437","messageId":"1438","endLine":94,"endColumn":46},{"ruleId":"1435","severity":1,"message":"1436","line":95,"column":39,"nodeType":"1437","messageId":"1438","endLine":95,"endColumn":45},{"ruleId":"1435","severity":1,"message":"1436","line":96,"column":39,"nodeType":"1437","messageId":"1438","endLine":96,"endColumn":45},{"ruleId":"1435","severity":1,"message":"1436","line":97,"column":40,"nodeType":"1437","messageId":"1438","endLine":97,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1439","line":123,"column":9,"nodeType":"1409","messageId":"1410","endLine":123,"endColumn":16},{"ruleId":"1413","severity":1,"message":"1414","line":129,"column":25,"nodeType":"1415","messageId":"1416","endLine":129,"endColumn":27},{"ruleId":"1413","severity":1,"message":"1414","line":224,"column":69,"nodeType":"1415","messageId":"1416","endLine":224,"endColumn":71},{"ruleId":"1413","severity":1,"message":"1422","line":77,"column":33,"nodeType":"1415","messageId":"1416","endLine":77,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1414","line":80,"column":33,"nodeType":"1415","messageId":"1416","endLine":80,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":119,"column":52,"nodeType":"1415","messageId":"1416","endLine":119,"endColumn":54},{"ruleId":"1413","severity":1,"message":"1422","line":120,"column":50,"nodeType":"1415","messageId":"1416","endLine":120,"endColumn":52},{"ruleId":"1413","severity":1,"message":"1422","line":172,"column":33,"nodeType":"1415","messageId":"1416","endLine":172,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":205,"column":52,"nodeType":"1415","messageId":"1416","endLine":205,"endColumn":54},{"ruleId":"1428","severity":1,"message":"1440","line":244,"column":6,"nodeType":"1430","endLine":244,"endColumn":8,"suggestions":"1441"},{"ruleId":"1428","severity":1,"message":"1442","line":15,"column":11,"nodeType":"1443","endLine":15,"endColumn":47},{"ruleId":"1428","severity":1,"message":"1444","line":24,"column":9,"nodeType":"1443","endLine":29,"endColumn":6,"suggestions":"1445"},{"ruleId":"1428","severity":1,"message":"1446","line":62,"column":25,"nodeType":"1447","endLine":62,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1448","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1449","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1448","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1450","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1421","line":17,"column":9,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1451","line":32,"column":10,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1452","line":33,"column":10,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":19},{"ruleId":"1428","severity":1,"message":"1453","line":43,"column":6,"nodeType":"1430","endLine":43,"endColumn":8,"suggestions":"1454"},{"ruleId":"1413","severity":1,"message":"1422","line":76,"column":37,"nodeType":"1415","messageId":"1416","endLine":76,"endColumn":39},{"ruleId":"1455","severity":1,"message":"1456","line":84,"column":33,"nodeType":"1457","messageId":"1458","endLine":84,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1456","line":86,"column":38,"nodeType":"1457","messageId":"1458","endLine":86,"endColumn":40},{"ruleId":"1455","severity":1,"message":"1456","line":159,"column":29,"nodeType":"1457","messageId":"1458","endLine":159,"endColumn":31},{"ruleId":"1407","severity":1,"message":"1459","line":1,"column":38,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":44},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1450","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1460","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1461","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1462","line":24,"column":10,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1463","line":25,"column":19,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":29},{"ruleId":"1413","severity":1,"message":"1422","line":74,"column":26,"nodeType":"1415","messageId":"1416","endLine":74,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1414","line":140,"column":79,"nodeType":"1415","messageId":"1416","endLine":140,"endColumn":81},{"ruleId":"1413","severity":1,"message":"1414","line":150,"column":47,"nodeType":"1415","messageId":"1416","endLine":150,"endColumn":49},{"ruleId":"1413","severity":1,"message":"1422","line":158,"column":54,"nodeType":"1415","messageId":"1416","endLine":158,"endColumn":56},{"ruleId":"1413","severity":1,"message":"1422","line":158,"column":72,"nodeType":"1415","messageId":"1416","endLine":158,"endColumn":74},{"ruleId":"1413","severity":1,"message":"1422","line":172,"column":53,"nodeType":"1415","messageId":"1416","endLine":172,"endColumn":55},{"ruleId":"1413","severity":1,"message":"1422","line":185,"column":53,"nodeType":"1415","messageId":"1416","endLine":185,"endColumn":55},{"ruleId":"1413","severity":1,"message":"1414","line":192,"column":30,"nodeType":"1415","messageId":"1416","endLine":192,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1411","line":1,"column":17,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":27,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1464","line":2,"column":10,"nodeType":"1409","messageId":"1410","endLine":2,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1465","line":2,"column":22,"nodeType":"1409","messageId":"1410","endLine":2,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1466","line":3,"column":9,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1467","line":8,"column":3,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1468","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1469","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1470","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1471","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1460","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1433","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1472","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1473","line":17,"column":3,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1474","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":13},{"ruleId":"1413","severity":1,"message":"1414","line":29,"column":28,"nodeType":"1415","messageId":"1416","endLine":29,"endColumn":30},{"ruleId":"1403","replacedBy":"1475"},{"ruleId":"1405","replacedBy":"1476"},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":27,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1470","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1471","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1460","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1433","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1472","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1477","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1478","line":18,"column":8,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1479","line":19,"column":9,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":21},{"ruleId":"1407","severity":1,"message":"1480","line":19,"column":23,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":34},{"ruleId":"1407","severity":1,"message":"1481","line":19,"column":36,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":41},{"ruleId":"1407","severity":1,"message":"1482","line":19,"column":43,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":55},{"ruleId":"1407","severity":1,"message":"1483","line":19,"column":57,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":67},{"ruleId":"1407","severity":1,"message":"1466","line":20,"column":9,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1484","line":22,"column":10,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1485","line":22,"column":16,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1486","line":22,"column":25,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":28},{"ruleId":"1407","severity":1,"message":"1487","line":24,"column":8,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1488","line":29,"column":10,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1489","line":29,"column":21,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1490","line":30,"column":10,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1491","line":30,"column":22,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1492","line":31,"column":10,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1493","line":31,"column":28,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":47},{"ruleId":"1407","severity":1,"message":"1494","line":32,"column":10,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1495","line":32,"column":21,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1496","line":33,"column":10,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1497","line":33,"column":22,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1498","line":34,"column":10,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1499","line":34,"column":25,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":41},{"ruleId":"1407","severity":1,"message":"1500","line":35,"column":10,"nodeType":"1409","messageId":"1410","endLine":35,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1463","line":35,"column":19,"nodeType":"1409","messageId":"1410","endLine":35,"endColumn":29},{"ruleId":"1407","severity":1,"message":"1460","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1433","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1477","line":17,"column":3,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1487","line":22,"column":8,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1501","line":24,"column":8,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":11},{"ruleId":"1428","severity":1,"message":"1440","line":45,"column":6,"nodeType":"1430","endLine":45,"endColumn":8,"suggestions":"1502"},{"ruleId":"1413","severity":1,"message":"1414","line":100,"column":44,"nodeType":"1415","messageId":"1416","endLine":100,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1503","line":1,"column":17,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":21},{"ruleId":"1407","severity":1,"message":"1504","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1505","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1506","line":15,"column":8,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1483","line":18,"column":9,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1481","line":18,"column":21,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1482","line":18,"column":28,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":40},{"ruleId":"1407","severity":1,"message":"1463","line":23,"column":19,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":29},{"ruleId":"1407","severity":1,"message":"1497","line":28,"column":22,"nodeType":"1409","messageId":"1410","endLine":28,"endColumn":35},{"ruleId":"1428","severity":1,"message":"1440","line":39,"column":6,"nodeType":"1430","endLine":39,"endColumn":8,"suggestions":"1507"},{"ruleId":"1413","severity":1,"message":"1422","line":96,"column":23,"nodeType":"1415","messageId":"1416","endLine":96,"endColumn":25},{"ruleId":"1413","severity":1,"message":"1422","line":130,"column":23,"nodeType":"1415","messageId":"1416","endLine":130,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1508","line":210,"column":9,"nodeType":"1409","messageId":"1410","endLine":210,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1460","line":4,"column":3,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1433","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1470","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1509","line":7,"column":3,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1510","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1511","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1512","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1513","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1514","line":19,"column":3,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1515","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1516","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1506","line":26,"column":8,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1517","line":28,"column":8,"nodeType":"1409","messageId":"1410","endLine":28,"endColumn":24},{"ruleId":"1407","severity":1,"message":"1518","line":31,"column":42,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":67},{"ruleId":"1407","severity":1,"message":"1519","line":36,"column":7,"nodeType":"1409","messageId":"1410","endLine":36,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1520","line":37,"column":7,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1497","line":42,"column":22,"nodeType":"1409","messageId":"1410","endLine":42,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1521","line":43,"column":23,"nodeType":"1409","messageId":"1410","endLine":43,"endColumn":37},{"ruleId":"1407","severity":1,"message":"1522","line":44,"column":10,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1439","line":44,"column":16,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1490","line":45,"column":10,"nodeType":"1409","messageId":"1410","endLine":45,"endColumn":20},{"ruleId":"1428","severity":1,"message":"1523","line":85,"column":6,"nodeType":"1430","endLine":85,"endColumn":8,"suggestions":"1524"},{"ruleId":"1407","severity":1,"message":"1525","line":88,"column":9,"nodeType":"1409","messageId":"1410","endLine":88,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1526","line":98,"column":7,"nodeType":"1409","messageId":"1410","endLine":98,"endColumn":15},{"ruleId":"1413","severity":1,"message":"1414","line":144,"column":42,"nodeType":"1415","messageId":"1416","endLine":144,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1422","line":382,"column":53,"nodeType":"1415","messageId":"1416","endLine":382,"endColumn":55},{"ruleId":"1413","severity":1,"message":"1422","line":383,"column":81,"nodeType":"1415","messageId":"1416","endLine":383,"endColumn":83},{"ruleId":"1413","severity":1,"message":"1422","line":384,"column":82,"nodeType":"1415","messageId":"1416","endLine":384,"endColumn":84},{"ruleId":"1413","severity":1,"message":"1422","line":385,"column":83,"nodeType":"1415","messageId":"1416","endLine":385,"endColumn":85},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":26,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1513","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1514","line":7,"column":3,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1515","line":8,"column":3,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1516","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1467","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1506","line":16,"column":8,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1527","line":17,"column":8,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1528","line":18,"column":8,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1529","line":23,"column":3,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1530","line":24,"column":3,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1531","line":25,"column":3,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1532","line":26,"column":3,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1533","line":27,"column":3,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1534","line":28,"column":3,"nodeType":"1409","messageId":"1410","endLine":28,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1535","line":52,"column":9,"nodeType":"1409","messageId":"1410","endLine":52,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1536","line":52,"column":20,"nodeType":"1409","messageId":"1410","endLine":52,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1537","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":13},{"ruleId":"1428","severity":1,"message":"1538","line":65,"column":5,"nodeType":"1430","endLine":65,"endColumn":7,"suggestions":"1539"},{"ruleId":"1413","severity":1,"message":"1414","line":101,"column":37,"nodeType":"1415","messageId":"1416","endLine":101,"endColumn":39},{"ruleId":"1540","severity":1,"message":"1541","line":217,"column":9,"nodeType":"1542","messageId":"1543","endLine":221,"endColumn":10},{"ruleId":"1413","severity":1,"message":"1414","line":262,"column":31,"nodeType":"1415","messageId":"1416","endLine":262,"endColumn":33},{"ruleId":"1413","severity":1,"message":"1414","line":335,"column":30,"nodeType":"1415","messageId":"1416","endLine":335,"endColumn":32},{"ruleId":"1413","severity":1,"message":"1414","line":425,"column":30,"nodeType":"1415","messageId":"1416","endLine":425,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1448","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1544","line":24,"column":21,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":31},{"ruleId":"1407","severity":1,"message":"1545","line":38,"column":10,"nodeType":"1409","messageId":"1410","endLine":38,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1546","line":39,"column":10,"nodeType":"1409","messageId":"1410","endLine":39,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1547","line":41,"column":10,"nodeType":"1409","messageId":"1410","endLine":41,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1548","line":41,"column":18,"nodeType":"1409","messageId":"1410","endLine":41,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1549","line":46,"column":10,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1550","line":46,"column":28,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":47},{"ruleId":"1407","severity":1,"message":"1551","line":48,"column":10,"nodeType":"1409","messageId":"1410","endLine":48,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1552","line":48,"column":24,"nodeType":"1409","messageId":"1410","endLine":48,"endColumn":39},{"ruleId":"1428","severity":1,"message":"1440","line":66,"column":6,"nodeType":"1430","endLine":66,"endColumn":8,"suggestions":"1553"},{"ruleId":"1413","severity":1,"message":"1414","line":76,"column":44,"nodeType":"1415","messageId":"1416","endLine":76,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":167,"column":42,"nodeType":"1415","messageId":"1416","endLine":167,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1414","line":167,"column":80,"nodeType":"1415","messageId":"1416","endLine":167,"endColumn":82},{"ruleId":"1413","severity":1,"message":"1414","line":168,"column":38,"nodeType":"1415","messageId":"1416","endLine":168,"endColumn":40},{"ruleId":"1413","severity":1,"message":"1414","line":168,"column":76,"nodeType":"1415","messageId":"1416","endLine":168,"endColumn":78},{"ruleId":"1407","severity":1,"message":"1525","line":332,"column":7,"nodeType":"1409","messageId":"1410","endLine":332,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1448","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1509","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1511","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1510","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1554","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1473","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1425","line":19,"column":3,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1555","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1474","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1556","line":22,"column":3,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1557","line":30,"column":10,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1484","line":30,"column":17,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":21},{"ruleId":"1407","severity":1,"message":"1544","line":35,"column":21,"nodeType":"1409","messageId":"1410","endLine":35,"endColumn":31},{"ruleId":"1407","severity":1,"message":"1558","line":39,"column":10,"nodeType":"1409","messageId":"1410","endLine":39,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1545","line":51,"column":10,"nodeType":"1409","messageId":"1410","endLine":51,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1546","line":52,"column":10,"nodeType":"1409","messageId":"1410","endLine":52,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1559","line":60,"column":10,"nodeType":"1409","messageId":"1410","endLine":60,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1560","line":60,"column":27,"nodeType":"1409","messageId":"1410","endLine":60,"endColumn":45},{"ruleId":"1428","severity":1,"message":"1440","line":86,"column":6,"nodeType":"1430","endLine":86,"endColumn":8,"suggestions":"1561"},{"ruleId":"1413","severity":1,"message":"1414","line":97,"column":44,"nodeType":"1415","messageId":"1416","endLine":97,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":185,"column":42,"nodeType":"1415","messageId":"1416","endLine":185,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1414","line":185,"column":80,"nodeType":"1415","messageId":"1416","endLine":185,"endColumn":82},{"ruleId":"1413","severity":1,"message":"1414","line":186,"column":38,"nodeType":"1415","messageId":"1416","endLine":186,"endColumn":40},{"ruleId":"1413","severity":1,"message":"1414","line":186,"column":76,"nodeType":"1415","messageId":"1416","endLine":186,"endColumn":78},{"ruleId":"1407","severity":1,"message":"1562","line":242,"column":15,"nodeType":"1409","messageId":"1410","endLine":242,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1563","line":324,"column":7,"nodeType":"1409","messageId":"1410","endLine":324,"endColumn":24},{"ruleId":"1407","severity":1,"message":"1525","line":328,"column":7,"nodeType":"1409","messageId":"1410","endLine":328,"endColumn":13},{"ruleId":"1413","severity":1,"message":"1422","line":371,"column":42,"nodeType":"1415","messageId":"1416","endLine":371,"endColumn":44},{"ruleId":"1407","severity":1,"message":"1448","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1509","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1511","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1510","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1554","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1460","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1433","line":16,"column":3,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1471","line":17,"column":3,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1473","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1425","line":19,"column":3,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1555","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1474","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1556","line":22,"column":3,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1537","line":24,"column":3,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1530","line":28,"column":3,"nodeType":"1409","messageId":"1410","endLine":28,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1544","line":36,"column":21,"nodeType":"1409","messageId":"1410","endLine":36,"endColumn":31},{"ruleId":"1407","severity":1,"message":"1545","line":45,"column":10,"nodeType":"1409","messageId":"1410","endLine":45,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1546","line":46,"column":10,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1564","line":46,"column":18,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1562","line":54,"column":10,"nodeType":"1409","messageId":"1410","endLine":54,"endColumn":21},{"ruleId":"1407","severity":1,"message":"1565","line":54,"column":23,"nodeType":"1409","messageId":"1410","endLine":54,"endColumn":37},{"ruleId":"1428","severity":1,"message":"1440","line":76,"column":6,"nodeType":"1430","endLine":76,"endColumn":8,"suggestions":"1566"},{"ruleId":"1413","severity":1,"message":"1414","line":88,"column":50,"nodeType":"1415","messageId":"1416","endLine":88,"endColumn":52},{"ruleId":"1413","severity":1,"message":"1414","line":163,"column":26,"nodeType":"1415","messageId":"1416","endLine":163,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1422","line":253,"column":49,"nodeType":"1415","messageId":"1416","endLine":253,"endColumn":51},{"ruleId":"1407","severity":1,"message":"1544","line":18,"column":28,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":38},{"ruleId":"1413","severity":1,"message":"1414","line":47,"column":44,"nodeType":"1415","messageId":"1416","endLine":47,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":94,"column":32,"nodeType":"1415","messageId":"1416","endLine":94,"endColumn":34},{"ruleId":"1407","severity":1,"message":"1567","line":108,"column":13,"nodeType":"1409","messageId":"1410","endLine":108,"endColumn":19},{"ruleId":"1428","severity":1,"message":"1440","line":177,"column":6,"nodeType":"1430","endLine":177,"endColumn":8,"suggestions":"1568"},{"ruleId":"1407","severity":1,"message":"1569","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1570","line":25,"column":7,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1571","line":29,"column":7,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1488","line":37,"column":10,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1489","line":37,"column":21,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1572","line":43,"column":10,"nodeType":"1409","messageId":"1410","endLine":43,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1573","line":43,"column":16,"nodeType":"1409","messageId":"1410","endLine":43,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1522","line":44,"column":10,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1439","line":44,"column":16,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1545","line":47,"column":10,"nodeType":"1409","messageId":"1410","endLine":47,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1574","line":47,"column":16,"nodeType":"1409","messageId":"1410","endLine":47,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1575","line":52,"column":10,"nodeType":"1409","messageId":"1410","endLine":52,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1576","line":52,"column":29,"nodeType":"1409","messageId":"1410","endLine":52,"endColumn":49},{"ruleId":"1413","severity":1,"message":"1414","line":106,"column":34,"nodeType":"1415","messageId":"1416","endLine":106,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":129,"column":34,"nodeType":"1415","messageId":"1416","endLine":129,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":148,"column":34,"nodeType":"1415","messageId":"1416","endLine":148,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":171,"column":34,"nodeType":"1415","messageId":"1416","endLine":171,"endColumn":36},{"ruleId":"1540","severity":1,"message":"1541","line":198,"column":9,"nodeType":"1542","messageId":"1543","endLine":202,"endColumn":10},{"ruleId":"1413","severity":1,"message":"1414","line":229,"column":44,"nodeType":"1415","messageId":"1416","endLine":229,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":312,"column":36,"nodeType":"1415","messageId":"1416","endLine":312,"endColumn":38},{"ruleId":"1413","severity":1,"message":"1414","line":322,"column":26,"nodeType":"1415","messageId":"1416","endLine":322,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1422","line":344,"column":24,"nodeType":"1415","messageId":"1416","endLine":344,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1577","line":354,"column":17,"nodeType":"1409","messageId":"1410","endLine":354,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1578","line":355,"column":17,"nodeType":"1409","messageId":"1410","endLine":355,"endColumn":21},{"ruleId":"1413","severity":1,"message":"1414","line":356,"column":34,"nodeType":"1415","messageId":"1416","endLine":356,"endColumn":36},{"ruleId":"1428","severity":1,"message":"1440","line":384,"column":6,"nodeType":"1430","endLine":384,"endColumn":8,"suggestions":"1579"},{"ruleId":"1413","severity":1,"message":"1414","line":449,"column":45,"nodeType":"1415","messageId":"1416","endLine":449,"endColumn":47},{"ruleId":"1413","severity":1,"message":"1414","line":546,"column":61,"nodeType":"1415","messageId":"1416","endLine":546,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1570","line":25,"column":7,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1571","line":30,"column":7,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1580","line":69,"column":10,"nodeType":"1409","messageId":"1410","endLine":69,"endColumn":21},{"ruleId":"1428","severity":1,"message":"1440","line":78,"column":6,"nodeType":"1430","endLine":78,"endColumn":8,"suggestions":"1581"},{"ruleId":"1413","severity":1,"message":"1414","line":91,"column":50,"nodeType":"1415","messageId":"1416","endLine":91,"endColumn":52},{"ruleId":"1413","severity":1,"message":"1414","line":121,"column":40,"nodeType":"1415","messageId":"1416","endLine":121,"endColumn":42},{"ruleId":"1407","severity":1,"message":"1547","line":123,"column":15,"nodeType":"1409","messageId":"1410","endLine":123,"endColumn":21},{"ruleId":"1413","severity":1,"message":"1414","line":199,"column":40,"nodeType":"1415","messageId":"1416","endLine":199,"endColumn":42},{"ruleId":"1413","severity":1,"message":"1414","line":252,"column":40,"nodeType":"1415","messageId":"1416","endLine":252,"endColumn":42},{"ruleId":"1413","severity":1,"message":"1414","line":312,"column":33,"nodeType":"1415","messageId":"1416","endLine":312,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":542,"column":58,"nodeType":"1415","messageId":"1416","endLine":542,"endColumn":60},{"ruleId":"1413","severity":1,"message":"1414","line":597,"column":125,"nodeType":"1415","messageId":"1416","endLine":597,"endColumn":127},{"ruleId":"1407","severity":1,"message":"1544","line":3,"column":35,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1480","line":3,"column":47,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":58},{"ruleId":"1407","severity":1,"message":"1448","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1582","line":22,"column":10,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1583","line":53,"column":10,"nodeType":"1409","messageId":"1410","endLine":53,"endColumn":26},{"ruleId":"1428","severity":1,"message":"1440","line":70,"column":6,"nodeType":"1430","endLine":70,"endColumn":8,"suggestions":"1584"},{"ruleId":"1413","severity":1,"message":"1414","line":79,"column":50,"nodeType":"1415","messageId":"1416","endLine":79,"endColumn":52},{"ruleId":"1407","severity":1,"message":"1585","line":482,"column":9,"nodeType":"1409","messageId":"1410","endLine":482,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1544","line":3,"column":35,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1480","line":3,"column":47,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":58},{"ruleId":"1407","severity":1,"message":"1448","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1530","line":19,"column":3,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1534","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1582","line":25,"column":10,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1586","line":30,"column":19,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":29},{"ruleId":"1428","severity":1,"message":"1440","line":65,"column":6,"nodeType":"1430","endLine":65,"endColumn":8,"suggestions":"1587"},{"ruleId":"1413","severity":1,"message":"1414","line":74,"column":44,"nodeType":"1415","messageId":"1416","endLine":74,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1421","line":4,"column":19,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":28},{"ruleId":"1407","severity":1,"message":"1588","line":5,"column":8,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1448","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1470","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1450","line":16,"column":3,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1557","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1589","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1530","line":24,"column":10,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1496","line":33,"column":10,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1497","line":33,"column":22,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1499","line":34,"column":25,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":41},{"ruleId":"1428","severity":1,"message":"1590","line":51,"column":6,"nodeType":"1430","endLine":51,"endColumn":8,"suggestions":"1591"},{"ruleId":"1413","severity":1,"message":"1414","line":91,"column":59,"nodeType":"1415","messageId":"1416","endLine":91,"endColumn":61},{"ruleId":"1413","severity":1,"message":"1414","line":106,"column":57,"nodeType":"1415","messageId":"1416","endLine":106,"endColumn":59},{"ruleId":"1413","severity":1,"message":"1414","line":140,"column":23,"nodeType":"1415","messageId":"1416","endLine":140,"endColumn":25},{"ruleId":"1413","severity":1,"message":"1414","line":140,"column":42,"nodeType":"1415","messageId":"1416","endLine":140,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1414","line":140,"column":61,"nodeType":"1415","messageId":"1416","endLine":140,"endColumn":63},{"ruleId":"1413","severity":1,"message":"1414","line":140,"column":80,"nodeType":"1415","messageId":"1416","endLine":140,"endColumn":82},{"ruleId":"1413","severity":1,"message":"1422","line":142,"column":29,"nodeType":"1415","messageId":"1416","endLine":142,"endColumn":31},{"ruleId":"1407","severity":1,"message":"1433","line":4,"column":3,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1472","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1582","line":16,"column":10,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1545","line":49,"column":10,"nodeType":"1409","messageId":"1410","endLine":49,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1574","line":49,"column":16,"nodeType":"1409","messageId":"1410","endLine":49,"endColumn":23},{"ruleId":"1413","severity":1,"message":"1414","line":72,"column":44,"nodeType":"1415","messageId":"1416","endLine":72,"endColumn":46},{"ruleId":"1428","severity":1,"message":"1440","line":151,"column":6,"nodeType":"1430","endLine":151,"endColumn":8,"suggestions":"1592"},{"ruleId":"1407","severity":1,"message":"1544","line":18,"column":28,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":38},{"ruleId":"1407","severity":1,"message":"1480","line":18,"column":40,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":51},{"ruleId":"1407","severity":1,"message":"1593","line":27,"column":7,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":30},{"ruleId":"1413","severity":1,"message":"1414","line":77,"column":44,"nodeType":"1415","messageId":"1416","endLine":77,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":119,"column":32,"nodeType":"1415","messageId":"1416","endLine":119,"endColumn":34},{"ruleId":"1413","severity":1,"message":"1414","line":143,"column":16,"nodeType":"1415","messageId":"1416","endLine":143,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":144,"column":21,"nodeType":"1415","messageId":"1416","endLine":144,"endColumn":23},{"ruleId":"1413","severity":1,"message":"1422","line":145,"column":16,"nodeType":"1415","messageId":"1416","endLine":145,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1422","line":147,"column":26,"nodeType":"1415","messageId":"1416","endLine":147,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1422","line":147,"column":45,"nodeType":"1415","messageId":"1416","endLine":147,"endColumn":47},{"ruleId":"1413","severity":1,"message":"1414","line":154,"column":22,"nodeType":"1415","messageId":"1416","endLine":154,"endColumn":24},{"ruleId":"1413","severity":1,"message":"1414","line":170,"column":22,"nodeType":"1415","messageId":"1416","endLine":170,"endColumn":24},{"ruleId":"1413","severity":1,"message":"1414","line":170,"column":38,"nodeType":"1415","messageId":"1416","endLine":170,"endColumn":40},{"ruleId":"1413","severity":1,"message":"1422","line":181,"column":27,"nodeType":"1415","messageId":"1416","endLine":181,"endColumn":29},{"ruleId":"1413","severity":1,"message":"1414","line":183,"column":29,"nodeType":"1415","messageId":"1416","endLine":183,"endColumn":31},{"ruleId":"1413","severity":1,"message":"1414","line":219,"column":32,"nodeType":"1415","messageId":"1416","endLine":219,"endColumn":34},{"ruleId":"1413","severity":1,"message":"1422","line":264,"column":27,"nodeType":"1415","messageId":"1416","endLine":264,"endColumn":29},{"ruleId":"1413","severity":1,"message":"1414","line":266,"column":31,"nodeType":"1415","messageId":"1416","endLine":266,"endColumn":33},{"ruleId":"1413","severity":1,"message":"1414","line":266,"column":49,"nodeType":"1415","messageId":"1416","endLine":266,"endColumn":51},{"ruleId":"1428","severity":1,"message":"1440","line":501,"column":6,"nodeType":"1430","endLine":501,"endColumn":8,"suggestions":"1594"},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1413","severity":1,"message":"1414","line":45,"column":44,"nodeType":"1415","messageId":"1416","endLine":45,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":92,"column":34,"nodeType":"1415","messageId":"1416","endLine":92,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1459","line":1,"column":38,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":44},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1509","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1511","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1510","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1554","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1449","line":17,"column":3,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1595","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1486","line":21,"column":10,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1557","line":21,"column":15,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1484","line":21,"column":22,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1485","line":21,"column":28,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1481","line":25,"column":21,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":26},{"ruleId":"1407","severity":1,"message":"1482","line":25,"column":28,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":40},{"ruleId":"1407","severity":1,"message":"1529","line":29,"column":3,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1530","line":30,"column":3,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1531","line":31,"column":3,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1532","line":32,"column":3,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1533","line":33,"column":3,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1534","line":34,"column":3,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1582","line":37,"column":10,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1572","line":46,"column":10,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1573","line":46,"column":16,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1522","line":47,"column":10,"nodeType":"1409","messageId":"1410","endLine":47,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1439","line":47,"column":16,"nodeType":"1409","messageId":"1410","endLine":47,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1535","line":55,"column":10,"nodeType":"1409","messageId":"1410","endLine":55,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1536","line":55,"column":21,"nodeType":"1409","messageId":"1410","endLine":55,"endColumn":33},{"ruleId":"1428","severity":1,"message":"1596","line":65,"column":6,"nodeType":"1430","endLine":65,"endColumn":8,"suggestions":"1597"},{"ruleId":"1413","severity":1,"message":"1422","line":98,"column":16,"nodeType":"1415","messageId":"1416","endLine":98,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":99,"column":22,"nodeType":"1415","messageId":"1416","endLine":99,"endColumn":24},{"ruleId":"1413","severity":1,"message":"1414","line":283,"column":26,"nodeType":"1415","messageId":"1416","endLine":283,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1414","line":299,"column":40,"nodeType":"1415","messageId":"1416","endLine":299,"endColumn":42},{"ruleId":"1407","severity":1,"message":"1518","line":16,"column":42,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":67},{"ruleId":"1407","severity":1,"message":"1519","line":21,"column":7,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1520","line":22,"column":7,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1521","line":28,"column":23,"nodeType":"1409","messageId":"1410","endLine":28,"endColumn":37},{"ruleId":"1407","severity":1,"message":"1490","line":29,"column":10,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":20},{"ruleId":"1428","severity":1,"message":"1523","line":64,"column":6,"nodeType":"1430","endLine":64,"endColumn":8,"suggestions":"1598"},{"ruleId":"1413","severity":1,"message":"1414","line":101,"column":42,"nodeType":"1415","messageId":"1416","endLine":101,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1422","line":288,"column":70,"nodeType":"1415","messageId":"1416","endLine":288,"endColumn":72},{"ruleId":"1413","severity":1,"message":"1422","line":289,"column":67,"nodeType":"1415","messageId":"1416","endLine":289,"endColumn":69},{"ruleId":"1413","severity":1,"message":"1422","line":290,"column":81,"nodeType":"1415","messageId":"1416","endLine":290,"endColumn":83},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":26,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1513","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1514","line":7,"column":3,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1515","line":8,"column":3,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1516","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1467","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1535","line":38,"column":9,"nodeType":"1409","messageId":"1410","endLine":38,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1536","line":38,"column":20,"nodeType":"1409","messageId":"1410","endLine":38,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1569","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1544","line":16,"column":9,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1480","line":16,"column":21,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1570","line":21,"column":7,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1571","line":25,"column":7,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1572","line":37,"column":10,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1573","line":37,"column":16,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":23},{"ruleId":"1413","severity":1,"message":"1414","line":54,"column":44,"nodeType":"1415","messageId":"1416","endLine":54,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":81,"column":34,"nodeType":"1415","messageId":"1416","endLine":81,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":142,"column":60,"nodeType":"1415","messageId":"1416","endLine":142,"endColumn":62},{"ruleId":"1413","severity":1,"message":"1414","line":156,"column":58,"nodeType":"1415","messageId":"1416","endLine":156,"endColumn":60},{"ruleId":"1428","severity":1,"message":"1440","line":181,"column":6,"nodeType":"1430","endLine":181,"endColumn":8,"suggestions":"1599"},{"ruleId":"1413","severity":1,"message":"1414","line":238,"column":45,"nodeType":"1415","messageId":"1416","endLine":238,"endColumn":47},{"ruleId":"1413","severity":1,"message":"1414","line":338,"column":61,"nodeType":"1415","messageId":"1416","endLine":338,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1544","line":3,"column":35,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1480","line":3,"column":47,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":58},{"ruleId":"1407","severity":1,"message":"1450","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1586","line":22,"column":19,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":29},{"ruleId":"1428","severity":1,"message":"1440","line":48,"column":6,"nodeType":"1430","endLine":48,"endColumn":8,"suggestions":"1600"},{"ruleId":"1413","severity":1,"message":"1414","line":57,"column":44,"nodeType":"1415","messageId":"1416","endLine":57,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":132,"column":60,"nodeType":"1415","messageId":"1416","endLine":132,"endColumn":62},{"ruleId":"1407","severity":1,"message":"1421","line":4,"column":19,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":28},{"ruleId":"1407","severity":1,"message":"1588","line":5,"column":8,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1448","line":10,"column":3,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1470","line":14,"column":3,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1450","line":16,"column":3,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1557","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1589","line":21,"column":3,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1530","line":24,"column":10,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1496","line":33,"column":10,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1497","line":33,"column":22,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1499","line":34,"column":25,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":41},{"ruleId":"1407","severity":1,"message":"1601","line":36,"column":10,"nodeType":"1409","messageId":"1410","endLine":36,"endColumn":20},{"ruleId":"1428","severity":1,"message":"1590","line":51,"column":6,"nodeType":"1430","endLine":51,"endColumn":8,"suggestions":"1602"},{"ruleId":"1413","severity":1,"message":"1414","line":91,"column":44,"nodeType":"1415","messageId":"1416","endLine":91,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":103,"column":46,"nodeType":"1415","messageId":"1416","endLine":103,"endColumn":48},{"ruleId":"1413","severity":1,"message":"1414","line":151,"column":23,"nodeType":"1415","messageId":"1416","endLine":151,"endColumn":25},{"ruleId":"1413","severity":1,"message":"1414","line":151,"column":42,"nodeType":"1415","messageId":"1416","endLine":151,"endColumn":44},{"ruleId":"1413","severity":1,"message":"1414","line":151,"column":61,"nodeType":"1415","messageId":"1416","endLine":151,"endColumn":63},{"ruleId":"1413","severity":1,"message":"1414","line":151,"column":80,"nodeType":"1415","messageId":"1416","endLine":151,"endColumn":82},{"ruleId":"1413","severity":1,"message":"1422","line":77,"column":33,"nodeType":"1415","messageId":"1416","endLine":77,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1414","line":80,"column":33,"nodeType":"1415","messageId":"1416","endLine":80,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":119,"column":52,"nodeType":"1415","messageId":"1416","endLine":119,"endColumn":54},{"ruleId":"1413","severity":1,"message":"1422","line":120,"column":50,"nodeType":"1415","messageId":"1416","endLine":120,"endColumn":52},{"ruleId":"1413","severity":1,"message":"1422","line":172,"column":33,"nodeType":"1415","messageId":"1416","endLine":172,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1414","line":175,"column":33,"nodeType":"1415","messageId":"1416","endLine":175,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":205,"column":52,"nodeType":"1415","messageId":"1416","endLine":205,"endColumn":54},{"ruleId":"1428","severity":1,"message":"1440","line":242,"column":6,"nodeType":"1430","endLine":242,"endColumn":8,"suggestions":"1603"},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1604","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1471","line":18,"column":3,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":10},{"ruleId":"1407","severity":1,"message":"1472","line":20,"column":3,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1466","line":26,"column":10,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1500","line":31,"column":10,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1490","line":42,"column":10,"nodeType":"1409","messageId":"1410","endLine":42,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1605","line":46,"column":9,"nodeType":"1409","messageId":"1410","endLine":46,"endColumn":15},{"ruleId":"1428","severity":1,"message":"1606","line":50,"column":6,"nodeType":"1430","endLine":50,"endColumn":8,"suggestions":"1607"},{"ruleId":"1407","severity":1,"message":"1448","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1608","line":16,"column":3,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1450","line":17,"column":3,"nodeType":"1409","messageId":"1410","endLine":17,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1506","line":23,"column":8,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1500","line":31,"column":10,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1609","line":42,"column":10,"nodeType":"1409","messageId":"1410","endLine":42,"endColumn":24},{"ruleId":"1428","severity":1,"message":"1610","line":51,"column":6,"nodeType":"1430","endLine":51,"endColumn":8,"suggestions":"1611"},{"ruleId":"1413","severity":1,"message":"1422","line":115,"column":69,"nodeType":"1415","messageId":"1416","endLine":115,"endColumn":71},{"ruleId":"1413","severity":1,"message":"1414","line":233,"column":19,"nodeType":"1415","messageId":"1416","endLine":233,"endColumn":21},{"ruleId":"1413","severity":1,"message":"1414","line":235,"column":16,"nodeType":"1415","messageId":"1416","endLine":235,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":250,"column":19,"nodeType":"1415","messageId":"1416","endLine":250,"endColumn":21},{"ruleId":"1413","severity":1,"message":"1414","line":252,"column":16,"nodeType":"1415","messageId":"1416","endLine":252,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":267,"column":19,"nodeType":"1415","messageId":"1416","endLine":267,"endColumn":21},{"ruleId":"1413","severity":1,"message":"1414","line":269,"column":22,"nodeType":"1415","messageId":"1416","endLine":269,"endColumn":24},{"ruleId":"1612","severity":1,"message":"1613","line":342,"column":129,"nodeType":"1415","messageId":"1614","endLine":342,"endColumn":130},{"ruleId":"1413","severity":1,"message":"1422","line":436,"column":86,"nodeType":"1415","messageId":"1416","endLine":436,"endColumn":88},{"ruleId":"1413","severity":1,"message":"1422","line":436,"column":110,"nodeType":"1415","messageId":"1416","endLine":436,"endColumn":112},{"ruleId":"1413","severity":1,"message":"1422","line":443,"column":82,"nodeType":"1415","messageId":"1416","endLine":443,"endColumn":84},{"ruleId":"1413","severity":1,"message":"1422","line":446,"column":99,"nodeType":"1415","messageId":"1416","endLine":446,"endColumn":101},{"ruleId":"1413","severity":1,"message":"1422","line":446,"column":123,"nodeType":"1415","messageId":"1416","endLine":446,"endColumn":125},{"ruleId":"1403","replacedBy":"1615"},{"ruleId":"1405","replacedBy":"1616"},{"ruleId":"1407","severity":1,"message":"1617","line":6,"column":10,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":24},{"ruleId":"1428","severity":1,"message":"1442","line":15,"column":11,"nodeType":"1443","endLine":15,"endColumn":47},{"ruleId":"1428","severity":1,"message":"1444","line":24,"column":9,"nodeType":"1443","endLine":29,"endColumn":6,"suggestions":"1618"},{"ruleId":"1428","severity":1,"message":"1446","line":62,"column":25,"nodeType":"1447","endLine":62,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1411","line":1,"column":17,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1412","line":1,"column":27,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1619","line":14,"column":9,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1620","line":29,"column":13,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1621","line":32,"column":10,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1620","line":32,"column":13,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1482","line":7,"column":9,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":21},{"ruleId":"1407","severity":1,"message":"1622","line":8,"column":8,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1620","line":35,"column":13,"nodeType":"1409","messageId":"1410","endLine":35,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1421","line":1,"column":9,"nodeType":"1409","messageId":"1410","endLine":1,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":15,"column":51,"nodeType":"1415","messageId":"1416","endLine":15,"endColumn":53},{"ruleId":"1413","severity":1,"message":"1422","line":31,"column":34,"nodeType":"1415","messageId":"1416","endLine":31,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":42,"column":24,"nodeType":"1415","messageId":"1416","endLine":42,"endColumn":26},{"ruleId":"1413","severity":1,"message":"1414","line":56,"column":73,"nodeType":"1415","messageId":"1416","endLine":56,"endColumn":75},{"ruleId":"1423","severity":1,"message":"1424","line":36,"column":11,"nodeType":"1420","endLine":36,"endColumn":23},{"ruleId":"1428","severity":1,"message":"1623","line":73,"column":5,"nodeType":"1430","endLine":73,"endColumn":7,"suggestions":"1624"},{"ruleId":"1413","severity":1,"message":"1414","line":187,"column":37,"nodeType":"1415","messageId":"1416","endLine":187,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1625","line":30,"column":7,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1544","line":3,"column":35,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1480","line":3,"column":47,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":58},{"ruleId":"1407","severity":1,"message":"1620","line":19,"column":14,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1586","line":21,"column":19,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":29},{"ruleId":"1407","severity":1,"message":"1626","line":37,"column":10,"nodeType":"1409","messageId":"1410","endLine":37,"endColumn":26},{"ruleId":"1428","severity":1,"message":"1440","line":47,"column":6,"nodeType":"1430","endLine":47,"endColumn":8,"suggestions":"1627"},{"ruleId":"1413","severity":1,"message":"1414","line":121,"column":60,"nodeType":"1415","messageId":"1416","endLine":121,"endColumn":62},{"ruleId":"1413","severity":1,"message":"1414","line":241,"column":43,"nodeType":"1415","messageId":"1416","endLine":241,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1628","line":252,"column":9,"nodeType":"1409","messageId":"1410","endLine":252,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1569","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1544","line":16,"column":9,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1480","line":16,"column":21,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":32},{"ruleId":"1407","severity":1,"message":"1620","line":23,"column":14,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1572","line":31,"column":10,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1573","line":31,"column":16,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":23},{"ruleId":"1413","severity":1,"message":"1414","line":48,"column":44,"nodeType":"1415","messageId":"1416","endLine":48,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":75,"column":34,"nodeType":"1415","messageId":"1416","endLine":75,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":136,"column":60,"nodeType":"1415","messageId":"1416","endLine":136,"endColumn":62},{"ruleId":"1413","severity":1,"message":"1414","line":150,"column":58,"nodeType":"1415","messageId":"1416","endLine":150,"endColumn":60},{"ruleId":"1428","severity":1,"message":"1440","line":175,"column":6,"nodeType":"1430","endLine":175,"endColumn":8,"suggestions":"1629"},{"ruleId":"1413","severity":1,"message":"1414","line":232,"column":45,"nodeType":"1415","messageId":"1416","endLine":232,"endColumn":47},{"ruleId":"1413","severity":1,"message":"1414","line":332,"column":61,"nodeType":"1415","messageId":"1416","endLine":332,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1620","line":19,"column":14,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1586","line":21,"column":19,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":29},{"ruleId":"1428","severity":1,"message":"1440","line":41,"column":6,"nodeType":"1430","endLine":41,"endColumn":8,"suggestions":"1630"},{"ruleId":"1413","severity":1,"message":"1414","line":50,"column":44,"nodeType":"1415","messageId":"1416","endLine":50,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":111,"column":60,"nodeType":"1415","messageId":"1416","endLine":111,"endColumn":62},{"ruleId":"1413","severity":1,"message":"1414","line":230,"column":43,"nodeType":"1415","messageId":"1416","endLine":230,"endColumn":45},{"ruleId":"1407","severity":1,"message":"1439","line":138,"column":9,"nodeType":"1409","messageId":"1410","endLine":138,"endColumn":16},{"ruleId":"1413","severity":1,"message":"1414","line":238,"column":69,"nodeType":"1415","messageId":"1416","endLine":238,"endColumn":71},{"ruleId":"1407","severity":1,"message":"1569","line":11,"column":3,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1620","line":22,"column":14,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":18},{"ruleId":"1413","severity":1,"message":"1414","line":46,"column":44,"nodeType":"1415","messageId":"1416","endLine":46,"endColumn":46},{"ruleId":"1413","severity":1,"message":"1414","line":73,"column":34,"nodeType":"1415","messageId":"1416","endLine":73,"endColumn":36},{"ruleId":"1413","severity":1,"message":"1414","line":133,"column":60,"nodeType":"1415","messageId":"1416","endLine":133,"endColumn":62},{"ruleId":"1413","severity":1,"message":"1414","line":147,"column":58,"nodeType":"1415","messageId":"1416","endLine":147,"endColumn":60},{"ruleId":"1428","severity":1,"message":"1440","line":172,"column":6,"nodeType":"1430","endLine":172,"endColumn":8,"suggestions":"1631"},{"ruleId":"1413","severity":1,"message":"1414","line":229,"column":45,"nodeType":"1415","messageId":"1416","endLine":229,"endColumn":47},{"ruleId":"1413","severity":1,"message":"1414","line":329,"column":61,"nodeType":"1415","messageId":"1416","endLine":329,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1622","line":20,"column":8,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1521","line":26,"column":23,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":37},{"ruleId":"1407","severity":1,"message":"1490","line":27,"column":10,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1632","line":31,"column":16,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1633","line":32,"column":18,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1634","line":33,"column":19,"nodeType":"1409","messageId":"1410","endLine":33,"endColumn":29},{"ruleId":"1407","severity":1,"message":"1635","line":34,"column":20,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":31},{"ruleId":"1428","severity":1,"message":"1523","line":60,"column":6,"nodeType":"1430","endLine":60,"endColumn":8,"suggestions":"1636"},{"ruleId":"1413","severity":1,"message":"1414","line":97,"column":42,"nodeType":"1415","messageId":"1416","endLine":97,"endColumn":44},{"ruleId":"1407","severity":1,"message":"1637","line":182,"column":9,"nodeType":"1409","messageId":"1410","endLine":182,"endColumn":19},{"ruleId":"1413","severity":1,"message":"1422","line":274,"column":58,"nodeType":"1415","messageId":"1416","endLine":274,"endColumn":60},{"ruleId":"1413","severity":1,"message":"1422","line":275,"column":62,"nodeType":"1415","messageId":"1416","endLine":275,"endColumn":64},{"ruleId":"1413","severity":1,"message":"1422","line":276,"column":64,"nodeType":"1415","messageId":"1416","endLine":276,"endColumn":66},{"ruleId":"1413","severity":1,"message":"1422","line":277,"column":66,"nodeType":"1415","messageId":"1416","endLine":277,"endColumn":68},{"ruleId":"1413","severity":1,"message":"1422","line":292,"column":80,"nodeType":"1415","messageId":"1416","endLine":292,"endColumn":82},{"ruleId":"1413","severity":1,"message":"1422","line":293,"column":78,"nodeType":"1415","messageId":"1416","endLine":293,"endColumn":80},{"ruleId":"1413","severity":1,"message":"1422","line":294,"column":91,"nodeType":"1415","messageId":"1416","endLine":294,"endColumn":93},{"ruleId":"1407","severity":1,"message":"1506","line":18,"column":8,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1620","line":25,"column":13,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1500","line":26,"column":10,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1609","line":31,"column":10,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":24},{"ruleId":"1407","severity":1,"message":"1620","line":22,"column":14,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1500","line":23,"column":10,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1490","line":34,"column":10,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1605","line":38,"column":9,"nodeType":"1409","messageId":"1410","endLine":38,"endColumn":15},{"ruleId":"1428","severity":1,"message":"1606","line":42,"column":6,"nodeType":"1430","endLine":42,"endColumn":8,"suggestions":"1638"},{"ruleId":"1407","severity":1,"message":"1421","line":27,"column":19,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":28},{"ruleId":"1413","severity":1,"message":"1422","line":69,"column":33,"nodeType":"1415","messageId":"1416","endLine":69,"endColumn":35},{"ruleId":"1413","severity":1,"message":"1422","line":103,"column":52,"nodeType":"1415","messageId":"1416","endLine":103,"endColumn":54},{"ruleId":"1428","severity":1,"message":"1440","line":142,"column":6,"nodeType":"1430","endLine":142,"endColumn":8,"suggestions":"1639"},{"ruleId":"1407","severity":1,"message":"1617","line":3,"column":10,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":24},"no-native-reassign",["1640"],"no-negated-in-lhs",["1641"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getCookie' is defined but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CModalHeader' is defined but never used.","'showMock' is assigned a value but never used.","'setShowMock' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchParks', 'location.pathname', and 'noParkPages'. Either include them or remove the dependency array.","ArrayExpression",["1642"],"'urls' is assigned a value but never used.","'CBadge' is defined but never used.","'functionalities' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'setDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadGenerators'. Either include it or remove the dependency array.",["1643"],"The 'events' array makes the dependencies of useEffect Hook (at line 82) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'events' in its own useMemo() Hook.","VariableDeclarator","The 'timeChecker' function makes the dependencies of useEffect Hook (at line 82) change on every render. To fix this, wrap the definition of 'timeChecker' in its own useCallback() Hook.",["1644"],"Assignments to the 'timeStamp' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","CallExpression","'CCardGroup' is defined but never used.","'CLink' is defined but never used.","'CLabel' is defined but never used.","'reports' is assigned a value but never used.","'locations' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadConfiguration'. Either include it or remove the dependency array.",["1645"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useRef' is defined but never used.","'CDataTable' is defined but never used.","'CInputCheckbox' is defined but never used.","'loaded' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'setCookie' is defined but never used.","'CCardHeader' is defined but never used.","'CRow' is defined but never used.","'CCol' is defined but never used.","'CButton' is defined but never used.","'CSelect' is defined but never used.","'CSpinner' is defined but never used.","'CModal' is defined but never used.","'CModalBody' is defined but never used.",["1640"],["1641"],"'CImg' is defined but never used.","'DataAPI' is defined but never used.","'formatNumber' is defined but never used.","'formatDate2' is defined but never used.","'round' is defined but never used.","'getDateLabel' is defined but never used.","'DateFilter' is defined but never used.","'Line' is defined but never used.","'Scatter' is defined but never used.","'Bar' is defined but never used.","'ChartLoading' is defined but never used.","'generator' is assigned a value but never used.","'setGenerator' is assigned a value but never used.","'generators' is assigned a value but never used.","'setGenerators' is assigned a value but never used.","'generatorsLoaded' is assigned a value but never used.","'setGeneratorsLoaded' is assigned a value but never used.","'dateRange' is assigned a value but never used.","'setDateRange' is assigned a value but never used.","'dataLoaded' is assigned a value but never used.","'setDataLoaded' is assigned a value but never used.","'dataLoadError' is assigned a value but never used.","'setDataLoadError' is assigned a value but never used.","'loading' is assigned a value but never used.","'res' is defined but never used.",["1646"],"'lazy' is defined but never used.","'CWidgetDropdown' is defined but never used.","'CCardTitle' is defined but never used.","'CIcon' is defined but never used.",["1647"],"'options' is assigned a value but never used.","'CButtonGroup' is defined but never used.","'CCardFooter' is defined but never used.","'CProgress' is defined but never used.","'CCallout' is defined but never used.","'CDropdown' is defined but never used.","'CDropdownMenu' is defined but never used.","'CDropdownItem' is defined but never used.","'CDropdownToggle' is defined but never used.","'MainChartExample' is defined but never used.","'getCurrentDateNDaysBefore' is defined but never used.","'WidgetsDropdown' is assigned a value but never used.","'WidgetsBrand' is assigned a value but never used.","'setDataLoaded2' is assigned a value but never used.","'date' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadGenerators', 'period', and 'refreshChart'. Either include them or remove the dependency array.",["1648"],"'fields' is assigned a value but never used.","'getBadge' is assigned a value but never used.","'ChartLineSimple' is defined but never used.","'ChartBarSimple' is defined but never used.","'CChartBar' is defined but never used.","'CChartLine' is defined but never used.","'CChartDoughnut' is defined but never used.","'CChartRadar' is defined but never used.","'CChartPie' is defined but never used.","'CChartPolarArea' is defined but never used.","'graphData' is assigned a value but never used.","'setGraphData' is assigned a value but never used.","'CContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchParks'. Either include it or remove the dependency array.",["1649"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'formatDate' is defined but never used.","'data' is assigned a value but never used.","'curves' is assigned a value but never used.","'labels' is assigned a value but never used.","'setLabels' is assigned a value but never used.","'performanceItems' is assigned a value but never used.","'setPerformanceItems' is assigned a value but never used.","'graphOptions' is assigned a value but never used.","'setGraphOptions' is assigned a value but never used.",["1650"],"'CFormSelect' is defined but never used.","'CModalFooter' is defined but never used.","'CModalTitle' is defined but never used.","'Chart' is defined but never used.","'func' is defined but never used.","'filtersSelected' is assigned a value but never used.","'setFiltersSelected' is assigned a value but never used.",["1651"],"'performance' is assigned a value but never used.","'performanceFields' is assigned a value but never used.","'setCurves' is assigned a value but never used.","'setPerformance' is assigned a value but never used.",["1652"],"'colors' is assigned a value but never used.",["1653"],"'Fade' is defined but never used.","'rand' is assigned a value but never used.","'ctx' is assigned a value but never used.","'park' is assigned a value but never used.","'setPark' is assigned a value but never used.","'setData' is assigned a value but never used.","'generatorsButtons' is assigned a value but never used.","'setGeneratorsButtons' is assigned a value but never used.","'rDfrom' is assigned a value but never used.","'rDto' is assigned a value but never used.",["1654"],"'dataLoaded2' is assigned a value but never used.",["1655"],"'DocsLink' is defined but never used.","'barChartFourData' is assigned a value but never used.",["1656"],"'options4' is assigned a value but never used.","'setGroupBy' is assigned a value but never used.",["1657"],"'moment' is defined but never used.","'Plugin' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1658"],["1659"],"'fieldsAlarmsByGenerator' is assigned a value but never used.",["1660"],"'CTextarea' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData' and 'fetchGenerators'. Either include them or remove the dependency array.",["1661"],["1662"],["1663"],["1664"],"'arrowImage' is assigned a value but never used.",["1665"],["1666"],"'CFormGroup' is defined but never used.","'months' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["1667"],"'CAlert' is defined but never used.","'clientResponse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchEstimations' and 'fetchNeighbors'. Either include them or remove the dependency array.",["1668"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["1640"],["1641"],"'useTranslation' is defined but never used.",["1669"],"'location' is assigned a value but never used.","'i18n' is assigned a value but never used.","'t' is assigned a value but never used.","'i18n' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchClients', 'fetchParks', 'location.pathname', and 'noParkPages'. Either include them or remove the dependency array.",["1670"],"'Dashboard' is assigned a value but never used.","'lineChartTwoData' is assigned a value but never used.",["1671"],"'options2' is assigned a value but never used.",["1672"],["1673"],["1674"],"'setUser' is assigned a value but never used.","'setRegion' is assigned a value but never used.","'setCountry' is assigned a value but never used.","'setCapacity' is assigned a value but never used.",["1675"],"'optionsBar' is assigned a value but never used.",["1676"],["1677"],"no-global-assign","no-unsafe-negation",{"desc":"1678","fix":"1679"},{"desc":"1680","fix":"1681"},{"desc":"1682","fix":"1683"},{"desc":"1684","fix":"1685"},{"desc":"1680","fix":"1686"},{"desc":"1680","fix":"1687"},{"desc":"1688","fix":"1689"},{"desc":"1690","fix":"1691"},{"desc":"1680","fix":"1692"},{"desc":"1680","fix":"1693"},{"desc":"1680","fix":"1694"},{"desc":"1680","fix":"1695"},{"desc":"1680","fix":"1696"},{"desc":"1680","fix":"1697"},{"desc":"1680","fix":"1698"},{"desc":"1680","fix":"1699"},{"desc":"1700","fix":"1701"},{"desc":"1680","fix":"1702"},{"desc":"1680","fix":"1703"},{"desc":"1704","fix":"1705"},{"desc":"1688","fix":"1706"},{"desc":"1680","fix":"1707"},{"desc":"1680","fix":"1708"},{"desc":"1700","fix":"1709"},{"desc":"1680","fix":"1710"},{"desc":"1711","fix":"1712"},{"desc":"1713","fix":"1714"},{"desc":"1682","fix":"1715"},{"desc":"1716","fix":"1717"},{"desc":"1680","fix":"1718"},{"desc":"1680","fix":"1719"},{"desc":"1680","fix":"1720"},{"desc":"1680","fix":"1721"},{"desc":"1688","fix":"1722"},{"desc":"1711","fix":"1723"},{"desc":"1680","fix":"1724"},"Update the dependencies array to be: [fetchParks, location.pathname, noParkPages]",{"range":"1725","text":"1726"},"Update the dependencies array to be: [loadGenerators]",{"range":"1727","text":"1728"},"Wrap the definition of 'timeChecker' in its own useCallback() Hook.",{"range":"1729","text":"1730"},"Update the dependencies array to be: [loadConfiguration]",{"range":"1731","text":"1732"},{"range":"1733","text":"1728"},{"range":"1734","text":"1728"},"Update the dependencies array to be: [loadGenerators, period, refreshChart]",{"range":"1735","text":"1736"},"Update the dependencies array to be: [fetchParks]",{"range":"1737","text":"1738"},{"range":"1739","text":"1728"},{"range":"1740","text":"1728"},{"range":"1741","text":"1728"},{"range":"1742","text":"1728"},{"range":"1743","text":"1728"},{"range":"1744","text":"1728"},{"range":"1745","text":"1728"},{"range":"1746","text":"1728"},"Update the dependencies array to be: [fetchData]",{"range":"1747","text":"1748"},{"range":"1749","text":"1728"},{"range":"1750","text":"1728"},"Update the dependencies array to be: [fetchData, fetchGenerators]",{"range":"1751","text":"1752"},{"range":"1753","text":"1736"},{"range":"1754","text":"1728"},{"range":"1755","text":"1728"},{"range":"1756","text":"1748"},{"range":"1757","text":"1728"},"Update the dependencies array to be: [loadUser]",{"range":"1758","text":"1759"},"Update the dependencies array to be: [fetchEstimations, fetchNeighbors]",{"range":"1760","text":"1761"},{"range":"1762","text":"1730"},"Update the dependencies array to be: [fetchClients, fetchParks, location.pathname, noParkPages]",{"range":"1763","text":"1764"},{"range":"1765","text":"1728"},{"range":"1766","text":"1728"},{"range":"1767","text":"1728"},{"range":"1768","text":"1728"},{"range":"1769","text":"1736"},{"range":"1770","text":"1759"},{"range":"1771","text":"1728"},[1492,1494],"[fetchParks, location.pathname, noParkPages]",[7357,7359],"[loadGenerators]",[569,810],"useCallback(() => {\r\n        startTimerInterval.current = setTimeout(() => {\r\n            let storedTimeStamp = getCookie('lastTimeStamp'); //sessionStorage.getItem('lastTimeStamp');\r\n            userInactive(storedTimeStamp);\r\n        }, 60000);\r\n    })",[1148,1150],"[loadConfiguration]",[1218,1220],[1119,1121],[2326,2328],"[loadGenerators, period, refreshChart]",[2497,2499],"[fetchParks]",[1892,1894],[2300,2302],[1992,1994],[5297,5299],[13738,13740],[2405,2407],[2203,2205],[1986,1988],[1241,1243],"[fetchData]",[4355,4357],[13301,13303],[1632,1634],"[fetchData, fetchGenerators]",[1800,1802],[5448,5450],[1576,1578],[1246,1248],[7148,7150],[1432,1434],"[loadUser]",[1590,1592],"[fetchEstimations, fetchNeighbors]",[569,810],[2034,2036],"[fetchClients, fetchParks, location.pathname, noParkPages]",[1615,1617],[5459,5461],[1409,1411],[5338,5340],[1728,1730],[1396,1398],[3911,3913]]