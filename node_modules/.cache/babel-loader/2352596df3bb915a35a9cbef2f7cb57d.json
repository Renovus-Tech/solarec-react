{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\diagnostics\\\\diagnostics.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Scatter } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x');\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generator = _useState4[0],\n      setGenerator = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generatorsLoaded = _useState8[0],\n      setGeneratorsLoaded = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      park = _useState10[0],\n      setPark = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      date = _useState12[0],\n      setDate = _useState12[1];\n\n  var _useState13 = useState('12w'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dateRange = _useState14[0],\n      setDateRange = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      data = _useState16[0],\n      setData = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      dataLoaded = _useState18[0],\n      setDataLoaded = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      dataLoadError = _useState20[0],\n      setDataLoadError = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      loading = _useState22[0],\n      setLoading = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      curves = _useState24[0],\n      setCurves = _useState24[1];\n\n  var _useState25 = useState({}),\n      _useState26 = _slicedToArray(_useState25, 2),\n      performance = _useState26[0],\n      setPerformance = _useState26[1];\n\n  var fetchData = function fetchData(dateRange) {\n    var period = options.period,\n        generator = options.generator;\n    setLoading(true);\n    var body = {}; // console.log('.....', period, period.split('-').length)\n\n    if (dateRange && dateRange.split('--').length == 2) {\n      body.from = dateRange.split('--')[0];\n      body.to = dateRange.split('--')[1];\n    } else {\n      body.period = dateRange;\n    }\n\n    DataAPI({\n      'endpoint': 'chart/pitchWindspeed',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      } // if (!response.generator) return(alert('No generator datasets'));\n\n\n      var generatorData = response.generator && response.generator[0].data;\n      setDataLoaded(true);\n      setData(response);\n\n      if (generatorData && generatorData.hasOwnProperty('curves')) {// setCurves(generatorData.curves);\n        // refreshChart(generatorData.curves);\n      } else {\n        setCurves([]);\n      }\n    });\n  }; //   const refreshChart = (curves) => {\n  //     if (curves.length==0) return;\n  //       // const graphData = {\n  //       //   labels: [],\n  //       //   datasets: [],\n  //       //   backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n  //       // }\n  //       const labels = [];\n  //       const labels2 = [];\n  //       curves[0].x.forEach(\n  //         x => {\n  //           labels.push(round(x))\n  //         }\n  //       );\n  //       const graphData = {\n  //         labels: [],\n  //         datasets: [\n  //           {\n  //             label:  curves[0].label,\n  //             data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\n  //             backgroundColor: 'rgba(255, 99, 132, 1)',\n  //           },\n  //           {\n  //             label:  curves[1].label,\n  //             data: curves[1].x.map((x, i) => ({ x, y: curves[0].y[i] })),\n  //             backgroundColor: 'rgba(44, 99, 132, 1)',\n  //           },\n  //         ],\n  //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n  //       }\n  //       /*curves[0].x.forEach(\n  //         x => {\n  //           labels.push(round(x))\n  //         }\n  //       );\n  //       dataset.data = curves[0].y;\n  //       dataset2.data = curves[1].y;\n  //       const max = Math.ceil(Math.max(...curves[2].x));\n  //       const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\n  //       const percentages = [];\n  //       let aux;\n  //       let qty;\n  //       let percentage;\n  //       const qtyTotal = curves[2].x.length;\n  //       windSpeeds.forEach(\n  //         function process(windSpeed) { \n  //           aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\n  //           qty = aux.length;\n  //           percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\n  //           // percentage = (qty*100/qtyTotal) * 100 / 100;\n  //           // percentage = +(Math.round(percentage + \"e+2\")  + \"e-2\");\n  //           percentages.push(percentage);\n  //           graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\n  //         }\n  //       );\n  //       dataset3.data = percentages;\n  // */\n  //       // graphData.datasets.push(dataset);\n  //       // graphData.datasets.push(dataset2);\n  //       // graphData.labels = labels;\n  //       setGraphData(graphData);\n  // }\n\n\n  useEffect(function () {\n    fetchData(dateRange);\n  }, []);\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este a√±o']; // const data2 = {\n  //   datasets: [\n  //     {\n  //       label: 'A dataset',\n  //       data: [{x:4,y:55},{x:66,y:43}],\n  //       backgroundColor: 'rgba(255, 99, 132, 1)',\n  //     },\n  //   ],\n  // }\n\n  var change = function change(ev) {};\n\n  var refreshChart = function refreshChart(dateRange) {\n    fetchData(dateRange);\n  };\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"7\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Diagnostics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"5\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['cm', 'cy', '12w', '12m', 'x'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n              fetchData(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 16\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: graphData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Charts, \"EcZH3ZXtTx6zStny6IkpZQzrSP8=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/diagnostics/diagnostics.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Scatter","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","generator","setGenerator","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","park","setPark","date","setDate","dateRange","setDateRange","data","setData","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","curves","setCurves","performance","setPerformance","fetchData","period","options","body","split","length","from","to","then","response","error","message","alert","generatorData","hasOwnProperty","dataSets","parks","dates","change","ev","refreshChart","animation","duration","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect\r\n} from '@coreui/react'\r\n\r\n\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Scatter } from 'react-chartjs-2';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [generator, setGenerator] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [data, setData] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [curves, setCurves] = useState([]);\r\n  const [performance, setPerformance] = useState({});\r\n\r\n\r\n  const fetchData = (dateRange) => {\r\n\r\n    const {period, generator} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    // console.log('.....', period, period.split('-').length)\r\n\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n\r\n    \r\n    DataAPI({\r\n      'endpoint': 'chart/pitchWindspeed',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n          // if (!response.generator) return(alert('No generator datasets'));\r\n\r\n          const generatorData = response.generator && response.generator[0].data;\r\n\r\n          setDataLoaded(true);\r\n          setData(response);\r\n\r\n          if(generatorData && generatorData.hasOwnProperty('curves')){\r\n            // setCurves(generatorData.curves);\r\n            // refreshChart(generatorData.curves);\r\n\r\n            \r\n          } else {\r\n            setCurves([]);\r\n          }\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n//   const refreshChart = (curves) => {\r\n\r\n\r\n//     if (curves.length==0) return;\r\n    \r\n\r\n//       // const graphData = {\r\n//       //   labels: [],\r\n//       //   datasets: [],\r\n//       //   backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n//       // }\r\n\r\n//       const labels = [];\r\n\r\n//       const labels2 = [];\r\n\r\n//       curves[0].x.forEach(\r\n//         x => {\r\n//           labels.push(round(x))\r\n//         }\r\n//       );\r\n\r\n//       const graphData = {\r\n//         labels: [],\r\n//         datasets: [\r\n//           {\r\n//             label:  curves[0].label,\r\n//             data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n//             backgroundColor: 'rgba(255, 99, 132, 1)',\r\n//           },\r\n//           {\r\n//             label:  curves[1].label,\r\n//             data: curves[1].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n//             backgroundColor: 'rgba(44, 99, 132, 1)',\r\n//           },\r\n//         ],\r\n//         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n    \r\n//       }\r\n\r\n\r\n//       /*curves[0].x.forEach(\r\n//         x => {\r\n//           labels.push(round(x))\r\n//         }\r\n//       );\r\n\r\n//       dataset.data = curves[0].y;\r\n//       dataset2.data = curves[1].y;\r\n\r\n\r\n//       const max = Math.ceil(Math.max(...curves[2].x));\r\n//       const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\r\n//       const percentages = [];\r\n//       let aux;\r\n//       let qty;\r\n//       let percentage;\r\n//       const qtyTotal = curves[2].x.length;\r\n//       windSpeeds.forEach(\r\n//         function process(windSpeed) { \r\n//           aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\r\n//           qty = aux.length;\r\n//           percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\r\n\r\n//           // percentage = (qty*100/qtyTotal) * 100 / 100;\r\n//           // percentage = +(Math.round(percentage + \"e+2\")  + \"e-2\");\r\n\r\n//           percentages.push(percentage);\r\n//           graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\r\n//         }\r\n//       );\r\n\r\n//       dataset3.data = percentages;\r\n// */\r\n\r\n//       // graphData.datasets.push(dataset);\r\n//       // graphData.datasets.push(dataset2);\r\n\r\n//       // graphData.labels = labels;\r\n\r\n//       setGraphData(graphData);\r\n\r\n\r\n// }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData(dateRange);\r\n  }, []);\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este a√±o'\r\n  ]\r\n\r\n\r\n  // const data2 = {\r\n  //   datasets: [\r\n  //     {\r\n  //       label: 'A dataset',\r\n  //       data: [{x:4,y:55},{x:66,y:43}],\r\n  //       backgroundColor: 'rgba(255, 99, 132, 1)',\r\n  //     },\r\n  //   ],\r\n\r\n  // }\r\n\r\n\r\n  const change = (ev) => {\r\n  }\r\n\r\n  const refreshChart = (dateRange) => {\r\n    fetchData(dateRange);\r\n  }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Diagnostics\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n               <CCol sm=\"5\" class=\"text-right\">\r\n\r\n            <DateFilter value={dateRange} options={['cm','cy','12w','12m','x']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData(value);}} />\r\n\r\n                            </CCol>\r\n\r\n            \r\n                            </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n         \r\n          {/* <Scatter data={data2} options={options} /> */}\r\n          <Scatter data={graphData} options={options} />\r\n        </CCardBody>\r\n\r\n      </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}