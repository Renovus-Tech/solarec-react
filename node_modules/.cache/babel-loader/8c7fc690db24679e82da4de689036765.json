{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\power-curve\\\\benchmark.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CDataTable, CBadge, CSelect, CModal, CModalHeader, CModalFooter, CModalBody, CModalTitle, CSpinner, CContainer } from '@coreui/react';\nimport { CChartLine } from '@coreui/react-chartjs';\nimport Multiselect from 'multiselect-react-dropdown';\nimport { Line } from 'react-chartjs-2';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, formatDate, round, getDateLabel, formatNumber } from '../../../helpers/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      curves = _useState10[0],\n      setCurves = _useState10[1];\n\n  var _useState11 = useState('cm'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dateRange = _useState12[0],\n      setDateRange = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      windSector = _useState14[0],\n      setWindSector = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      generators = _useState16[0],\n      setGenerators = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      generatorsLoaded = _useState18[0],\n      setGeneratorsLoaded = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      selectedGenerators = _useState20[0],\n      setSelectedGenerators = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      filterSubmitted = _useState22[0],\n      setFilterSubmitted = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      generatorColors = _useState24[0],\n      setGeneratorColors = _useState24[1];\n\n  var _useState25 = useState({}),\n      _useState26 = _slicedToArray(_useState25, 2),\n      performance = _useState26[0],\n      setPerformance = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      generatorsSelected = _useState28[0],\n      setGeneratorsSelected = _useState28[1];\n\n  var _useState29 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState30 = _slicedToArray(_useState29, 2),\n      graphData = _useState30[0],\n      setGraphData = _useState30[1];\n\n  var colors = ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600', '#9ceb01'];\n  var angles = [\"0-45\", \"45-90\", \"90-135\", \"135-180\", \"180-225\", \"225-270\", \"270-315\", \"315-360\"];\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var fetchData = function fetchData() {\n    var period = options.period,\n        windSector = options.windSector;\n    setLoading(true);\n    var body = {};\n    if (selectedGenerators) body.generators = selectedGenerators;\n\n    if (windSector) {\n      body.angleFrom = windSector.split('-')[0];\n      body.angleTo = windSector.split('-')[1];\n    }\n\n    if (dateRange && dateRange.split('--').length == 2) {\n      body.from = dateRange.split('--')[0];\n      body.to = dateRange.split('--')[1];\n    } else {\n      body.period = dateRange;\n    }\n\n    DataAPI({\n      'endpoint': 'chart/powerCurve',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      setDataLoaded(true);\n      setData(response);\n      refreshChart(response);\n    });\n  };\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerators(response.generators); // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\n\n        var colorIndex = 0;\n        response.generators.forEach(function (gen) {\n          generatorColors[gen.code] = colors[colorIndex % colors.length];\n          setGeneratorColors(generatorColors);\n          colorIndex++;\n        });\n        setGeneratorsLoaded(true);\n      }\n    });\n  };\n\n  var refreshChart = function refreshChart(generatorData) {\n    var generators = generatorData.generator;\n    if (generators.length == 0) return;\n    var graphData = {\n      labels: [],\n      datasets: [],\n      backgroundColor: colors\n    };\n    var datasetManufacturerData = {\n      label: \"Manufacturer Data\",\n      backgroundColor: \"blue\",\n      data: generators[0].data.curves[0].x.map(function (x, i) {\n        return {\n          x: x,\n          y: generators[0].data.curves[0].y[i]\n        };\n      })\n    };\n    graphData.datasets.push(datasetManufacturerData);\n    var productionTotal = generators[0].data.curves[1].x.map(function (x) {\n      return 0;\n    });\n    generators.forEach(function (generator, index) {\n      var dataset = {\n        label: generator.code,\n        // borderColor: generatorColors[generator.code],//[index%7],\n        // pointBackgroundColor: 'transparent',\n        // pointBorderColor: 'transparent',\n        backgroundColor: generatorColors[generator.code],\n        //'transparent',\n        data: generator.data.curves[1].x.map(function (x, i) {\n          productionTotal[i] += generator.data.curves[1].y[i];\n          return {\n            x: x,\n            y: generator.data.curves[1].y[i]\n          };\n        })\n      };\n      graphData.datasets.push(dataset);\n    });\n    var datasetAverage = {\n      label: \"Average\",\n      // borderColor: \"#2d2d2d\",\n      // pointBackgroundColor: 'transparent',\n      // pointBorderColor: 'transparent',\n      backgroundColor: \"#2d2d2d\",\n      //'transparent',\n      data: productionTotal.map(function (y, i) {\n        return {\n          x: generators[0].data.curves[1].x[i],\n          y: y / generators.length\n        };\n      })\n    };\n    graphData.datasets.push(datasetAverage);\n    var labels = [];\n    generators[0].data.curves[0].x.forEach(function (x) {\n      labels.push(round(x));\n    });\n    graphData.labels = labels;\n    setGraphData(graphData);\n  };\n\n  var selectGenerator = function selectGenerator(id) {\n    var newSelected = selectedGenerators;\n    newSelected = newSelected.includes(id) ? newSelected.filter(function (i) {\n      return i !== id;\n    }) // remove item\n    : [].concat(_toConsumableArray(newSelected), [id]); // add item\n\n    setSelectedGenerators(newSelected);\n  };\n\n  var filterGenerators = function filterGenerators() {\n    setDataLoaded(false);\n    setGeneratorsSelected(false);\n    setFilterSubmitted(true);\n\n    if (selectedGenerators.length > 0) {\n      setLoading(true);\n      setGeneratorsSelected(true);\n      fetchData({\n        period: dateRange,\n        windSector: windSector\n      });\n    }\n  };\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title() {},\n          label: function label(tooltipItem, data) {\n            return ['Power: ' + formatNumber(round(tooltipItem.raw.y, 1)) + ' kWh', 'Wind Speed: ' + formatNumber(round(tooltipItem.label, 1)) + \" m/s\"];\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Power Curve - Benchmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          className: \"text-right d-flex flex-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-4 m-0\",\n            style: {\n              lineHeight: 1.2\n            },\n            children: \"Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['cm', '30d', 'cy', '12w', '12m', 'x', 'xx'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-4 m-0\",\n            style: {\n              lineHeight: 1.2,\n              minWidth: '72px'\n            },\n            children: \"Wind sector\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            value: windSector,\n            disabled: loading,\n            onChange: function onChange(ev) {\n              setWindSector(ev.target.value);\n            },\n            custom: true,\n            name: \"period\",\n            id: \"period\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"0-45\",\n              children: \"0-45\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"45-90\",\n              children: \"45-90\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"90-135\",\n              children: \"90-135\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"135-180\",\n              children: \"135-180\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"180-225\",\n              children: \"180-225\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"225-270\",\n              children: \"225-270\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"270-315\",\n              children: \"270-315\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"315-360\",\n              children: \"315-360\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"multiselect-container mr-2\",\n            children: /*#__PURE__*/_jsxDEV(Multiselect, {\n              disabled: loading,\n              options: angles.map(function (angle) {\n                return {\n                  id: angle.id,\n                  name: angle\n                };\n              }),\n              onSelect: function onSelect(selectedList) {\n                setWindSectors(selectedList.map(function (gen) {\n                  return gen.id;\n                }));\n              } // Function will trigger on select event\n              ,\n              onRemove: function onRemove(selectedList) {\n                setSelectedGenerators(selectedList.map(function (gen) {\n                  return gen.id;\n                }));\n              } // Function will trigger on remove event\n              // displayValue=\"name\" // Property name to display in the dropdown options\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        className: \"py-3 mb-4 mx-0 bg-light\",\n        style: {\n          borderRadius: \"3px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"9\",\n          children: generatorsLoaded && generators.map(function (gen, index) {\n            return /*#__PURE__*/_jsxDEV(CButton, {\n              style: {\n                backgroundColor: generatorColors[gen.code],\n                color: 'white'\n              },\n              className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-2 my-2\",\n              onClick: function onClick() {\n                return selectGenerator(gen.id);\n              },\n              id: gen.id,\n              children: gen.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 21\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"3\",\n          className: \"text-right d-flex flex-center flex-justify-end \",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            className: \"mx-2\",\n            onClick: function onClick() {\n              return filterGenerators();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }, _this), generatorsSelected ? /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          className: \"text-center\",\n          children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '50px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-left\",\n                style: {\n                  width: '100%'\n                },\n                children: \"Power (KW)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Line, {\n                data: graphData // datasets={graphData.datasets}\n                // labels={graphData.labels}\n                ,\n                options: options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center mt-1\",\n                style: {\n                  width: '100%'\n                },\n                children: \"Wind speed (m/s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, _this) : /*#__PURE__*/_jsxDEV(CSpinner, {\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: filterSubmitted && /*#__PURE__*/_jsxDEV(CRow, {\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            className: \"text-center\",\n            children: \"Select one or more generators\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"nVqNw8spX79+B491zPYVi9RDMzI=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/power-curve/benchmark.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CDataTable","CBadge","CSelect","CModal","CModalHeader","CModalFooter","CModalBody","CModalTitle","CSpinner","CContainer","CChartLine","Multiselect","Line","DataAPI","DateFilter","formatDate","round","getDateLabel","formatNumber","Charts","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","data","setData","curves","setCurves","dateRange","setDateRange","windSector","setWindSector","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","selectedGenerators","setSelectedGenerators","filterSubmitted","setFilterSubmitted","generatorColors","setGeneratorColors","performance","setPerformance","generatorsSelected","setGeneratorsSelected","labels","datasets","graphData","setGraphData","colors","angles","loadGenerators","fetchData","period","options","body","angleFrom","split","angleTo","length","from","to","then","response","error","message","alert","refreshChart","colorIndex","forEach","gen","code","generatorData","generator","backgroundColor","datasetManufacturerData","label","x","map","i","y","push","productionTotal","index","dataset","datasetAverage","selectGenerator","id","newSelected","includes","filter","filterGenerators","animation","duration","plugins","tooltip","callbacks","title","tooltipItem","raw","lineHeight","value","minWidth","ev","target","angle","name","selectedList","setWindSectors","borderRadius","color","marginBottom","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CDataTable,\r\n  CBadge,\r\n  CSelect,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n  CSpinner,\r\n  CContainer\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine\r\n} from '@coreui/react-chartjs'\r\n\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {DateFilter, formatDate, round, getDateLabel, formatNumber} from '../../../helpers/utils.js'\r\n\r\n\r\nconst Charts = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n  const [curves, setCurves] = useState([]);\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [windSector, setWindSector] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [performance, setPerformance] = useState({});\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n  const angles = [\r\n    \"0-45\",\r\n    \"45-90\",\r\n    \"90-135\",\r\n    \"135-180\",\r\n    \"180-225\",\r\n    \"225-270\",\r\n    \"270-315\",\r\n    \"315-360\"\r\n  ]\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const fetchData = () => {\r\n\r\n    const {period, windSector} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (selectedGenerators) body.generators = selectedGenerators;\r\n    if (windSector) {\r\n      body.angleFrom = windSector.split('-')[0]\r\n      body.angleTo = windSector.split('-')[1]\r\n    }\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/powerCurve',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n          setDataLoaded(true);\r\n          setData(response);\r\n          refreshChart(response);\r\n          \r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n\r\n          setGenerators(response.generators);\r\n          // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n\r\n          let colorIndex = 0\r\n          response.generators.forEach((gen) => {\r\n            generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n            setGeneratorColors(generatorColors);\r\n            colorIndex++\r\n          });\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  const refreshChart = (generatorData) => {\r\n\r\n    const generators = generatorData.generator;\r\n\r\n    if (generators.length==0) return;\r\n\r\n      const graphData = {\r\n        labels: [],\r\n        datasets: [],\r\n        backgroundColor: colors\r\n      };\r\n\r\n      const datasetManufacturerData = {\r\n        label: \"Manufacturer Data\",\r\n        backgroundColor:  \"blue\",\r\n        data: generators[0].data.curves[0].x.map((x, i) => { \r\n              return {x, y: generators[0].data.curves[0].y[i] };\r\n            }\r\n          )\r\n      };\r\n      graphData.datasets.push(datasetManufacturerData);\r\n\r\n      let productionTotal = generators[0].data.curves[1].x.map((x) => {return 0});\r\n      generators.forEach(\r\n        (generator,index) => {\r\n          const dataset = {\r\n            label: generator.code,\r\n            // borderColor: generatorColors[generator.code],//[index%7],\r\n            // pointBackgroundColor: 'transparent',\r\n            // pointBorderColor: 'transparent',\r\n            backgroundColor:  generatorColors[generator.code],//'transparent',\r\n            data: generator.data.curves[1].x.map((x, i) => { \r\n                  productionTotal[i] += generator.data.curves[1].y[i];\r\n                  return {x, y: generator.data.curves[1].y[i] };\r\n                }\r\n              )\r\n          };\r\n          graphData.datasets.push(dataset);\r\n        }\r\n      );\r\n      const datasetAverage = {\r\n        label: \"Average\",\r\n        // borderColor: \"#2d2d2d\",\r\n        // pointBackgroundColor: 'transparent',\r\n        // pointBorderColor: 'transparent',\r\n        backgroundColor: \"#2d2d2d\",//'transparent',\r\n        data: productionTotal.map((y, i) => { \r\n          return {x: generators[0].data.curves[1].x[i], y: y/generators.length }\r\n        })\r\n      };\r\n      graphData.datasets.push(datasetAverage);\r\n\r\n      const labels = [];\r\n      generators[0].data.curves[0].x.forEach(\r\n        x => {\r\n          labels.push(round(x))\r\n        }\r\n      );\r\n      graphData.labels = labels;\r\n\r\n      setGraphData(graphData);\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData({period: dateRange, windSector: windSector});\r\n    }\r\n\r\n  }\r\n\r\n  const options = {\r\n    animation: {\r\n      duration: loading ? 0 : 1000\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function() {},\r\n          label: function(tooltipItem, data) {\r\n              return [ 'Power: ' + formatNumber(round(tooltipItem.raw.y,1)) + ' kWh', 'Wind Speed: ' + formatNumber(round(tooltipItem.label,1)) + \" m/s\" ];\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n\r\n  return (\r\n    <CCard>\r\n\r\n    <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"6\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Power Curve - Benchmark\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"6\" className=\"text-right d-flex flex-center\">\r\n                \r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n                <DateFilter value={dateRange} options={['cm','30d','cy','12w','12m','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} />\r\n\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2,minWidth:'72px'}}>Wind sector</h6>\r\n                <CSelect value={windSector} disabled={loading} onChange={(ev) => { setWindSector(ev.target.value);}} custom name=\"period\" id=\"period\">\r\n                  <option value=\"\" selected></option>\r\n                  <option value=\"0-45\">0-45</option>\r\n                  <option value=\"45-90\">45-90</option>\r\n                  <option value=\"90-135\">90-135</option>\r\n                  <option value=\"135-180\">135-180</option>\r\n                  <option value=\"180-225\">180-225</option>\r\n                  <option value=\"225-270\">225-270</option>\r\n                  <option value=\"270-315\">270-315</option>\r\n                  <option value=\"315-360\">315-360</option>\r\n                </CSelect>\r\n\r\n                <div class=\"multiselect-container mr-2\">\r\n                  <Multiselect \r\n                    disabled={loading}\r\n                    options={angles.map((angle) => {\r\n                        return {id:angle.id,name:angle}\r\n                      })}\r\n                    onSelect={(selectedList) => {setWindSectors(selectedList.map((gen) => { return gen.id } ))}} // Function will trigger on select event\r\n                    onRemove={(selectedList) => {setSelectedGenerators(selectedList.map((gen) => { return gen.id } ))}} // Function will trigger on remove event\r\n                    // displayValue=\"name\" // Property name to display in the dropdown options\r\n                    />\r\n                </div>\r\n\r\n              </CCol>\r\n           </CRow>\r\n\r\n\r\n\r\n\r\n\r\n        </CCardHeader>\r\n      \r\n      <CCardBody>\r\n\r\n      <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n              <CCol sm=\"9\">\r\n              {generatorsLoaded && \r\n                generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-2 my-2\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                ))\r\n              }\r\n              </CCol>\r\n              <CCol sm=\"3\" className=\"text-right d-flex flex-center flex-justify-end \">\r\n                <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n            </CRow>\r\n\r\n\r\n          {/* <CRow> */}\r\n            {/* <CCol xl=\"6\" md=\"12\" className=\"d-flex px-md-1 py-2 px-4\">\r\n                <h6 className=\"mr-2 ml-md-4 m-0 col-xl-2 col-md-3 text-right col-3 py-2 px-0 px-sm-1\" style={{minWidth:'64px'}}>Generators</h6>\r\n                <div class=\"multiselect-container mr-2\">\r\n                  <Multiselect \r\n                    disabled={loading}\r\n                    options={generators.map((oGenerator) => {\r\n                        return {id:oGenerator.id,name:oGenerator.code}\r\n                      })} // Options to display in the dropdown\r\n                    selectedValues={generators.map((oGenerator) => {\r\n                      return {id:oGenerator.id,name:oGenerator.code}\r\n                    })} // Preselected value to persist in dropdown\r\n                    onSelect={(selectedList) => {setSelectedGenerators(selectedList.map((gen) => { return gen.id } ))}} // Function will trigger on select event\r\n                    onRemove={(selectedList) => {setSelectedGenerators(selectedList.map((gen) => { return gen.id } ))}} // Function will trigger on remove event\r\n                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                    />\r\n                  </div>\r\n            </CCol> */}\r\n            {/* <CCol xl=\"3\" md=\"6\" className=\"d-flex flex-center px-md-1 py-2 px-4\">\r\n                  <h6 className=\"mr-2 ml-md-4 m-0 px-0 px-sm-1 col-xl-3 col-md-5 col-3 text-right\">Period</h6>\r\n                  <div class=\"col-xl-8 col-md-7 px-0 mr-2\">\r\n                    <DateFilter disabled={loading} value={dateRange} options={['cm','30d','cy','12w','12m','x','xx']} onChange={(value) => {setDateRange(value);}}/>\r\n                  </div>\r\n            </CCol>\r\n\r\n            <CCol xl=\"3\" md=\"6\" className=\"d-flex flex-center px-md-1 py-2 px-4\">\r\n              <h6 className=\"mr-2 ml-md-4 m-0 px-0 px-sm-1 col-xl-3 col-md-5 col-3 text-right\">Wind sector</h6>\r\n              <CSelect disabled={loading} custom name=\"windSector\" id=\"windSector\" className=\"col-xl-8 col-md-7 mr-2\" onChange={(ev) => {setWindSector(ev.target.value);}}>\r\n                <option value=\"\" selected></option>\r\n                <option value=\"0-45\">0-45</option>\r\n                <option value=\"45-90\">45-90</option>\r\n                <option value=\"90-135\">90-135</option>\r\n                <option value=\"135-180\">135-180</option>\r\n                <option value=\"180-225\">180-225</option>\r\n                <option value=\"225-270\">225-270</option>\r\n                <option value=\"270-315\">270-315</option>\r\n                <option value=\"315-360\">315-360</option>\r\n              </CSelect>\r\n            </CCol> */}\r\n\r\n            {/* </CRow> */}\r\n\r\n        {/* //   </CCol>\r\n        //   <CCol md=\"3\" className=\"text-right d-flex flex-center flex-justify-end px-4 py-2\">\r\n        //     <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterSubmit()} >Submit</CButton>\r\n        //   </CCol>\r\n        // </CRow>\r\n         */}\r\n\r\n\r\n        { generatorsSelected ?\r\n\r\n        <CRow>\r\n          <CCol className=\"text-center\">\r\n\r\n          {!loading || dataLoadError ? \r\n\r\n            <div>\r\n              <div style={{marginBottom:'50px'}}>\r\n                <div className=\"text-left\" style={{width: '100%'}}>Power (KW)</div>\r\n                <Line \r\n                  data={graphData}\r\n                  // datasets={graphData.datasets}\r\n                  // labels={graphData.labels}\r\n                  options={options} />\r\n                <div className=\"text-center mt-1\" style={{width: '100%'}}>Wind speed (m/s)</div>\r\n              </div>\r\n            </div>\r\n\r\n          : \r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          }\r\n            \r\n          </CCol>\r\n        </CRow>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n\r\n        }\r\n\r\n      </CCardBody>\r\n\r\n\r\n\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}