{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\reports\\\\settings.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CAlert, CLabel, CButton, CDataTable, CInputCheckbox } from '@coreui/react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Reports = function Reports() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableData = _useState2[0],\n      setTableData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      configData = _useState4[0],\n      _setConfigData = _useState4[1];\n\n  var configDataRef = useRef(configData);\n\n  var setConfigData = function setConfigData(data) {\n    configDataRef.current = data;\n\n    _setConfigData(data);\n  };\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tableFields = _useState6[0],\n      setTableFields = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loaded = _useState8[0],\n      setLoaded = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      scopedSlots = _useState10[0],\n      setScopedSlots = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      reports = _useState12[0],\n      setReports = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      locations = _useState14[0],\n      setLocations = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      saving = _useState16[0],\n      setSaving = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      changesMade = _useState18[0],\n      setChangesMade = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      saved = _useState20[0],\n      setSaved = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      message = _useState22[0],\n      setMessage = _useState22[1];\n\n  useEffect(function () {\n    loadConfiguration();\n  }, []);\n\n  var loadConfiguration = function loadConfiguration() {\n    DataAPI({\n      'endpoint': 'report/configure',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response.error) {\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      if (response.loaded) {\n        setReports(response.reports);\n        var _locations = [];\n        var rows = [];\n        response.locations.forEach(function (location, index) {\n          _locations[location.id] = location.name;\n          rows[location.id] = [];\n        });\n        setLocations(_locations);\n        response.settings.forEach(function (setting, index) {\n          rows[setting.locId][setting.repId] = setting.selected;\n        });\n        var data = [];\n        var _tableData = [];\n        rows.map(function (row, locId) {\n          var rowData = [];\n          row.map(function (setting, repId) {\n            rowData[repId] = setting;\n          });\n          rowData['windFarm'] = _locations[locId];\n\n          _tableData.push(rowData);\n\n          data[locId] = rowData;\n        });\n        setConfigData(data);\n        var sSlots = {};\n        var _reports = [];\n        response.reports.forEach(function (report, index) {\n          _reports[report.id] = report.title;\n\n          sSlots[report.id] = function (item, x) {\n            if (item[report.id]) {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(CInputCheckbox, {\n                  name: \"check-\" + response.locations[x].id + \"-\" + report.id,\n                  className: 'mx-0',\n                  defaultChecked: true,\n                  onChange: function onChange(ev) {\n                    return updateData(ev);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, _this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(CInputCheckbox, {\n                  name: \"check-\" + response.locations[x].id + \"-\" + report.id,\n                  className: 'mx-0',\n                  onChange: function onChange(ev) {\n                    return updateData(ev);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, _this);\n            }\n          };\n        });\n        setScopedSlots(sSlots);\n\n        var _tableFields = _reports.map(function (title, id) {\n          return {\n            key: id,\n            label: title\n          };\n        });\n\n        _tableFields.unshift({\n          key: 'windFarm',\n          label: 'Wind Farm'\n        });\n\n        setTableData(_tableData);\n        setTableFields(_tableFields);\n        setLoaded(true);\n      }\n    });\n  };\n\n  var updateData = function updateData(ev) {\n    var name = ev.target.name;\n    var nameSplit = name.split('-');\n    var locId = nameSplit[1];\n    var repId = nameSplit[2];\n    var data = configDataRef.current;\n    data[locId][repId] = ev.target.checked;\n    setConfigData(data);\n    setChangesMade(true);\n  };\n\n  var saveChanges = function saveChanges() {\n    setSaving(true);\n    var body = {};\n    body.location = getCookie('location');\n    var settings = [];\n    configDataRef.current.map(function (row, locId) {\n      return row.map(function (setting, repId) {\n        settings.push({\n          \"locId\": locId,\n          \"repId\": repId,\n          \"selected\": setting\n        });\n      });\n    });\n    body.settings = settings;\n    DataAPI({\n      'endpoint': 'report/configure',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setSaving(false);\n      setChangesMade(false);\n\n      if (response.error) {\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      if (response.saved) {\n        setSaved(true);\n        setMessage('Your preferences were successfully updated');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Reports\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-medium-emphasis\",\n            children: \"E-mail settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      className: 'px-md-5 pb-md-5 pt-md-4',\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [saved && /*#__PURE__*/_jsxDEV(CAlert, {\n            color: \"success\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: 'mb-4',\n            children: \"Please select reports you wish to receive by e-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, _this), loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(CDataTable, {\n              items: tableData,\n              fields: tableFields,\n              striped: true,\n              scopedSlots: scopedSlots\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, _this), changesMade && /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          xs: \"12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'border-top mt-2 pt-4',\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              onClick: saveChanges,\n              color: \"primary\",\n              disabled: saving,\n              className: \"px-4 mr-3\",\n              children: \"Save Preferences\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Reports, \"iBFSAUxFDYVHoYcfj4mRrVnjRnc=\");\n\n_c = Reports;\nexport default Reports;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/reports/settings.js"],"names":["React","useState","useEffect","useRef","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CAlert","CLabel","CButton","CDataTable","CInputCheckbox","DataAPI","Reports","tableData","setTableData","configData","_setConfigData","configDataRef","setConfigData","data","current","tableFields","setTableFields","loaded","setLoaded","scopedSlots","setScopedSlots","reports","setReports","locations","setLocations","saving","setSaving","changesMade","setChangesMade","saved","setSaved","message","setMessage","loadConfiguration","then","response","error","alert","rows","forEach","location","index","id","name","settings","setting","locId","repId","selected","map","row","rowData","push","sSlots","report","title","item","x","ev","updateData","key","label","unshift","target","nameSplit","split","checked","saveChanges","body","getCookie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CAlert,\r\n  CLabel,\r\n  CButton,\r\n  CDataTable,\r\n  CInputCheckbox\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\n\r\nconst Reports = () => {\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [configData, _setConfigData] = useState([]);\r\n  const configDataRef = useRef(configData);\r\n  const setConfigData = data => {\r\n    configDataRef.current = data;\r\n    _setConfigData(data);\r\n  };\r\n  const [tableFields, setTableFields] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [scopedSlots, setScopedSlots] = useState(false);\r\n  const [reports, setReports] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n\r\n  const [saving, setSaving] = useState(false);\r\n  const [changesMade, setChangesMade] = useState(false);\r\n  const [saved, setSaved] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    loadConfiguration();\r\n  }, []);\r\n\r\n  \r\n\r\n  const loadConfiguration = () => {\r\n    \r\n    DataAPI({\r\n      'endpoint': 'report/configure',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        if (response.loaded) {\r\n          \r\n          setReports(response.reports)\r\n\r\n          let locations = [];\r\n          let rows = [];\r\n          response.locations.forEach((location,index) => {\r\n              locations[location.id] = location.name;\r\n              rows[location.id] = [];\r\n          });\r\n          setLocations(locations)\r\n\r\n          response.settings.forEach((setting,index) => {\r\n            rows[setting.locId][setting.repId] = setting.selected;\r\n\r\n          });\r\n\r\n          let data = []\r\n\r\n\r\n          let tableData = [];\r\n          rows.map((row, locId) => {\r\n            let rowData = [];\r\n            row.map((setting, repId) => {\r\n              rowData[repId] = setting;\r\n            });\r\n            rowData['windFarm'] = locations[locId];\r\n            tableData.push(rowData);\r\n            data[locId] = rowData;\r\n          });\r\n\r\n\r\n          setConfigData(data);\r\n          \r\n\r\n          let sSlots = {};\r\n          let reports = [];\r\n          response.reports.forEach((report,index) => {\r\n            reports[report.id] = report.title;\r\n            sSlots[report.id] = (item,x) => {\r\n              if (item[report.id]) {\r\n                return (\r\n                <td>\r\n                  <CInputCheckbox  name={\"check-\"+response.locations[x].id+\"-\"+report.id} className={'mx-0'} defaultChecked onChange={(ev)=>updateData(ev)}/>\r\n                </td>)\r\n              } else {\r\n                return (\r\n                <td>\r\n                  <CInputCheckbox  name={\"check-\"+response.locations[x].id+\"-\"+report.id} className={'mx-0'} onChange={(ev)=>updateData(ev)}/>\r\n                </td>)\r\n              }\r\n            }\r\n          });\r\n          setScopedSlots(sSlots);\r\n\r\n          const tableFields = reports.map((title, id) => ({\r\n              key: id,\r\n              label: title\r\n            }\r\n          ));\r\n          tableFields.unshift({\r\n            key: 'windFarm',\r\n            label: 'Wind Farm'\r\n          });\r\n\r\n          setTableData(tableData);\r\n          setTableFields(tableFields);\r\n\r\n          setLoaded(true);\r\n\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\nconst updateData = (ev) => {\r\n  let name = ev.target.name;\r\n  let nameSplit = name.split('-');\r\n  let locId = nameSplit[1];\r\n  let repId = nameSplit[2];\r\n  let data = configDataRef.current;\r\n  data[locId][repId] = ev.target.checked;\r\n  setConfigData(data);\r\n  setChangesMade(true);\r\n}\r\n\r\nconst saveChanges = () => {\r\n\r\n  setSaving(true);\r\n\r\n  const body = {}\r\n  body.location = getCookie('location')\r\n  let settings = [];\r\n  configDataRef.current.map((row,locId) => (\r\n    row.map((setting,repId) => {\r\n      settings.push(\r\n      {\r\n        \"locId\": locId,\r\n        \"repId\": repId,\r\n        \"selected\": setting\r\n      })}\r\n    )\r\n  ))\r\n\r\n  body.settings = settings;\r\n  \r\n    \r\n  DataAPI({\r\n    'endpoint': 'report/configure',\r\n    'method': 'POST',\r\n    'body': body\r\n  }).then(\r\n    response => {\r\n\r\n      setSaving(false)\r\n      setChangesMade(false)\r\n\r\n      if (response.error) {\r\n        if (response.error.message) {\r\n          return(alert(response.error.message))\r\n        } else {\r\n          return(alert(response.error)) \r\n        }\r\n      }\r\n\r\n      if (response.saved) {\r\n        setSaved(true);\r\n        setMessage('Your preferences were successfully updated')\r\n      }\r\n    })\r\n      \r\n\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Reports\r\n            </h3>\r\n            <div className=\"text-medium-emphasis\">E-mail settings</div>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody className={'px-md-5 pb-md-5 pt-md-4'}>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            { saved &&\r\n              <CAlert color=\"success\" >{message}</CAlert>\r\n            }\r\n            <h4 className={'mb-4'} >Please select reports you wish to receive by e-mail</h4>\r\n            {loaded &&\r\n              <div>\r\n                <CDataTable\r\n                      items={tableData}\r\n                      fields={tableFields}\r\n                      striped\r\n                      scopedSlots = {scopedSlots}\r\n                    />\r\n\r\n                \r\n              </div>\r\n            }\r\n\r\n          </CCol>\r\n        </CRow>\r\n\r\n        {changesMade &&\r\n          <CRow>\r\n            <CCol xs=\"12\">\r\n              <div className={'border-top mt-2 pt-4'}>\r\n                <CButton onClick={saveChanges} color=\"primary\" disabled={saving} className=\"px-4 mr-3\">Save Preferences</CButton>\r\n              </div>\r\n            </CCol>\r\n          </CRow>\r\n        }\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n"]},"metadata":{},"sourceType":"module"}