{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\trends.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton } from '@coreui/react';\nimport { CChartLine, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar ClimateTrends = function ClimateTrends() {\n  _s();\n\n  var _useState = useState('y'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lineChartOneData = _useState6[0],\n      setLineChartOneData = _useState6[1];\n\n  var _useState7 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lineChartTwoData = _useState8[0],\n      setLineChartTwoData = _useState8[1];\n\n  var _useState9 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      polarChartData = _useState10[0],\n      setPolarChartData = _useState10[1];\n\n  useEffect(function () {\n    getChartData(dateRange);\n  }, []);\n  var colorCounter = 0;\n  var colors = ['blue', 'lightblue', 'turquoise', 'yellow', 'orange', 'red'];\n  var windRoseLabels = ['0-3', '3-6', '6-9', '9-12', '12-15', '15*'];\n\n  var windRoseColor = function windRoseColor(value) {\n    var n = 0;\n\n    if (value < 3) {\n      n = 0;\n    } else if (value < 6) {\n      n = 1;\n    } else if (value < 9) {\n      n = 2;\n    } else if (value < 12) {\n      n = 3;\n    } else if (value < 15) {\n      n = 4;\n    } else {\n      n = 5;\n    }\n\n    console.log('windRoseColor', value, n);\n    var x = colors;\n    return x[n];\n  };\n\n  var getChartData = function getChartData(period) {\n    setLoading(true);\n    var body = {};\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    DataAPI({\n      'endpoint': 'chart/climate',\n      'method': 'POST',\n      'body': body\n    }).then(function (responseData) {\n      if (responseData.error && responseData.error.message) alert(responseData.error.message);\n      setLoading(false);\n      var windSpeedData = {\n        labels: [],\n        datasets: []\n      };\n      var temperatureData = {\n        labels: [],\n        datasets: []\n      };\n      var windRoseData = {\n        labels: [],\n        datasets: []\n      };\n      var windSpeedDataSets = {\n        label: 'WindSpeed',\n        borderColor: '#f87979',\n        pointBackgroundColor: 'transparent',\n        pointBorderColor: 'transparent',\n        backgroundColor: 'transparent',\n        data: []\n      };\n      var temperatureDataSets = {\n        label: 'Temperature',\n        borderColor: '#00D8FF',\n        pointBackgroundColor: 'transparent',\n        pointBorderColor: 'transparent',\n        backgroundColor: 'transparent',\n        data: []\n      };\n\n      if (responseData && responseData.graphs) {\n        responseData.graphs.find(function (item) {\n          switch (item.type) {\n            case 'WindSpeed':\n              item.data.forEach(function (rDs) {\n                var windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\n                windSpeedDataSets.data.push(windSpeed);\n                var date = rDs.datetimeFrom.split(' ')[0];\n                var time = rDs.datetimeFrom.split(' ')[1];\n                var timeArr = time.split(':');\n                var rDfrom = \"\".concat(date, \" - \").concat(timeArr[0], \":\").concat(timeArr[1]);\n                var rDto = rDs.datetimeTo;\n                windSpeedData.labels.push(rDfrom);\n              });\n              console.log('responseData.graphs', responseData.graphs);\n              windSpeedData.datasets.push(windSpeedDataSets);\n              console.log('windSpeedData', windSpeedData);\n              setLineChartOneData(windSpeedData);\n              break;\n\n            case 'Temperature':\n              item.data.forEach(function (rDs) {\n                temperatureDataSets.data.push(round(rDs.temperature));\n                var rDfrom = rDs.datetimeFrom;\n                var rDto = rDs.datetimeTo;\n                temperatureData.labels.push(formatDate2(rDfrom, 'time'));\n              });\n              temperatureData.datasets.push(temperatureDataSets);\n              setLineChartTwoData(temperatureData);\n              break;\n\n            case 'WindRose':\n              item.data.forEach(function (rDs) {\n                var windRoseDataSets = {};\n                var diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\n                var color = windRoseColor(rDs);\n                windRoseDataSets.data = rDs.radiuses;\n                windRoseDataSets.backgroundColor = [];\n                rDs.radiuses.forEach(function (radius) {\n                  return windRoseDataSets.backgroundColor.push(windRoseColor(radius));\n                });\n\n                if (diff > 0) {\n                  for (var i = 0; i <= diff; i++) {\n                    windRoseDataSets.data.push(0);\n                  }\n                }\n\n                windRoseDataSets.pointBackgroundColor = color; // windRoseDataSets.pointBorderColor = \"white\",\n\n                windRoseDataSets.pointHoverBackgroundColor = color;\n                windRoseDataSets.pointHoverBorderColor = color;\n                windRoseData.datasets.push(windRoseDataSets); // console.log('windRoseRange',rDfrom,rDs.angle.from)\n              });\n              windRoseData.datasets.backgroundColor = ['red', 'blue'];\n              setPolarChartData(windRoseData);\n              break;\n          }\n        });\n      }\n    });\n  };\n\n  var windRoseLabelsMap = windRoseLabels.map(function (v, m) {\n    var color = colors[m];\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginRight: '20px'\n      },\n      children: [v, /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          backgroundColor: color,\n          width: '30px',\n          height: '10px',\n          display: 'inline-block',\n          'marginLeft': '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 52\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 14\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"7\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"5\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(DateFilter, {\n            options: 'y,cm,cy,12w,12m,x,xx'.split(','),\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n              getChartData(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 16\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        className: \"py-3 mb-4 mx-0 bg-light\",\n        style: {\n          borderRadius: \"3px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"9\",\n          children: [\"Generators:\", generatorsLoaded && generators.map(function (gen, index) {\n            return /*#__PURE__*/_jsxDEV(CButton, {\n              style: {\n                backgroundColor: generatorColors[gen.code],\n                color: 'white'\n              },\n              className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-2 my-2\",\n              onClick: function onClick() {\n                return selectGenerator(gen.id);\n              },\n              id: gen.id,\n              children: gen.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 21\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"3\",\n          className: \"text-right d-flex flex-center flex-justify-end \",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            className: \"mx-2\",\n            onClick: function onClick() {\n              return filterGenerators();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"m/s\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n            datasets: lineChartOneData.datasets,\n            labels: lineChartOneData.labels,\n            options: {\n              tooltips: {\n                enabled: true\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: false && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Wind Rose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 23\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                maxWidth: '600px',\n                margin: 'auto'\n              },\n              children: windRoseLabelsMap\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(CChartPolarArea, {\n              datasets: polarChartData.datasets,\n              labels: polarChartData.labels,\n              options: {\n                tooltips: {\n                  enabled: true\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 11\n            }, _this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\xB0C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n            datasets: lineChartTwoData.datasets,\n            labels: lineChartTwoData.labels,\n            options: {\n              tooltips: {\n                enabled: true\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateTrends, \"dxYVWMM9n7I5sR4p8G2jGjbURZM=\");\n\n_c = ClimateTrends;\nexport default ClimateTrends;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateTrends\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/trends.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CChartLine","CChartPolarArea","DocsLink","ClimateTrends","dateRange","setDateRange","loading","setLoading","labels","datasets","lineChartOneData","setLineChartOneData","lineChartTwoData","setLineChartTwoData","polarChartData","setPolarChartData","getChartData","colorCounter","colors","windRoseLabels","windRoseColor","value","n","console","log","x","period","body","split","length","from","to","then","responseData","error","message","alert","windSpeedData","temperatureData","windRoseData","windSpeedDataSets","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","data","temperatureDataSets","graphs","find","item","type","forEach","rDs","windSpeed","Math","toFixed","push","date","datetimeFrom","time","timeArr","rDfrom","rDto","datetimeTo","temperature","windRoseDataSets","diff","parseInt","radiuses","color","radius","i","pointHoverBackgroundColor","pointHoverBorderColor","windRoseLabelsMap","map","v","m","marginRight","width","height","display","borderRadius","generatorsLoaded","generators","gen","index","generatorColors","code","selectedGenerators","includes","id","selectGenerator","filterGenerators","tooltips","enabled","maxWidth","margin"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAAQC,UAAR,EAAoBC,YAApB,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2DC,KAA3D,QAAuE,2BAAvE;AAEA,SACEC,KADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,OAPF,QASO,eATP;AAWA,SACEC,UADF,EAEEC,eAFF,QAGO,uBAHP;AAKA,SAASC,QAAT,QAAyB,cAAzB;;;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAE1B,kBAAkCjB,QAAQ,CAAC,GAAD,CAA1C;AAAA;AAAA,MAAOkB,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8BnB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOoB,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,mBAAgDrB,QAAQ,CAAC;AACvDsB,IAAAA,MAAM,EAAE,EAD+C;AAEvDC,IAAAA,QAAQ,EAAE;AAF6C,GAAD,CAAxD;AAAA;AAAA,MAAOC,gBAAP;AAAA,MAAyBC,mBAAzB;;AAIA,mBAAgDzB,QAAQ,CAAC;AACvDsB,IAAAA,MAAM,EAAE,EAD+C;AAEvDC,IAAAA,QAAQ,EAAE;AAF6C,GAAD,CAAxD;AAAA;AAAA,MAAOG,gBAAP;AAAA,MAAyBC,mBAAzB;;AAIA,mBAA4C3B,QAAQ,CAAC;AACnDsB,IAAAA,MAAM,EAAE,EAD2C;AAEnDC,IAAAA,QAAQ,EAAE;AAFyC,GAAD,CAApD;AAAA;AAAA,MAAOK,cAAP;AAAA,MAAuBC,iBAAvB;;AAMF9B,EAAAA,SAAS,CAAC,YAAM;AACd+B,IAAAA,YAAY,CAACZ,SAAD,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAKE,MAAIa,YAAY,GAAC,CAAjB;AAEA,MAAMC,MAAM,GAAG,CACL,MADK,EACE,WADF,EACc,WADd,EAC2B,QAD3B,EACqC,QADrC,EAC+C,KAD/C,CAAf;AAIA,MAAMC,cAAc,GAAG,CACb,KADa,EACP,KADO,EACD,KADC,EACM,MADN,EACc,OADd,EACuB,KADvB,CAAvB;;AAIA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAI/B,QAAIC,CAAC,GAAC,CAAN;;AAEA,QAAID,KAAK,GAAG,CAAZ,EAAe;AACbC,MAAAA,CAAC,GAAC,CAAF;AACD,KAFD,MAEO,IAAID,KAAK,GAAG,CAAZ,EAAc;AACnBC,MAAAA,CAAC,GAAC,CAAF;AACD,KAFM,MAEA,IAAID,KAAK,GAAG,CAAZ,EAAc;AACnBC,MAAAA,CAAC,GAAC,CAAF;AACD,KAFM,MAEA,IAAID,KAAK,GAAG,EAAZ,EAAe;AACpBC,MAAAA,CAAC,GAAC,CAAF;AACD,KAFM,MAEA,IAAID,KAAK,GAAG,EAAZ,EAAe;AACpBC,MAAAA,CAAC,GAAC,CAAF;AACD,KAFM,MAEA;AACLA,MAAAA,CAAC,GAAC,CAAF;AAED;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,KAA7B,EAAoCC,CAApC;AAEA,QAAMG,CAAC,GAAGP,MAAV;AAEA,WAAOO,CAAC,CAACH,CAAD,CAAR;AACD,GA1BD;;AAgCA,MAAMN,YAAY,GAAG,SAAfA,YAAe,CAACU,MAAD,EAAY;AAE/BnB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAMoB,IAAI,GAAG,EAAb;;AAEA,QAAID,MAAM,IAAIA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,MAAnB,IAA2B,CAAzC,EAA4C;AAC1CF,MAAAA,IAAI,CAACG,IAAL,GAAYJ,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmB,CAAnB,CAAZ;AACAD,MAAAA,IAAI,CAACI,EAAL,GAAUL,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmB,CAAnB,CAAV;AACD,KAHD,MAGO;AACLD,MAAAA,IAAI,CAACD,MAAL,GAAcA,MAAd;AACD;;AAEDvC,IAAAA,OAAO,CACL;AACA,kBAAY,eADZ;AAEA,gBAAU,MAFV;AAGA,cAAQwC;AAHR,KADK,CAAP,CAMGK,IANH,CAMQ,UAAUC,YAAV,EAAwB;AAE5B,UAAIA,YAAY,CAACC,KAAb,IAAsBD,YAAY,CAACC,KAAb,CAAmBC,OAA7C,EAAsDC,KAAK,CAACH,YAAY,CAACC,KAAb,CAAmBC,OAApB,CAAL;AAEtD5B,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,UAAI8B,aAAa,GAAG;AAClB7B,QAAAA,MAAM,EAAE,EADU;AAElBC,QAAAA,QAAQ,EAAE;AAFQ,OAApB;AAIA,UAAI6B,eAAe,GAAG;AACpB9B,QAAAA,MAAM,EAAE,EADY;AAEpBC,QAAAA,QAAQ,EAAE;AAFU,OAAtB;AAIA,UAAI8B,YAAY,GAAG;AACjB/B,QAAAA,MAAM,EAAE,EADS;AAEjBC,QAAAA,QAAQ,EAAE;AAFO,OAAnB;AAMA,UAAI+B,iBAAiB,GAAG;AACtBC,QAAAA,KAAK,EAAE,WADe;AAEtBC,QAAAA,WAAW,EAAE,SAFS;AAGtBC,QAAAA,oBAAoB,EAAE,aAHA;AAItBC,QAAAA,gBAAgB,EAAE,aAJI;AAKtBC,QAAAA,eAAe,EAAE,aALK;AAMtBC,QAAAA,IAAI,EAAE;AANgB,OAAxB;AAQA,UAAIC,mBAAmB,GAAG;AACxBN,QAAAA,KAAK,EAAE,aADiB;AAExBC,QAAAA,WAAW,EAAE,SAFW;AAGxBC,QAAAA,oBAAoB,EAAE,aAHE;AAIxBC,QAAAA,gBAAgB,EAAE,aAJM;AAKxBC,QAAAA,eAAe,EAAE,aALO;AAMxBC,QAAAA,IAAI,EAAE;AANkB,OAA1B;;AAYA,UAAIb,YAAY,IAAIA,YAAY,CAACe,MAAjC,EAAwC;AAIxCf,QAAAA,YAAY,CAACe,MAAb,CAAoBC,IAApB,CAAyB,UAACC,IAAD,EAAU;AACjC,kBAAQA,IAAI,CAACC,IAAb;AACE,iBAAK,WAAL;AACED,cAAAA,IAAI,CAACJ,IAAL,CAAUM,OAAV,CAAkB,UAACC,GAAD,EAAS;AACzB,oBAAMC,SAAS,GAAG,CAACC,IAAI,CAAC/D,KAAL,CAAW6D,GAAG,CAACC,SAAJ,GAAgB,GAA3B,IAAkC,GAAnC,EAAwCE,OAAxC,CAAgD,CAAhD,CAAlB;AACAhB,gBAAAA,iBAAiB,CAACM,IAAlB,CAAuBW,IAAvB,CAA4BH,SAA5B;AAEA,oBAAII,IAAI,GAAGL,GAAG,CAACM,YAAJ,CAAiB/B,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAX;AACA,oBAAIgC,IAAI,GAAGP,GAAG,CAACM,YAAJ,CAAiB/B,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAX;AACA,oBAAIiC,OAAO,GAAGD,IAAI,CAAChC,KAAL,CAAW,GAAX,CAAd;AAIA,oBAAMkC,MAAM,aAAMJ,IAAN,gBAAgBG,OAAO,CAAC,CAAD,CAAvB,cAA8BA,OAAO,CAAC,CAAD,CAArC,CAAZ;AACA,oBAAME,IAAI,GAAGV,GAAG,CAACW,UAAjB;AACA3B,gBAAAA,aAAa,CAAC7B,MAAd,CAAqBiD,IAArB,CAA0BK,MAA1B;AACD,eAbD;AAeAvC,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCS,YAAY,CAACe,MAAhD;AAEAX,cAAAA,aAAa,CAAC5B,QAAd,CAAuBgD,IAAvB,CAA4BjB,iBAA5B;AACAjB,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,aAA7B;AACA1B,cAAAA,mBAAmB,CAAC0B,aAAD,CAAnB;AACA;;AACF,iBAAK,aAAL;AACEa,cAAAA,IAAI,CAACJ,IAAL,CAAUM,OAAV,CAAkB,UAACC,GAAD,EAAS;AACzBN,gBAAAA,mBAAmB,CAACD,IAApB,CAAyBW,IAAzB,CAA8BjE,KAAK,CAAC6D,GAAG,CAACY,WAAL,CAAnC;AACA,oBAAMH,MAAM,GAAGT,GAAG,CAACM,YAAnB;AACA,oBAAMI,IAAI,GAAGV,GAAG,CAACW,UAAjB;AACA1B,gBAAAA,eAAe,CAAC9B,MAAhB,CAAuBiD,IAAvB,CAA4BlE,WAAW,CAACuE,MAAD,EAAS,MAAT,CAAvC;AACD,eALD;AAMAxB,cAAAA,eAAe,CAAC7B,QAAhB,CAAyBgD,IAAzB,CAA8BV,mBAA9B;AACAlC,cAAAA,mBAAmB,CAACyB,eAAD,CAAnB;AACA;;AACF,iBAAK,UAAL;AACEY,cAAAA,IAAI,CAACJ,IAAL,CAAUM,OAAV,CAAkB,UAACC,GAAD,EAAS;AACzB,oBAAIa,gBAAgB,GAAG,EAAvB;AACA,oBAAMC,IAAI,GAAGC,QAAQ,CAAClB,IAAI,CAACJ,IAAL,CAAUjB,MAAX,CAAR,GAA6BuC,QAAQ,CAACf,GAAG,CAACgB,QAAJ,CAAaxC,MAAd,CAAlD;AAEA,oBAAMyC,KAAK,GAAGlD,aAAa,CAACiC,GAAD,CAA3B;AAEAa,gBAAAA,gBAAgB,CAACpB,IAAjB,GAAwBO,GAAG,CAACgB,QAA5B;AACAH,gBAAAA,gBAAgB,CAACrB,eAAjB,GAAiC,EAAjC;AAEAQ,gBAAAA,GAAG,CAACgB,QAAJ,CAAajB,OAAb,CAAqB,UAAAmB,MAAM;AAAA,yBAAIL,gBAAgB,CAACrB,eAAjB,CAAiCY,IAAjC,CAAsCrC,aAAa,CAACmD,MAAD,CAAnD,CAAJ;AAAA,iBAA3B;;AAEA,oBAAIJ,IAAI,GAAG,CAAX,EAAc;AACZ,uBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,IAArB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9BN,oBAAAA,gBAAgB,CAACpB,IAAjB,CAAsBW,IAAtB,CAA2B,CAA3B;AACD;AACF;;AAEDS,gBAAAA,gBAAgB,CAACvB,oBAAjB,GAAwC2B,KAAxC,CAjByB,CAkBzB;;AACAJ,gBAAAA,gBAAgB,CAACO,yBAAjB,GAA6CH,KAA7C;AACAJ,gBAAAA,gBAAgB,CAACQ,qBAAjB,GAAyCJ,KAAzC;AAEA/B,gBAAAA,YAAY,CAAC9B,QAAb,CAAsBgD,IAAtB,CAA2BS,gBAA3B,EAtByB,CAwBzB;AAID,eA5BD;AA8BA3B,cAAAA,YAAY,CAAC9B,QAAb,CAAsBoC,eAAtB,GAAwC,CAAC,KAAD,EAAO,MAAP,CAAxC;AAEA9B,cAAAA,iBAAiB,CAACwB,YAAD,CAAjB;AACA;AAnEJ;AAqED,SAtED;AAwED;AACA,KA3HH;AA6HD,GA1ID;;AA6IA,MAAMoC,iBAAiB,GAAGxD,cAAc,CAACyD,GAAf,CACxB,UAACC,CAAD,EAAGC,CAAH,EAAS;AACP,QAAMR,KAAK,GAAGpD,MAAM,CAAC4D,CAAD,CAApB;AACA,wBAAO;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,WAAW,EAAC;AAAb,OAAb;AAAA,iBAAoCF,CAApC,eAAsC;AAAM,QAAA,KAAK,EAAE;AAAChC,UAAAA,eAAe,EAACyB,KAAjB;AAAwBU,UAAAA,KAAK,EAAE,MAA/B;AAAuCC,UAAAA,MAAM,EAAE,MAA/C;AAAuDC,UAAAA,OAAO,EAAE,cAAhE;AAAgF,wBAAa;AAA7F;AAAb;AAAA;AAAA;AAAA;AAAA,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD,GAJuB,CAA1B;AAQA,sBAEI,QAAC,KAAD;AAAA,4BAEA,QAAC,WAAD;AAAA,6BACI,QAAC,IAAD;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,kCACE;AAAI,YAAA,EAAE,EAAC,SAAP;AAAiB,YAAA,SAAS,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAIE;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA,sBAA6C7F,YAAY,CAACe,SAAD;AAAzD;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAQK,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAa,UAAA,KAAK,EAAC,YAAnB;AAAA,iCAEH,QAAC,UAAD;AAAY,YAAA,OAAO,EAAE,uBAAuBwB,KAAvB,CAA6B,GAA7B,CAArB;AAAwD,YAAA,QAAQ,EAAEtB,OAAlE;AAA2E,YAAA,QAAQ,EAAE,kBAACe,KAAD,EAAW;AAAEhB,cAAAA,YAAY,CAACgB,KAAD,CAAZ;AAAqBL,cAAAA,YAAY,CAACK,KAAD,CAAZ;AAAqB;AAA5I;AAAA;AAAA;AAAA;AAAA;AAFG;AAAA;AAAA;AAAA;AAAA,iBARL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aAFA,eAuBE,QAAC,SAAD;AAAA,8BAGA,QAAC,IAAD;AAAM,QAAA,SAAS,EAAE,yBAAjB;AAA4C,QAAA,KAAK,EAAE;AAAC8D,UAAAA,YAAY,EAAC;AAAd,SAAnD;AAAA,gCACM,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,oCAECC,gBAAgB,IACfC,UAAU,CAACT,GAAX,CAAe,UAACU,GAAD,EAAMC,KAAN;AAAA,gCACX,QAAC,OAAD;AACE,cAAA,KAAK,EAAE;AAAC1C,gBAAAA,eAAe,EAAC2C,eAAe,CAACF,GAAG,CAACG,IAAL,CAAhC;AAA2CnB,gBAAAA,KAAK,EAAE;AAAlD,eADT;AAEE,cAAA,SAAS,EAAE,CAACoB,kBAAkB,CAACC,QAAnB,CAA4BL,GAAG,CAACM,EAAhC,IAAsC,UAAtC,GAAmD,EAApD,IAA0D,0BAFvE;AAGE,cAAA,OAAO,EAAE;AAAA,uBAAMC,eAAe,CAACP,GAAG,CAACM,EAAL,CAArB;AAAA,eAHX;AAIE,cAAA,EAAE,EAAEN,GAAG,CAACM,EAJV;AAAA,wBAMKN,GAAG,CAACG;AANT;AAAA;AAAA;AAAA;AAAA,qBADW;AAAA,WAAf,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADN,eAgBM,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAa,UAAA,SAAS,EAAC,iDAAvB;AAAA,iCACE,QAAC,OAAD;AAAS,YAAA,KAAK,EAAC,SAAf;AAAyB,YAAA,SAAS,EAAC,MAAnC;AAA0C,YAAA,OAAO,EAAE;AAAA,qBAAMK,gBAAgB,EAAtB;AAAA,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBAhBN;AAAA;AAAA;AAAA;AAAA;AAAA,eAHA,eAwBA,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAA,kCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHA,eAIA,QAAC,UAAD;AACE,YAAA,QAAQ,EAAEpF,gBAAgB,CAACD,QAD7B;AAEE,YAAA,MAAM,EAAEC,gBAAgB,CAACF,MAF3B;AAGE,YAAA,OAAO,EAAE;AACPuF,cAAAA,QAAQ,EAAE;AACRC,gBAAAA,OAAO,EAAE;AADD;AADH;AAHX;AAAA;AAAA;AAAA;AAAA,mBAJA,eAeA;AAAA;AAAA;AAAA;AAAA,mBAfA,eAgBA;AAAA;AAAA;AAAA;AAAA,mBAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eAxBA,eA6CE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAA,oBAED,sBAAS;AAAA,oCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAF,eAEV;AAAK,cAAA,KAAK,EAAE;AAACC,gBAAAA,QAAQ,EAAC,OAAV;AAAmBC,gBAAAA,MAAM,EAAC;AAA1B,eAAZ;AAAA,wBAAgDvB;AAAhD;AAAA;AAAA;AAAA;AAAA,qBAFU,eAIV,QAAC,eAAD;AACE,cAAA,QAAQ,EAAE7D,cAAc,CAACL,QAD3B;AAEE,cAAA,MAAM,EAAEK,cAAc,CAACN,MAFzB;AAGE,cAAA,OAAO,EAAE;AACPuF,gBAAAA,QAAQ,EAAE;AACRC,kBAAAA,OAAO,EAAE;AADD;AADH;AAHX;AAAA;AAAA;AAAA;AAAA,qBAJU,eAeV;AAAA;AAAA;AAAA;AAAA,qBAfU,eAgBV;AAAA;AAAA;AAAA;AAAA,qBAhBU;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eA7CF,eAoEE,QAAC,IAAD;AAAA,+BAGE,QAAC,IAAD;AAAA,kCAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFE,eAIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJE,eAKF,QAAC,UAAD;AACE,YAAA,QAAQ,EAAEpF,gBAAgB,CAACH,QAD7B;AAEE,YAAA,MAAM,EAAEG,gBAAgB,CAACJ,MAF3B;AAGE,YAAA,OAAO,EAAE;AACPuF,cAAAA,QAAQ,EAAE;AACRC,gBAAAA,OAAO,EAAE;AADD;AADH;AAHX;AAAA;AAAA;AAAA;AAAA,mBALE;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,eApEF;AAAA;AAAA;AAAA;AAAA;AAAA,aAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ;AAoHD,CA3UD;;GAAM7F,a;;KAAAA,a;AA6UN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateTrends = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [polarChartData, setPolarChartData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\nuseEffect(() => {\r\n  getChartData(dateRange);\r\n}, []);\r\n  \r\n  \r\n  var colorCounter=0;\r\n\r\n  const colors = [\r\n            'blue','lightblue','turquoise', 'yellow', 'orange', 'red', \r\n          ];\r\n\r\n  const windRoseLabels = [\r\n            '0-3','3-6','6-9', '9-12', '12-15', '15*', \r\n          ];\r\n\r\n  const windRoseColor = (value) => {\r\n\r\n\r\n\r\n    let n=0;\r\n\r\n    if (value < 3) {\r\n      n=0;\r\n    } else if (value < 6){\r\n      n=1;\r\n    } else if (value < 9){\r\n      n=2;\r\n    } else if (value < 12){\r\n      n=3;\r\n    } else if (value < 15){\r\n      n=4;\r\n    } else {\r\n      n=5;\r\n\r\n    }\r\n\r\n    console.log('windRoseColor', value, n)\r\n\r\n    const x = colors;\r\n\r\n    return x[n];\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const getChartData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) alert(responseData.error.message)\r\n\r\n        setLoading(false);\r\n\r\n        var windSpeedData = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n        var temperatureData = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n        var windRoseData = {\r\n          labels: [],\r\n          datasets: []\r\n        }\r\n\r\n\r\n        var windSpeedDataSets = {\r\n          label: 'WindSpeed',\r\n          borderColor: '#f87979',\r\n          pointBackgroundColor: 'transparent',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          data: []\r\n        };\r\n        var temperatureDataSets = {\r\n          label: 'Temperature',\r\n          borderColor: '#00D8FF',\r\n          pointBackgroundColor: 'transparent',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          data: []\r\n        };\r\n\r\n\r\n\r\n\r\n        if (responseData && responseData.graphs){\r\n\r\n\r\n\r\n        responseData.graphs.find((item) => {\r\n          switch (item.type) {\r\n            case 'WindSpeed':\r\n              item.data.forEach((rDs) => {\r\n                const windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\r\n                windSpeedDataSets.data.push(windSpeed);\r\n\r\n                let date = rDs.datetimeFrom.split(' ')[0];\r\n                let time = rDs.datetimeFrom.split(' ')[1];\r\n                let timeArr = time.split(':')\r\n\r\n                \r\n\r\n                const rDfrom = `${date} - ${timeArr[0]}:${timeArr[1]}`;\r\n                const rDto = rDs.datetimeTo;\r\n                windSpeedData.labels.push(rDfrom);\r\n              });\r\n\r\n              console.log('responseData.graphs', responseData.graphs);\r\n              \r\n              windSpeedData.datasets.push(windSpeedDataSets);\r\n              console.log('windSpeedData', windSpeedData);\r\n              setLineChartOneData(windSpeedData)\r\n              break;\r\n            case 'Temperature':\r\n              item.data.forEach((rDs) => {\r\n                temperatureDataSets.data.push(round(rDs.temperature))\r\n                const rDfrom = rDs.datetimeFrom;\r\n                const rDto = rDs.datetimeTo;\r\n                temperatureData.labels.push(formatDate2(rDfrom, 'time'));\r\n              });\r\n              temperatureData.datasets.push(temperatureDataSets);\r\n              setLineChartTwoData(temperatureData)\r\n              break;\r\n            case 'WindRose':\r\n              item.data.forEach((rDs) => {\r\n                let windRoseDataSets = {}\r\n                const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\r\n                \r\n                const color = windRoseColor(rDs);\r\n\r\n                windRoseDataSets.data = rDs.radiuses;\r\n                windRoseDataSets.backgroundColor=[];\r\n\r\n                rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\r\n\r\n                if (diff > 0) {\r\n                  for (let i = 0; i <= diff; i++) {\r\n                    windRoseDataSets.data.push(0);\r\n                  }\r\n                }\r\n                \r\n                windRoseDataSets.pointBackgroundColor = color;\r\n                // windRoseDataSets.pointBorderColor = \"white\",\r\n                windRoseDataSets.pointHoverBackgroundColor = color;\r\n                windRoseDataSets.pointHoverBorderColor = color;\r\n                \r\n                windRoseData.datasets.push(windRoseDataSets);\r\n\r\n                // console.log('windRoseRange',rDfrom,rDs.angle.from)\r\n                \r\n\r\n                \r\n              });\r\n\r\n              windRoseData.datasets.backgroundColor = ['red','blue'];\r\n\r\n              setPolarChartData(windRoseData)\r\n              break;\r\n          }\r\n        });\r\n\r\n      }\r\n      });\r\n\r\n  }\r\n\r\n\r\n  const windRoseLabelsMap = windRoseLabels.map(\r\n    (v,m) => {\r\n      const color = colors[m];\r\n      return <span style={{marginRight:'20px'}}>{v}<span style={{backgroundColor:color, width: '30px', height: '10px', display: 'inline-block', 'marginLeft':'10px' }}></span></span>;\r\n    }\r\n  )\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n               <CCol sm=\"5\" class=\"text-right\">\r\n\r\n            <DateFilter options={'y,cm,cy,12w,12m,x,xx'.split(',')} disabled={loading} onChange={(value) => { setDateRange(value); getChartData(value);}} />\r\n\r\n                            </CCol>\r\n\r\n            \r\n                            </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n\r\n        <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n              <CCol sm=\"9\">\r\n                Generators: \r\n              {generatorsLoaded && \r\n                generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-2 my-2\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                ))\r\n              }\r\n              </CCol>\r\n              <CCol sm=\"3\" className=\"text-right d-flex flex-center flex-justify-end \">\r\n                <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n        </CRow>\r\n\r\n        <CRow>\r\n          <CCol>\r\n          <h5>Wind Speed</h5>\r\n\r\n          <div>m/s</div>\r\n          <CChartLine\r\n            datasets={lineChartOneData.datasets}\r\n            labels={lineChartOneData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n\r\n\r\n          <br />\r\n          <br />\r\n          \r\n          </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol>\r\n          \r\n          {false && <><h5>Wind Rose</h5>\r\n\r\n          <div style={{maxWidth:'600px', margin:'auto'}}>{windRoseLabelsMap}</div>\r\n\r\n          <CChartPolarArea\r\n            datasets={polarChartData.datasets}\r\n            labels={polarChartData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n\r\n\r\n          <br />\r\n          <br /></>}\r\n\r\n          </CCol>\r\n          </CRow>\r\n          <CRow>\r\n\r\n\r\n            <CCol>\r\n\r\n          <h5>Temperature</h5>\r\n\r\n          <div>°C</div>\r\n          <CChartLine\r\n            datasets={lineChartTwoData.datasets}\r\n            labels={lineChartTwoData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n          </CCol>\r\n          </CRow>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateTrends\r\n"]},"metadata":{},"sourceType":"module"}