{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\helpers\\\\SessionTimeout.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef, Fragment } from 'react';\nimport moment from 'moment';\nimport { setCookie, getCookie } from './sessionCookie.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar SessionTimeout = function SessionTimeout() {\n  _s();\n\n  // const [second, setSecond] = useState(0);\n  var events = ['click', 'load', 'scroll'];\n  var timeStamp;\n  var userInactiveInterval = useRef();\n  var startTimerInterval = useRef(); // start inactive check\n\n  var timeChecker = function timeChecker() {\n    startTimerInterval.current = setTimeout(function () {\n      var storedTimeStamp = getCookie('lastTimeStamp'); //sessionStorage.getItem('lastTimeStamp');\n\n      userInactive(storedTimeStamp);\n    }, 60000);\n  }; // inactive timer\n\n\n  var userInactive = function userInactive(timeString) {\n    clearTimeout(startTimerInterval.current);\n    userInactiveInterval.current = setInterval(function () {\n      var maxTime = 540; // Maximum ideal time given before logout \n      // const popTime = 1; // remaining time (notification) left to logout.\n\n      var diff = moment.duration(moment().diff(moment(timeString)));\n      var minPast = diff.minutes(); // const leftSecond = 60 - diff.seconds();\n      // if (minPast === popTime) {\n      //     setSecond(leftSecond);\n      // }\n\n      if (minPast === maxTime) {\n        clearInterval(userInactiveInterval.current);\n        setCookie('lastTimeStamp', '');\n        setCookie('name', '');\n        window.location.reload();\n      }\n    }, 1000);\n  }; // reset interval timer\n\n\n  var resetTimer = useCallback(function () {\n    clearTimeout(startTimerInterval.current);\n    clearInterval(userInactiveInterval.current);\n\n    if (authenticated) {\n      timeStamp = moment();\n      setCookie('lastTimeStamp', timeStamp);\n    } else {\n      clearInterval(userInactiveInterval.current);\n      setCookie('lastTimeStamp', '');\n    }\n\n    timeChecker();\n  }, [authenticated]);\n  useEffect(function () {\n    events.forEach(function (event) {\n      window.addEventListener(event, resetTimer);\n    });\n    timeChecker();\n    return function () {\n      clearTimeout(startTimerInterval.current);\n    };\n  }, [resetTimer, events, timeChecker]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(SessionTimeout, \"rK0R9zdy24xfCdBbKyTcZOjyr8Y=\");\n\n_c = SessionTimeout;\nexport default SessionTimeout;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionTimeout\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/helpers/SessionTimeout.js"],"names":["React","useState","useEffect","useCallback","useRef","Fragment","moment","setCookie","getCookie","SessionTimeout","events","timeStamp","userInactiveInterval","startTimerInterval","timeChecker","current","setTimeout","storedTimeStamp","userInactive","timeString","clearTimeout","setInterval","maxTime","diff","duration","minPast","minutes","clearInterval","window","location","reload","resetTimer","authenticated","forEach","event","addEventListener"],"mappings":";;;;AAAA,OAAOA,KAAP,IACIC,QADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIIC,MAJJ,EAKIC,QALJ,QAMS,OANT;AAOA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,SAAR,EAAkBC,SAAlB,QAAkC,oBAAlC;;;AAEA,IAAMC,cAAc,GAAE,SAAhBA,cAAgB,GAAK;AAAA;;AAGvB;AAEA,MAAMC,MAAM,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAf;AACA,MAAIC,SAAJ;AACA,MAAIC,oBAAoB,GAAGR,MAAM,EAAjC;AACA,MAAIS,kBAAkB,GAAGT,MAAM,EAA/B,CARuB,CAYvB;;AACA,MAAIU,WAAW,GAAG,SAAdA,WAAc,GAAM;AACpBD,IAAAA,kBAAkB,CAACE,OAAnB,GAA6BC,UAAU,CAAC,YAAM;AAC1C,UAAIC,eAAe,GAAGT,SAAS,CAAC,eAAD,CAA/B,CAD0C,CACQ;;AAClDU,MAAAA,YAAY,CAACD,eAAD,CAAZ;AACH,KAHsC,EAGpC,KAHoC,CAAvC;AAIH,GALD,CAbuB,CAoBvB;;;AACA,MAAIC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAgB;AAC/BC,IAAAA,YAAY,CAACP,kBAAkB,CAACE,OAApB,CAAZ;AAEAH,IAAAA,oBAAoB,CAACG,OAArB,GAA+BM,WAAW,CAAC,YAAM;AACjD,UAAMC,OAAO,GAAG,GAAhB,CADiD,CAC5B;AACrB;;AAEA,UAAMC,IAAI,GAAGjB,MAAM,CAACkB,QAAP,CAAgBlB,MAAM,GAAGiB,IAAT,CAAcjB,MAAM,CAACa,UAAD,CAApB,CAAhB,CAAb;AACA,UAAMM,OAAO,GAAGF,IAAI,CAACG,OAAL,EAAhB,CALiD,CAMjD;AAEA;AACA;AACA;;AAEA,UAAID,OAAO,KAAKH,OAAhB,EAAyB;AACrBK,QAAAA,aAAa,CAACf,oBAAoB,CAACG,OAAtB,CAAb;AACAR,QAAAA,SAAS,CAAC,eAAD,EAAkB,EAAlB,CAAT;AACAA,QAAAA,SAAS,CAAC,MAAD,EAAS,EAAT,CAAT;AACAqB,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;AACA,KAlByC,EAkBvC,IAlBuC,CAA1C;AAmBH,GAtBD,CArBuB,CA6CvB;;;AACA,MAAIC,UAAU,GAAG5B,WAAW,CAAC,YAAM;AAC/BiB,IAAAA,YAAY,CAACP,kBAAkB,CAACE,OAApB,CAAZ;AACAY,IAAAA,aAAa,CAACf,oBAAoB,CAACG,OAAtB,CAAb;;AAEA,QAAIiB,aAAJ,EAAmB;AACfrB,MAAAA,SAAS,GAAGL,MAAM,EAAlB;AACAC,MAAAA,SAAS,CAAC,eAAD,EAAkBI,SAAlB,CAAT;AACH,KAHD,MAGO;AACHgB,MAAAA,aAAa,CAACf,oBAAoB,CAACG,OAAtB,CAAb;AACAR,MAAAA,SAAS,CAAC,eAAD,EAAkB,EAAlB,CAAT;AACH;;AACDO,IAAAA,WAAW;AACd,GAZ2B,EAYzB,CAACkB,aAAD,CAZyB,CAA5B;AAeA9B,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,MAAM,CAACuB,OAAP,CAAe,UAACC,KAAD,EAAW;AACtBN,MAAAA,MAAM,CAACO,gBAAP,CAAwBD,KAAxB,EAA+BH,UAA/B;AACH,KAFD;AAIAjB,IAAAA,WAAW;AAEX,WAAO,YAAM;AACTM,MAAAA,YAAY,CAACP,kBAAkB,CAACE,OAApB,CAAZ;AACH,KAFD;AAGH,GAVQ,EAUN,CAACgB,UAAD,EAAarB,MAAb,EAAqBI,WAArB,CAVM,CAAT;AAaA,sBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,WAAP;AACH,CA3ED;;GAAML,c;;KAAAA,c;AA6EN,eAAeA,cAAf","sourcesContent":["import React, {\r\n    useState,\r\n    useEffect,\r\n    useCallback,\r\n    useRef,\r\n    Fragment,\r\n  } from 'react';\r\nimport moment from 'moment';\r\nimport {setCookie,getCookie} from './sessionCookie.js'\r\n  \r\nconst SessionTimeout =()=> {\r\n\r\n    \r\n    // const [second, setSecond] = useState(0);\r\n\r\n    const events = ['click', 'load', 'scroll'];\r\n    let timeStamp;\r\n    let userInactiveInterval = useRef();\r\n    let startTimerInterval = useRef();\r\n    \r\n    \r\n\r\n    // start inactive check\r\n    let timeChecker = () => {\r\n        startTimerInterval.current = setTimeout(() => {\r\n            let storedTimeStamp = getCookie('lastTimeStamp'); //sessionStorage.getItem('lastTimeStamp');\r\n            userInactive(storedTimeStamp);\r\n        }, 60000);\r\n    };\r\n\r\n    // inactive timer\r\n    let userInactive = (timeString) => {\r\n        clearTimeout(startTimerInterval.current);\r\n    \r\n        userInactiveInterval.current = setInterval(() => {\r\n        const maxTime = 540; // Maximum ideal time given before logout \r\n        // const popTime = 1; // remaining time (notification) left to logout.\r\n    \r\n        const diff = moment.duration(moment().diff(moment(timeString)));\r\n        const minPast = diff.minutes();\r\n        // const leftSecond = 60 - diff.seconds();\r\n    \r\n        // if (minPast === popTime) {\r\n        //     setSecond(leftSecond);\r\n        // }\r\n    \r\n        if (minPast === maxTime) {\r\n            clearInterval(userInactiveInterval.current);\r\n            setCookie('lastTimeStamp', '');\r\n            setCookie('name', '');\r\n            window.location.reload();\r\n        }\r\n        }, 1000);\r\n    };\r\n\r\n    // reset interval timer\r\n    let resetTimer = useCallback(() => {\r\n        clearTimeout(startTimerInterval.current);\r\n        clearInterval(userInactiveInterval.current);\r\n    \r\n        if (authenticated) {\r\n            timeStamp = moment();\r\n            setCookie('lastTimeStamp', timeStamp);\r\n        } else {\r\n            clearInterval(userInactiveInterval.current);\r\n            setCookie('lastTimeStamp', '');\r\n        }\r\n        timeChecker();\r\n    }, [authenticated]);\r\n    \r\n    \r\n    useEffect(() => {\r\n        events.forEach((event) => {\r\n            window.addEventListener(event, resetTimer);\r\n        });\r\n    \r\n        timeChecker();\r\n    \r\n        return () => {\r\n            clearTimeout(startTimerInterval.current);\r\n        };\r\n    }, [resetTimer, events, timeChecker]);\r\n\r\n\r\n    return <Fragment />;\r\n};\r\n\r\nexport default SessionTimeout;"]},"metadata":{},"sourceType":"module"}