{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\reports\\\\settings.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CAlert, CLabel, CDataTable, CInputCheckbox } from '@coreui/react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Reports = function Reports() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      parksRows = _useState2[0],\n      setParksRows = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tableData = _useState4[0],\n      setTableData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      configData = _useState6[0],\n      setConfigData = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tableFields = _useState8[0],\n      setTableFields = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loaded = _useState12[0],\n      setLoaded = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      scopedSlots = _useState14[0],\n      setScopedSlots = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      reports = _useState16[0],\n      setReports = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      locations = _useState18[0],\n      setLocations = _useState18[1];\n\n  useEffect(function () {\n    loadConfiguration();\n  }, []);\n\n  var loadConfiguration = function loadConfiguration() {\n    setLoading(true);\n    DataAPI({\n      'endpoint': 'report/configure',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response.error) {\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      if (response.loaded) {\n        setReports(response.reports); // let i = 1;\n        // sSlots[report.id] = (item,row) => (\n        //   <td>\n        //     <CInputCheckbox  name=\"check-\" className={'mx-0'}/>\n        //   </td>\n        // )\n\n        setScopedSlots(sSlots);\n        var _locations = [];\n        var rows = [];\n        response.locations.forEach(function (location, index) {\n          _locations[location.id] = location.name;\n          rows[location.id] = [];\n        });\n        setLocations(_locations);\n        response.settings.forEach(function (setting, index) {\n          rows[setting.locId][setting.repId] = setting.selected;\n        });\n        var data = [];\n        var _tableData = [];\n        rows.map(function (row, locId) {\n          var rowData = [];\n          row.map(function (setting, repId) {\n            rowData[repId] = setting;\n          });\n          rowData['windFarm'] = _locations[locId];\n\n          _tableData.push(rowData);\n\n          data[locId] = rowData;\n        });\n\n        var _tableFields = reports.map(function (title, id) {\n          return {\n            key: id,\n            label: title\n          };\n        });\n\n        _tableFields.unshift({\n          key: 'windFarm',\n          label: 'Wind Farm'\n        });\n\n        setConfigData(data);\n        setTableData(_tableData);\n        setTableFields(_tableFields);\n        setLoaded(true);\n      }\n    });\n  };\n\n  var updateData = function updateData(ev, data) {\n    var name = ev.target.name;\n    var nameSplit = name.split('-');\n    var locId = nameSplit[1];\n    var repId = nameSplit[2]; // let data = configData;\n\n    data[locId][repId] = ev.target.checked;\n    var as = 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Reports\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(CLabel, {\n            children: \"Please select reports you wish to receive by e-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, _this), loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                children: \"Wind Farm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, _this), reports.map(function (rep, id) {\n                return /*#__PURE__*/_jsxDEV(CCol, {\n                  children: rep.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 21\n                }, _this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, _this), configData.map(function (row, locId) {\n              return /*#__PURE__*/_jsxDEV(CRow, {\n                children: [/*#__PURE__*/_jsxDEV(CCol, {\n                  children: locations[locId]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }, _this), row.map(function (setting, repId) {\n                  if (setting) return /*#__PURE__*/_jsxDEV(CCol, {\n                    children: /*#__PURE__*/_jsxDEV(CInputCheckbox, {\n                      type: 'checkbox',\n                      name: \"check-\" + locId + \"-\" + repId,\n                      value: \"check-\" + locId + \"-\" + repId,\n                      defaultChecked: true,\n                      className: 'd-inline-block position-relative',\n                      onChange: function onChange(ev) {\n                        updateData(ev, configData);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 37\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 35\n                  }, _this);else return /*#__PURE__*/_jsxDEV(CCol, {\n                    children: /*#__PURE__*/_jsxDEV(CInputCheckbox, {\n                      type: 'checkbox',\n                      name: \"check-\" + locId + \"-\" + repId,\n                      value: \"check-\" + locId + \"-\" + repId,\n                      className: 'd-inline-block position-relative',\n                      onChange: function onChange(ev) {\n                        updateData(ev, configData);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 37\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 35\n                  }, _this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, _this);\n            }), /*#__PURE__*/_jsxDEV(CDataTable, {\n              items: tableData,\n              fields: tableFields,\n              striped: true,\n              scopedSlots: scopedSlots // scopedSlots = {{\n              //   'status':\n              //     (item)=>(\n              //       <td>\n              //         <CBadge color={getBadge(item.status)}>\n              //           {item.status}\n              //         </CBadge>\n              //       </td>\n              //     )\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Reports, \"/ynQI1xAuOOvFLVbhcx4bYuH5bQ=\");\n\n_c = Reports;\nexport default Reports;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/reports/settings.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CAlert","CLabel","CDataTable","CInputCheckbox","DataAPI","Reports","parksRows","setParksRows","tableData","setTableData","configData","setConfigData","tableFields","setTableFields","loading","setLoading","loaded","setLoaded","scopedSlots","setScopedSlots","reports","setReports","locations","setLocations","loadConfiguration","then","response","error","message","alert","sSlots","rows","forEach","location","index","id","name","settings","setting","locId","repId","selected","data","map","row","rowData","push","title","key","label","unshift","updateData","ev","target","nameSplit","split","checked","as","rep"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CAlert,\r\n  CLabel,\r\n  CDataTable,\r\n  CInputCheckbox\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\n\r\nconst Reports = () => {\r\n\r\n  const [parksRows, setParksRows] = useState('');\r\n  const [tableData, setTableData] = useState([]);\r\n  const [configData, setConfigData] = useState([]);\r\n  const [tableFields, setTableFields] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [scopedSlots, setScopedSlots] = useState(false);\r\n  const [reports, setReports] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    loadConfiguration();\r\n  }, []);\r\n\r\n  \r\n\r\n  const loadConfiguration = () => {\r\n\r\n    setLoading(true);\r\n    \r\n    DataAPI({\r\n      'endpoint': 'report/configure',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        if (response.loaded) {\r\n          \r\n          setReports(response.reports)\r\n\r\n          // let i = 1;\r\n          // sSlots[report.id] = (item,row) => (\r\n          //   <td>\r\n          //     <CInputCheckbox  name=\"check-\" className={'mx-0'}/>\r\n          //   </td>\r\n          // )\r\n          setScopedSlots(sSlots);\r\n\r\n          let locations = [];\r\n          let rows = [];\r\n          response.locations.forEach((location,index) => {\r\n              locations[location.id] = location.name;\r\n              rows[location.id] = [];\r\n          });\r\n          setLocations(locations)\r\n\r\n          response.settings.forEach((setting,index) => {\r\n            rows[setting.locId][setting.repId] = setting.selected;\r\n\r\n          });\r\n\r\n          let data = []\r\n\r\n\r\n          let tableData = [];\r\n          rows.map((row, locId) => {\r\n            let rowData = [];\r\n            row.map((setting, repId) => {\r\n              rowData[repId] = setting;\r\n            });\r\n            rowData['windFarm'] = locations[locId];\r\n            tableData.push(rowData);\r\n            data[locId] = rowData;\r\n          });\r\n\r\n\r\n          const tableFields = reports.map((title, id) => ({\r\n              key: id,\r\n              label: title\r\n            }\r\n          ));\r\n          tableFields.unshift({\r\n            key: 'windFarm',\r\n            label: 'Wind Farm'\r\n          });\r\n\r\n          setConfigData(data);\r\n          setTableData(tableData);\r\n          setTableFields(tableFields);\r\n\r\n          setLoaded(true);\r\n\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\nconst updateData = (ev,data) => {\r\n  let name = ev.target.name;\r\n  let nameSplit = name.split('-');\r\n  let locId = nameSplit[1];\r\n  let repId = nameSplit[2];\r\n  // let data = configData;\r\n  data[locId][repId] = ev.target.checked;\r\n  let as = 0\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Reports\r\n            </h3>\r\n            <div className=\"small text-medium-emphasis\">Settings</div>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            \r\n            <CLabel>Please select reports you wish to receive by e-mail</CLabel>\r\n            {/* {parksRows} */}\r\n            {loaded &&\r\n\r\n            <div>\r\n\r\n              <CRow>\r\n                <CCol>\r\n                  Wind Farm\r\n                </CCol>\r\n                {reports.map((rep, id) => { \r\n                  return (\r\n                    <CCol>\r\n                      {rep.title}\r\n                    </CCol>\r\n\r\n                  )}\r\n                )}\r\n\r\n              </CRow>\r\n              {configData.map((row,locId) => { \r\n                return (\r\n                <CRow>\r\n                  <CCol>\r\n                    {locations[locId]}\r\n                  </CCol>\r\n                  {row.map((setting,repId) => { \r\n                    if (setting) \r\n                        return (\r\n                                  <CCol>\r\n                                    <CInputCheckbox type={'checkbox'} name={\"check-\"+locId+\"-\"+repId} value={\"check-\"+locId+\"-\"+repId} defaultChecked className={'d-inline-block position-relative'} \r\n                                    onChange={(ev)=>{updateData(ev,configData);}} \r\n                                      />\r\n                                  </CCol>\r\n                                )\r\n                    else\r\n                        return (\r\n                                  <CCol>\r\n                                    <CInputCheckbox type={'checkbox'} name={\"check-\"+locId+\"-\"+repId} value={\"check-\"+locId+\"-\"+repId} className={'d-inline-block position-relative'} \r\n                                    onChange={(ev)=>{updateData(ev,configData);}} \r\n                                      />\r\n                                  </CCol>\r\n                                )\r\n                    }\r\n                  )}\r\n              </CRow>)\r\n            }) }\r\n\r\n\r\n              <CDataTable\r\n                      items={tableData}\r\n                      fields={tableFields}\r\n                      striped\r\n                      scopedSlots = {scopedSlots}\r\n                      // scopedSlots = {{\r\n                      //   'status':\r\n                      //     (item)=>(\r\n                      //       <td>\r\n                      //         <CBadge color={getBadge(item.status)}>\r\n                      //           {item.status}\r\n                      //         </CBadge>\r\n                      //       </td>\r\n                      //     )\r\n    \r\n                      // }}\r\n                    />\r\n                    </div>\r\n            }\r\n\r\n          </CCol>\r\n        </CRow>\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n"]},"metadata":{},"sourceType":"module"}