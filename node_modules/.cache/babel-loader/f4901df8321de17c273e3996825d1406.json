{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\wind\\\\maintenance\\\\maintenance.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect, CInput, CDataTable, CLink } from '@coreui/react';\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\nimport DataAPI from '../../../../helpers/DataAPI.js';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../../helpers/utils.js';\nimport ChartLoading from '../../../others/ChartLoading.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableData = _useState2[0],\n      setTableData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      term = _useState4[0],\n      setTerm = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generator = _useState6[0],\n      setGenerator = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generators = _useState8[0],\n      setGenerators = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      generatorsLoaded = _useState10[0],\n      setGeneratorsLoaded = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      park = _useState12[0],\n      setPark = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      date = _useState14[0],\n      setDate = _useState14[1];\n\n  var _useState15 = useState('cm'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      dateRange = _useState16[0],\n      setDateRange = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      data = _useState18[0],\n      setData = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      loading = _useState20[0],\n      setLoading = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      dataLoaded = _useState22[0],\n      setDataLoaded = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      dataLoadError = _useState24[0],\n      setDataLoadError = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      statuses = _useState26[0],\n      setStatuses = _useState26[1];\n\n  var _useState27 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      graphData = _useState28[0],\n      setGraphData = _useState28[1];\n\n  useEffect(function () {\n    fetchGenerators();\n    refreshChart();\n  }, []);\n\n  var refreshChart = function refreshChart() {\n    fetchData();\n  };\n\n  var fetchGenerators = function fetchGenerators() {\n    DataAPI({\n      'endpoint': 'admin/generators/current/location',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!generatorsLoaded) {\n        setGenerators(response);\n        setGeneratorsLoaded(true);\n      }\n    });\n  };\n\n  var fetchData = function fetchData() {\n    setLoading(true);\n    setDataLoaded(false);\n    var endpoint;\n\n    if (generator && generator !== '0') {\n      endpoint = \"admin/documents/generator/\".concat(generator, \"?term=\").concat(term, \"&period=\").concat(dateRange, \"&size=-1\");\n    } else {\n      endpoint = \"admin/documents?term=\".concat(term, \"&period=\").concat(dateRange, \"&size=-1\");\n    }\n\n    DataAPI({\n      endpoint: endpoint,\n      method: 'GET'\n    }).then(function (responseData) {\n      setLoading(false);\n      setDataLoaded(true);\n      var tableData = [];\n      if (!responseData) return;\n\n      if (responseData.error) {\n        setDataLoadError(true);\n\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var statuses = responseData.map(function (row) {\n        return 'Closed';\n      });\n      setStatuses(statuses);\n      responseData.forEach(function (row, index) {\n        var allGenerators;\n\n        if (row.generators) {\n          allGenerators = row.generators.map(function (generator) {\n            return generator.code;\n          }).join(', ');\n        } else {\n          allGenerators = '-';\n        }\n\n        var serviceOrder = row.name.split('_').pop();\n        var startDateEndDate = [];\n        if (row.from) startDateEndDate.push(formatDate(row.from));\n        if (row.to) startDateEndDate.push(formatDate(row.to));\n        tableData.push({\n          serviceOrder: '#' + serviceOrder,\n          turbineId: allGenerators,\n          startDateEndDate: startDateEndDate.join('-'),\n          issue: row.name,\n          status: statuses[index],\n          download: process.env.REACT_APP_API_URL + row.downloadLink.replace('api/rest/', '')\n        });\n      });\n      setTableData(tableData);\n    });\n    var APIPayload = {\n      'period': dateRange\n    };\n    if (generator) APIPayload.generators = [generator]; // DataAPI({\n    //   endpoint: 'chart/performanceIndex',\n    //   method: 'POST',\n    //   body: APIPayload,\n    // })\n    //   .then(function (responseData) {\n    //     console.log('responseData PI >', responseData)\n    //     setLoading(false);\n    //     const tableData = [];\n    //     responseData.data.forEach(\n    //       generatorData => {\n    //         tableData.push({\n    //           turbineId: generatorData.name\n    //         });\n    //       }\n    //     );\n    //     // setTableData(tableData);\n    //     const data = {\n    //       labels: [],\n    //       datasets: [],\n    //       backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    //     }\n    //     const colors = [\n    //         '#003f5c',\n    //         '#374c80',\n    //         '#7a5195',\n    //         '#bc5090',\n    //         '#ef5675',\n    //         '#ff764a',\n    //         '#ffa600'\n    //       ];\n    //       const dataset100 = {\n    //         labels: [''],\n    //         label: '',\n    //         backgroundColor: colors.pop(),\n    //         data: []\n    //       };\n    //     responseData.data.forEach((rDs) => {\n    //       const dataset = {\n    //         labels: [],\n    //         label: rDs.name,\n    //         backgroundColor: colors.pop(),\n    //         data: [],\n    //         hidden: rDs.name!='Total'\n    //       };\n    //       rDs.data.graph.forEach((rD) => {\n    //         // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\n    //         dataset.labels.push(`${formatDate(rD.from)} - ${formatDate(rD.to)}`);\n    //         dataset.data.push(rD.value)\n    //         dataset100.data.push(100)\n    //       });\n    //       dataset.labels.reverse();\n    //       dataset.data.reverse();\n    //       data.datasets.push(dataset);\n    //       // data.datasets.push(dataset100);\n    //     });\n    //     responseData.data[0].data.graph.forEach((rD) => {\n    //       const rDfrom = rD.from;\n    //       const rDto = rD.to;\n    //       data.labels.push(`${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`);\n    //     });\n    //     data.labels.reverse();\n    //     setGraphData(data)\n    //   })\n    //   .catch(\n    //     err => console.warn(`ERROR! ${err}`)\n    //     // err => alert(`ERROR! ${err}`)\n    //   );\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var toggleStatus = function toggleStatus(index) {\n    var newStatuses = statuses; // const position = statuses.indexOf(index)\n    // let newStatuses = statuses.slice()\n    // if (position !== -1) {\n    //   newStatuses.splice(position, 1)\n    // } else {\n    //   newStatuses = [...statuses, index]\n    // }\n\n    setStatuses(newStatuses);\n  };\n\n  var fields = ['turbineId', 'serviceOrder', 'startDateEndDate', 'issue', 'status', {\n    label: 'Open Report',\n    key: 'download'\n  }];\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Maintenance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"8\",\n          className: \"text-right d-flex flex-center flex-justify-end\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-2 ml-xl-3 mb-0\",\n            style: {\n              lineHeight: 2.4,\n              minWidth: '64px'\n            },\n            children: \"Turbine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            className: 'input-md',\n            disabled: loading,\n            onChange: function onChange(ev) {\n              setGenerator(ev.target.value);\n            },\n            custom: true,\n            name: \"generator\",\n            id: \"generator\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"0\",\n              children: \"All turbines\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, _this), generators.map(function (oGenerator) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: oGenerator.id,\n                children: oGenerator.code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 35\n              }, _this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-2 ml-xl-3 m-0\",\n            style: {\n              lineHeight: 2.4\n            },\n            children: \"Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['y', 'cm', 'cy', 'x', 'xx'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-2 ml-xl-3 m-0\",\n            style: {\n              lineHeight: 2.4,\n              minWidth: '75px'\n            },\n            children: \"Search term\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CInput, {\n            type: \"text\",\n            placeholder: \"\",\n            autoComplete: \"username\",\n            style: {\n              minWidth: '100px'\n            },\n            disabled: loading,\n            onChange: function onChange(ev) {\n              setTerm(ev.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            disabled: loading,\n            className: \"mr-2 ml-3\",\n            onClick: function onClick() {\n              refreshChart();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: dataLoaded || dataLoadError ? /*#__PURE__*/_jsxDEV(CDataTable, {\n        items: tableData,\n        fields: fields,\n        striped: true,\n        itemsPerPage: 50,\n        pagination: true,\n        scopedSlots: {\n          'download': function download(item, index) {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"py-2\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: item.download,\n                children: \"DOWNLOAD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 25\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 23\n            }, _this);\n          },\n          'status': function status(item, index) {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"py-2\",\n              children: /*#__PURE__*/_jsxDEV(CButton, {\n                color: \"primary\",\n                variant: \"outline\",\n                shape: \"square\",\n                size: \"sm\",\n                onClick: function onClick() {\n                  toggleStatus(index);\n                },\n                children: item.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 25\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 23\n            }, _this);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(ChartLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"2gMTsTF8KpNZZ+2MnNZt8vl+2yM=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/wind/maintenance/maintenance.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CInput","CDataTable","CLink","Bar","Chart","Line","Scatter","DataAPI","formatDate","round","getDateLabel","DateFilter","ChartLoading","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","Charts","tableData","setTableData","term","setTerm","generator","setGenerator","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","park","setPark","date","setDate","dateRange","setDateRange","data","setData","loading","setLoading","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","statuses","setStatuses","labels","datasets","graphData","setGraphData","fetchGenerators","refreshChart","fetchData","then","response","endpoint","method","responseData","error","message","alert","map","row","forEach","index","allGenerators","code","join","serviceOrder","name","split","pop","startDateEndDate","from","push","to","turbineId","issue","status","download","process","env","REACT_APP_API_URL","downloadLink","replace","APIPayload","toggleStatus","newStatuses","fields","label","key","lineHeight","minWidth","ev","target","value","oGenerator","id","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect,\r\n  CInput,\r\n  CDataTable,\r\n  CLink\r\n} from '@coreui/react'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../../helpers/utils.js'\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Charts = () => {\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [term, setTerm] = useState([]);\r\n  const [generator, setGenerator] = useState();\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [statuses, setStatuses] = useState([]);\r\n  \r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n   useEffect(() => {\r\n\r\n      fetchGenerators();\r\n      \r\n      refreshChart();\r\n\r\n  }, []);\r\n\r\n\r\n  const refreshChart = () => {\r\n    fetchData();\r\n  }\r\n\r\n  const fetchGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/generators/current/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!generatorsLoaded) {\r\n          setGenerators(response);\r\n          setGeneratorsLoaded(true);\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true)\r\n    setDataLoaded(false)\r\n\r\n    let endpoint;\r\n\r\n    if (generator && generator !== '0') {\r\n      endpoint = `admin/documents/generator/${generator}?term=${term}&period=${dateRange}&size=-1`;\r\n    } else {\r\n      endpoint = `admin/documents?term=${term}&period=${dateRange}&size=-1`;\r\n    }\r\n\r\n    DataAPI({\r\n      endpoint: endpoint,\r\n      method: 'GET'\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n        setDataLoaded(true);\r\n        const tableData = [];\r\n\r\n        if (!responseData) return;\r\n        if (responseData.error) {\r\n          setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n          } else {\r\n            return(alert(responseData.error)) \r\n          }\r\n        }\r\n\r\n\r\n        var statuses = responseData.map(row => 'Closed')\r\n        setStatuses(statuses);\r\n\r\n        responseData.forEach(\r\n          (row,index) => {\r\n\r\n            let allGenerators;\r\n\r\n            if (row.generators) {\r\n              allGenerators = row.generators.map(generator => generator.code).join(', ');\r\n            } else {\r\n              allGenerators = '-';\r\n            }\r\n\r\n            const serviceOrder =  row.name.split('_').pop();\r\n\r\n            const startDateEndDate = [];\r\n\r\n            if (row.from) startDateEndDate.push(formatDate(row.from));\r\n            if (row.to) startDateEndDate.push(formatDate(row.to));\r\n\r\n            tableData.push({\r\n              serviceOrder: '#'+serviceOrder,\r\n              turbineId: allGenerators,\r\n              startDateEndDate: startDateEndDate.join('-'),\r\n              issue: row.name,\r\n              status: statuses[index],\r\n              download: process.env.REACT_APP_API_URL+row.downloadLink.replace('api/rest/', ''),\r\n            });\r\n\r\n          }\r\n        );\r\n\r\n        setTableData(tableData);\r\n\r\n  })\r\n\r\n\r\n    const APIPayload = {\r\n        'period' : dateRange,\r\n      }\r\n\r\n    if (generator) APIPayload.generators = [generator]\r\n\r\n    // DataAPI({\r\n    //   endpoint: 'chart/performanceIndex',\r\n    //   method: 'POST',\r\n    //   body: APIPayload,\r\n    // })\r\n    //   .then(function (responseData) {\r\n\r\n    //     console.log('responseData PI >', responseData)\r\n\r\n    //     setLoading(false);\r\n\r\n    //     const tableData = [];\r\n\r\n    //     responseData.data.forEach(\r\n    //       generatorData => {\r\n\r\n    //         tableData.push({\r\n    //           turbineId: generatorData.name\r\n    //         });\r\n\r\n    //       }\r\n    //     );\r\n\r\n    //     // setTableData(tableData);\r\n\r\n    //     const data = {\r\n    //       labels: [],\r\n    //       datasets: [],\r\n    //       backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n    //     }\r\n\r\n    //     const colors = [\r\n    //         '#003f5c',\r\n    //         '#374c80',\r\n    //         '#7a5195',\r\n    //         '#bc5090',\r\n    //         '#ef5675',\r\n    //         '#ff764a',\r\n    //         '#ffa600'\r\n    //       ];\r\n\r\n\r\n    //       const dataset100 = {\r\n    //         labels: [''],\r\n    //         label: '',\r\n    //         backgroundColor: colors.pop(),\r\n    //         data: []\r\n    //       };\r\n\r\n    //     responseData.data.forEach((rDs) => {\r\n\r\n    //       const dataset = {\r\n    //         labels: [],\r\n    //         label: rDs.name,\r\n    //         backgroundColor: colors.pop(),\r\n    //         data: [],\r\n    //         hidden: rDs.name!='Total'\r\n    //       };\r\n\r\n    //       rDs.data.graph.forEach((rD) => {\r\n    //         // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n    //         dataset.labels.push(`${formatDate(rD.from)} - ${formatDate(rD.to)}`);\r\n    //         dataset.data.push(rD.value)\r\n\r\n    //         dataset100.data.push(100)\r\n\r\n    //       });\r\n\r\n    //       dataset.labels.reverse();\r\n    //       dataset.data.reverse();\r\n\r\n    //       data.datasets.push(dataset);\r\n    //       // data.datasets.push(dataset100);\r\n\r\n    //     });\r\n\r\n    //     responseData.data[0].data.graph.forEach((rD) => {\r\n    //       const rDfrom = rD.from;\r\n    //       const rDto = rD.to;\r\n    //       data.labels.push(`${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`);\r\n\r\n    //     });\r\n\r\n    //     data.labels.reverse();\r\n\r\n    //     setGraphData(data)\r\n\r\n    //   })\r\n    //   .catch(\r\n    //     err => console.warn(`ERROR! ${err}`)\r\n    //     // err => alert(`ERROR! ${err}`)\r\n    //   );\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const toggleStatus = (index) => {\r\n    let newStatuses = statuses\r\n    // const position = statuses.indexOf(index)\r\n    // let newStatuses = statuses.slice()\r\n    // if (position !== -1) {\r\n    //   newStatuses.splice(position, 1)\r\n    // } else {\r\n    //   newStatuses = [...statuses, index]\r\n    // }\r\n    setStatuses(newStatuses)\r\n  }\r\n\r\n\r\n\r\n  const fields = [\r\n    'turbineId',\r\n    'serviceOrder',\r\n    'startDateEndDate',\r\n    'issue',\r\n    'status',\r\n    { label: 'Open Report', key: 'download' },\r\n\r\n\r\n  ];\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          {/* <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Maintenance\r\n              </h3>\r\n              <br />\r\n              </CCol>\r\n\r\n              </CRow>\r\n              <CRow>\r\n\r\n              <CCol sm=\"3\" class=\"text-right\">\r\n\r\n            <DateFilter options={'y,cm,cy,12w,12m,x,xx'.split(',')} value={dateRange} onChange={(value) => { setDateRange(value);}} />\r\n\r\n                            </CCol>\r\n\r\n              <CCol sm=\"3\" class=\"text-right\">\r\n            <CSelect className={'input-md'} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n\r\n            <option value=\"0\">All generators</option>\r\n\r\n            {generators.map((oGenerator) => (\r\n                                <option value={oGenerator.id}>\r\n                                  {oGenerator.code}\r\n                                </option>\r\n                              ))}</CSelect>\r\n            </CCol>\r\n\r\n               \r\n\r\n            \r\n            <CCol sm=\"3\" class=\"text-right\">\r\n              <CInput type=\"text\" placeholder=\"Search term\" autoComplete=\"username\" onChange={(ev) => { setTerm(ev.target.value);}} />\r\n            </CCol>\r\n\r\n            <CCol sm=\"3\" class=\"text-right\">\r\n              <CButton disabled={loading}  onClick={ () => { refreshChart(); } } color=\"primary\" className=\"px-4\">Submit</CButton>\r\n            </CCol>\r\n          </CRow> */}\r\n\r\n\r\n\r\n\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Maintenance\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n            \r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 mb-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Turbine</h6>\r\n              <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                <option value=\"0\">All turbines</option>\r\n              {generators.map((oGenerator) => (\r\n                                  <option value={oGenerator.id}>\r\n                                    {oGenerator.code}\r\n                                  </option>\r\n                                ))}</CSelect>\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value);}} />\r\n              <h6 className=\"mr-2 ml-2 ml-xl-3 m-0\" style={{lineHeight:2.4,minWidth:'75px'}} >Search term</h6>\r\n              <CInput type=\"text\" placeholder=\"\" autoComplete=\"username\" style={{minWidth:'100px'}} disabled={loading} onChange={(ev) => { setTerm(ev.target.value);}} />\r\n              <CButton color=\"primary\" disabled={loading} className=\"mr-2 ml-3\" onClick={() => { refreshChart();}} >Submit</CButton>\r\n            </CCol>\r\n          </CRow>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </CCardHeader>\r\n      <CCardBody>\r\n        {dataLoaded || dataLoadError ? \r\n          <CDataTable\r\n              items={tableData}\r\n              fields={fields}\r\n              striped\r\n              itemsPerPage={50}\r\n              pagination\r\n              scopedSlots = {{\r\n                'download':\r\n                  (item, index)=>{\r\n\r\n                    return (\r\n                      <td className=\"py-2\">\r\n                        <a href={item.download}>DOWNLOAD</a>\r\n                      </td>\r\n                      )\r\n                  },\r\n                'status':\r\n                  (item, index)=>{\r\n                    return (\r\n                      <td className=\"py-2\">\r\n                        <CButton\r\n                          color=\"primary\"\r\n                          variant=\"outline\"\r\n                          shape=\"square\"\r\n                          size=\"sm\"\r\n                          onClick={()=>{toggleStatus(index)}}\r\n                        >\r\n                          {item.status}\r\n                        </CButton>\r\n                      </td>\r\n                      )\r\n                  },\r\n              }}\r\n            />\r\n        : \r\n          <ChartLoading/>\r\n        }\r\n\r\n        {/* <Line data={graphData} /> */}\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}