{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValidator = void 0;\n\nvar _findSuggestion = require(\"./find-suggestion\");\n\nvar OptionValidator = /*#__PURE__*/function () {\n  function OptionValidator(descriptor) {\n    _classCallCheck(this, OptionValidator);\n\n    this.descriptor = descriptor;\n  }\n\n  _createClass(OptionValidator, [{\n    key: \"validateTopLevelOptions\",\n    value: function validateTopLevelOptions(options, TopLevelOptionShape) {\n      var validOptionNames = Object.keys(TopLevelOptionShape);\n\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var option = _Object$keys[_i];\n\n        if (!validOptionNames.includes(option)) {\n          throw new Error(this.formatMessage(\"'\".concat(option, \"' is not a valid top-level option.\\n- Did you mean '\").concat((0, _findSuggestion.findSuggestion)(option, validOptionNames), \"'?\")));\n        }\n      }\n    }\n  }, {\n    key: \"validateBooleanOption\",\n    value: function validateBooleanOption(name, value, defaultValue) {\n      if (value === undefined) {\n        return defaultValue;\n      } else {\n        this.invariant(typeof value === \"boolean\", \"'\".concat(name, \"' option must be a boolean.\"));\n      }\n\n      return value;\n    }\n  }, {\n    key: \"validateStringOption\",\n    value: function validateStringOption(name, value, defaultValue) {\n      if (value === undefined) {\n        return defaultValue;\n      } else {\n        this.invariant(typeof value === \"string\", \"'\".concat(name, \"' option must be a string.\"));\n      }\n\n      return value;\n    }\n  }, {\n    key: \"invariant\",\n    value: function invariant(condition, message) {\n      if (!condition) {\n        throw new Error(this.formatMessage(message));\n      }\n    }\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(message) {\n      return \"\".concat(this.descriptor, \": \").concat(message);\n    }\n  }]);\n\n  return OptionValidator;\n}();\n\nexports.OptionValidator = OptionValidator;","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/helper-validator-option/lib/validator.js"],"names":["Object","defineProperty","exports","value","OptionValidator","_findSuggestion","require","descriptor","options","TopLevelOptionShape","validOptionNames","keys","option","includes","Error","formatMessage","findSuggestion","name","defaultValue","undefined","invariant","condition","message"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;IAEMF,e;AACJ,2BAAYG,UAAZ,EAAwB;AAAA;;AACtB,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;;;WAED,iCAAwBC,OAAxB,EAAiCC,mBAAjC,EAAsD;AACpD,UAAMC,gBAAgB,GAAGV,MAAM,CAACW,IAAP,CAAYF,mBAAZ,CAAzB;;AAEA,sCAAqBT,MAAM,CAACW,IAAP,CAAYH,OAAZ,CAArB,kCAA2C;AAAtC,YAAMI,MAAM,mBAAZ;;AACH,YAAI,CAACF,gBAAgB,CAACG,QAAjB,CAA0BD,MAA1B,CAAL,EAAwC;AACtC,gBAAM,IAAIE,KAAJ,CAAU,KAAKC,aAAL,YAAuBH,MAAvB,iEACN,CAAC,GAAGP,eAAe,CAACW,cAApB,EAAoCJ,MAApC,EAA4CF,gBAA5C,CADM,QAAV,CAAN;AAED;AACF;AACF;;;WAED,+BAAsBO,IAAtB,EAA4Bd,KAA5B,EAAmCe,YAAnC,EAAiD;AAC/C,UAAIf,KAAK,KAAKgB,SAAd,EAAyB;AACvB,eAAOD,YAAP;AACD,OAFD,MAEO;AACL,aAAKE,SAAL,CAAe,OAAOjB,KAAP,KAAiB,SAAhC,aAA+Cc,IAA/C;AACD;;AAED,aAAOd,KAAP;AACD;;;WAED,8BAAqBc,IAArB,EAA2Bd,KAA3B,EAAkCe,YAAlC,EAAgD;AAC9C,UAAIf,KAAK,KAAKgB,SAAd,EAAyB;AACvB,eAAOD,YAAP;AACD,OAFD,MAEO;AACL,aAAKE,SAAL,CAAe,OAAOjB,KAAP,KAAiB,QAAhC,aAA8Cc,IAA9C;AACD;;AAED,aAAOd,KAAP;AACD;;;WAED,mBAAUkB,SAAV,EAAqBC,OAArB,EAA8B;AAC5B,UAAI,CAACD,SAAL,EAAgB;AACd,cAAM,IAAIP,KAAJ,CAAU,KAAKC,aAAL,CAAmBO,OAAnB,CAAV,CAAN;AACD;AACF;;;WAED,uBAAcA,OAAd,EAAuB;AACrB,uBAAU,KAAKf,UAAf,eAA8Be,OAA9B;AACD;;;;;;AAIHpB,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValidator = void 0;\n\nvar _findSuggestion = require(\"./find-suggestion\");\n\nclass OptionValidator {\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n\n  validateTopLevelOptions(options, TopLevelOptionShape) {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));\n      }\n    }\n  }\n\n  validateBooleanOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"boolean\", `'${name}' option must be a boolean.`);\n    }\n\n    return value;\n  }\n\n  validateStringOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"string\", `'${name}' option must be a string.`);\n    }\n\n    return value;\n  }\n\n  invariant(condition, message) {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message) {\n    return `${this.descriptor}: ${message}`;\n  }\n\n}\n\nexports.OptionValidator = OptionValidator;"]},"metadata":{},"sourceType":"script"}