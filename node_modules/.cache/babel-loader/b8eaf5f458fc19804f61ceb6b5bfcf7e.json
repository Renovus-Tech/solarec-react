{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\forecast.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { setCookie, getCookie } from '../../../helpers/sessionCookie.js';\nimport moment from 'moment-timezone';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner, CLabel } from '@coreui/react';\nimport { Chart, Plugin } from 'chart.js';\nimport { CChartLine } from '@coreui/react-chartjs';\nimport { Line } from 'react-chartjs-2';\nimport { OPEN_WEATHER_API, STORMGLASS_API_KEY, STORMGLASS_API } from '../../../constants';\nimport arrow from '../../../assets/arrow.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ClimateForecast = function ClimateForecast() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      arrowImage = _useState8[0],\n      setArrowImage = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      datetimes = _useState10[0],\n      setDatetimes = _useState10[1];\n\n  var _useState11 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      lineChartOneData = _useState12[0],\n      setLineChartOneData = _useState12[1];\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var arrowImage, start, hour, new_, APIResponse, responseData, graphData, dataset, _datetimes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              arrowImage = new Image(22, 22);\n              arrowImage.src = arrow;\n\n              arrowImage.onload = function () {\n                setArrowImage(this);\n              }; // const APIResponse = await fetch(OPEN_WEATHER_API);\n              // const responseData = await APIResponse.json();\n              // if (responseData.error && responseData.error.message) {\n              //   setDataLoadError(true)\n              //   alert(responseData.error.message)\n              // } \n              // const graphData = {\n              //   labels: [],\n              //   datasets: []\n              // }\n              // let firstDate = 0\n              // let lastDate = 0\n              // if (responseData) {\n              //   graphData.labels = responseData.list.map( (x,i) => {\n              //     return x.wind.deg;\n              //   })\n              //   const dataset = {\n              //     label:  'Height 10 meters (Open Weather)',\n              //     borderColor: '#003f5c',\n              //     pointBackgroundColor: '#003f5c',\n              //     pointBorderColor: 'transparent',\n              //     backgroundColor: 'transparent',\n              //     data: responseData.list.map( (x,i) => {\n              //       return x.wind.speed;\n              //     })\n              //   }\n              //   graphData.datasets.push(dataset)\n              //   const datetimes = []\n              //   firstDate = responseData.list[0].dt\n              //   lastDate = responseData.list[responseData.list.length-1].dt\n              //   responseData.list.forEach((value,index) => {\n              //     datetimes.push(value.dt);\n              //   })\n              //   setDatetimes(datetimes)\n              // }\n\n\n              start = moment().unix();\n              hour = start.hour();\n              _context.next = 8;\n              return fetch(STORMGLASS_API.replace('@START@').replace('@END@', \"\"), {\n                headers: {\n                  'Authorization': STORMGLASS_API_KEY\n                }\n              });\n\n            case 8:\n              APIResponse = _context.sent;\n              _context.next = 11;\n              return APIResponse.json();\n\n            case 11:\n              responseData = _context.sent;\n\n              if (responseData.errors && responseData.errors.key) {\n                setDataLoadError(true);\n                alert(responseData.errors.key);\n              }\n\n              graphData = {\n                labels: [],\n                datasets: []\n              };\n\n              if (responseData && !responseData.errors) {\n                graphData.labels = responseData.hours.map(function (x, i) {\n                  return x.windDirection100m.sg;\n                });\n                dataset = {\n                  label: 'At 100 meters height',\n                  borderColor: '#ff764a',\n                  pointBackgroundColor: '#ef5675',\n                  pointBorderColor: 'transparent',\n                  backgroundColor: 'transparent',\n                  data: responseData.hours.map(function (x, i) {\n                    return x.windSpeed100m.sg;\n                  })\n                };\n                graphData.datasets.push(dataset);\n                _datetimes = [];\n                responseData.hours.forEach(function (value) {\n                  _datetimes.push(value.time);\n                });\n                setDatetimes(_datetimes);\n              }\n\n              setLineChartOneData(graphData);\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var plugins = [{\n    afterDraw: function afterDraw(chart) {\n      var ctx = chart.ctx;\n      var xAxis = chart.scales['x'];\n      var yAxis = chart.scales['y'];\n      xAxis.ticks.forEach(function (value, index) {\n        if (index % 6 == 0) {\n          var x = xAxis.getPixelForTick(index); // var deg = value.label;\n          // var newImageCanvas = document.createElement('canvas');\n          // newImageCanvas.width  = 22;\n          // newImageCanvas.height = 22;\n          // var newCtx = newImageCanvas.getContext('2d') ;\n          // newCtx.save();\n          // newCtx.translate(newImageCanvas.width/2,newImageCanvas.height/2);\n          // newCtx.rotate((deg+90)*0.01745);\n          // newCtx.translate(-newImageCanvas.width * 0.5, -newImageCanvas.height * 0.5);  \n          // newCtx.drawImage(arrowImage, 0,0);\n          // newCtx.restore();\n          // ctx.drawImage(newImageCanvas, x - 10, yAxis.bottom + 34, arrowImage.width, arrowImage.height)\n\n          var datetime = moment(datetimes[index]);\n          var month = datetime.month() + 1 > 9 ? datetime.month() + 1 : '0' + (datetime.month() + 1);\n          var day = datetime.date() > 9 ? datetime.date() : '0' + datetime.date();\n          var hour = datetime.hour() > 9 ? datetime.hour() : '0' + datetime.hour();\n          var minute = datetime.minutes() > 9 ? datetime.minutes() : '0' + datetime.minutes();\n          var date = month + \"-\" + day;\n          var time = hour + \":\" + minute;\n          ctx.font = \"11px Arial\";\n          ctx.fillText(time, x - 12, yAxis.bottom + 16);\n          ctx.fillText(date, x - 12, yAxis.bottom + 28);\n        }\n      });\n      ctx.font = \"12px Arial\"; // ctx.fillText(\"Direction\", 0, yAxis.bottom + 49);\n    }\n  }];\n  var options = {\n    type: 'line',\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    elements: {\n      line: {\n        tension: .4\n      }\n    },\n    layout: {\n      padding: {\n        bottom: 80,\n        left: 50,\n        right: 20\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          display: false\n        }\n      },\n      y: {\n        min: 0,\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title(tooltipItem) {\n            return '';\n          },\n          label: function label(tooltipItem) {\n            var datetime = new Date((datetimes[tooltipItem.dataIndex] - 3 * 60 * 60) * 1000);\n            var month = datetime.getMonth() + 1 > 9 ? datetime.getMonth() + 1 : '0' + (datetime.getMonth() + 1);\n            var day = datetime.getDate() > 9 ? datetime.getDate() : '0' + datetime.getDate();\n            var hour = datetime.getHours() > 9 ? datetime.getHours() : '0' + datetime.getHours();\n            var minute = datetime.getMinutes() > 9 ? datetime.getMinutes() : '0' + datetime.getMinutes();\n            var date = month + '-' + day + ' ' + hour + ':' + minute;\n            return [\"Date: \" + date, \"Wind Speed: \" + round(tooltipItem.raw, 1) + ' m/s', \"Wind Direction: \" + tooltipItem.label + '°'];\n          }\n        }\n      } // legend: {\n      //   display: false\n      // },\n\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate - Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"8\",\n          className: \"text-right d-flex flex-center flex-justify-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          className: 'mb-5',\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Wind Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"m/s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: lineChartOneData,\n              options: options,\n              plugins: plugins\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(CSpinner, {\n          className: \"loading-spinner\",\n          color: \"#321fdb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateForecast, \"Ijjf9ewO2vbaeNiq5C29a0Xbw1c=\");\n\n_c = ClimateForecast;\nexport default ClimateForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateForecast\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/forecast.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","setCookie","getCookie","moment","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CLabel","Chart","Plugin","CChartLine","Line","OPEN_WEATHER_API","STORMGLASS_API_KEY","STORMGLASS_API","arrow","ClimateForecast","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","arrowImage","setArrowImage","datetimes","setDatetimes","labels","datasets","lineChartOneData","setLineChartOneData","fetchData","Image","src","onload","start","unix","hour","fetch","replace","headers","APIResponse","json","responseData","errors","key","alert","graphData","hours","map","x","i","windDirection100m","sg","dataset","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","data","windSpeed100m","push","forEach","value","time","plugins","afterDraw","chart","ctx","xAxis","scales","yAxis","ticks","index","getPixelForTick","datetime","month","day","date","minute","minutes","font","fillText","bottom","options","type","responsive","animation","duration","tooltips","enabled","legend","display","elements","line","tension","layout","padding","left","right","y","min","beginAtZero","tooltip","callbacks","title","tooltipItem","Date","dataIndex","getMonth","getDate","getHours","getMinutes","raw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\nimport moment from 'moment-timezone';\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart,\r\n  Plugin\r\n} from 'chart.js';\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport { OPEN_WEATHER_API, STORMGLASS_API_KEY, STORMGLASS_API } from '../../../constants'\r\nimport arrow from '../../../assets/arrow.png'\r\n\r\n\r\nconst ClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [arrowImage, setArrowImage] = useState(null)\r\n  const [datetimes, setDatetimes] = useState([])\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n\r\n    setLoading(true);\r\n\r\n    var arrowImage = new Image(22,22);\r\n    arrowImage.src = arrow\r\n    arrowImage.onload = function() {\r\n      setArrowImage(this);\r\n    }\r\n\r\n    // const APIResponse = await fetch(OPEN_WEATHER_API);\r\n    // const responseData = await APIResponse.json();\r\n\r\n    // if (responseData.error && responseData.error.message) {\r\n    //   setDataLoadError(true)\r\n    //   alert(responseData.error.message)\r\n    // } \r\n\r\n    // const graphData = {\r\n    //   labels: [],\r\n    //   datasets: []\r\n    // }\r\n\r\n    // let firstDate = 0\r\n    // let lastDate = 0\r\n\r\n    // if (responseData) {\r\n\r\n    //   graphData.labels = responseData.list.map( (x,i) => {\r\n    //     return x.wind.deg;\r\n    //   })\r\n\r\n    //   const dataset = {\r\n    //     label:  'Height 10 meters (Open Weather)',\r\n    //     borderColor: '#003f5c',\r\n    //     pointBackgroundColor: '#003f5c',\r\n    //     pointBorderColor: 'transparent',\r\n    //     backgroundColor: 'transparent',\r\n    //     data: responseData.list.map( (x,i) => {\r\n    //       return x.wind.speed;\r\n    //     })\r\n    //   }\r\n    //   graphData.datasets.push(dataset)\r\n\r\n    //   const datetimes = []\r\n    //   firstDate = responseData.list[0].dt\r\n    //   lastDate = responseData.list[responseData.list.length-1].dt\r\n    //   responseData.list.forEach((value,index) => {\r\n    //     datetimes.push(value.dt);\r\n    //   })\r\n    //   setDatetimes(datetimes)\r\n\r\n    // }\r\n\r\n\r\n    let start = moment().unix()\r\n    let hour = start.hour()\r\n    let new_\r\n    const APIResponse = await fetch(STORMGLASS_API.replace('@START@',).replace('@END@',\"\"), {\r\n      headers: {\r\n        'Authorization': STORMGLASS_API_KEY\r\n      }\r\n    });\r\n    const responseData = await APIResponse.json();\r\n\r\n    if (responseData.errors && responseData.errors.key) {\r\n      setDataLoadError(true)\r\n      alert(responseData.errors.key)\r\n    } \r\n\r\n    const graphData = {\r\n      labels: [],\r\n      datasets: []\r\n    }\r\n\r\n    if (responseData && !responseData.errors) {\r\n\r\n      graphData.labels = responseData.hours.map( (x,i) => {\r\n        return x.windDirection100m.sg;\r\n      })\r\n\r\n      const dataset = {\r\n        label:  'At 100 meters height',\r\n        borderColor: '#ff764a',\r\n        pointBackgroundColor: '#ef5675',\r\n        pointBorderColor: 'transparent',\r\n        backgroundColor: 'transparent',\r\n        data: responseData.hours.map( (x,i) => {\r\n          return x.windSpeed100m.sg;\r\n        })\r\n      }\r\n      graphData.datasets.push(dataset)\r\n\r\n      const datetimes = []\r\n      responseData.hours.forEach((value) => {\r\n        datetimes.push(value.time);\r\n      })\r\n      setDatetimes(datetimes)\r\n\r\n    }\r\n\r\n    setLineChartOneData(graphData)\r\n\r\n    setLoading(false)\r\n\r\n    \r\n\r\n\r\n  }\r\n\r\n  const plugins = [{\r\n    afterDraw: (chart) => {\r\n      let ctx = chart.ctx;\r\n      var xAxis = chart.scales['x'];\r\n      var yAxis = chart.scales['y'];\r\n      xAxis.ticks.forEach((value, index) => {\r\n        \r\n        if (index%6==0) {\r\n          var x = xAxis.getPixelForTick(index);\r\n\r\n          // var deg = value.label;\r\n          // var newImageCanvas = document.createElement('canvas');\r\n          // newImageCanvas.width  = 22;\r\n          // newImageCanvas.height = 22;\r\n          // var newCtx = newImageCanvas.getContext('2d') ;\r\n          // newCtx.save();\r\n          // newCtx.translate(newImageCanvas.width/2,newImageCanvas.height/2);\r\n          // newCtx.rotate((deg+90)*0.01745);\r\n          // newCtx.translate(-newImageCanvas.width * 0.5, -newImageCanvas.height * 0.5);  \r\n          // newCtx.drawImage(arrowImage, 0,0);\r\n          // newCtx.restore();\r\n          // ctx.drawImage(newImageCanvas, x - 10, yAxis.bottom + 34, arrowImage.width, arrowImage.height)\r\n        \r\n          const datetime = moment(datetimes[index])\r\n          const month = datetime.month()+1 > 9 ? datetime.month()+1 : '0'+(datetime.month()+1)\r\n          const day = datetime.date() > 9 ? datetime.date() : '0'+datetime.date()\r\n          const hour = datetime.hour() > 9 ? datetime.hour() : '0'+(datetime.hour())\r\n          const minute = datetime.minutes() > 9 ? datetime.minutes() : '0'+datetime.minutes()\r\n          const date = month+\"-\"+day\r\n          const time = hour+\":\"+minute\r\n          ctx.font = \"11px Arial\";\r\n          ctx.fillText(time, x - 12, yAxis.bottom + 16);\r\n          ctx.fillText(date, x - 12, yAxis.bottom + 28);\r\n        }\r\n      });\r\n      ctx.font = \"12px Arial\";\r\n      // ctx.fillText(\"Direction\", 0, yAxis.bottom + 49);\r\n    }\r\n  }];\r\n\r\n  const options =  {\r\n    type: 'line',\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            bottom: 80,\r\n            left: 50,\r\n            right: 20\r\n        }\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n            display: false\r\n        }\r\n      },\r\n      y: {\r\n        min: 0,\r\n        beginAtZero: true\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(tooltipItem){\r\n            return '';\r\n          },\r\n          label: function(tooltipItem) {\r\n            const datetime = new Date((datetimes[tooltipItem.dataIndex] - 3*60*60) * 1000)\r\n            const month = datetime.getMonth()+1 > 9 ? datetime.getMonth()+1 : '0'+(datetime.getMonth()+1)\r\n            const day = datetime.getDate() > 9 ? datetime.getDate() : '0'+datetime.getDate()\r\n            const hour = datetime.getHours() > 9 ? datetime.getHours() : '0'+(datetime.getHours())\r\n            const minute = datetime.getMinutes() > 9 ? datetime.getMinutes() : '0'+datetime.getMinutes()\r\n            const date = month+'-'+day+' '+hour+':'+minute\r\n            return [\"Date: \"+date,\"Wind Speed: \"+round(tooltipItem.raw,1) + ' m/s',\"Wind Direction: \"+tooltipItem.label+'°']\r\n          }\r\n        }\r\n      },\r\n      // legend: {\r\n      //   display: false\r\n      // },\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateForecast\r\n"]},"metadata":{},"sourceType":"module"}