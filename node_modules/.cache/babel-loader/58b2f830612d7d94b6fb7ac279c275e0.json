{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\performance\\\\performance.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect } from '@coreui/react';\nimport { CMultiSelect } from '@coreui/react-pro';\nimport Multiselect from 'multiselect-react-dropdown';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\nimport { generatePath } from 'react-router-dom/cjs/react-router-dom.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x'); // var mixedChart = new Chart(ctx, {\n//     data: {\n//         datasets: [\n//         {\n//             type: 'line',\n//             label: 'Line Dataset',\n//             data: [50, 50, 50, 50],\n//         }],\n//         labels: ['January', 'February', 'March', 'April']\n//     },\n//     // options: options\n// });\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generator = _useState4[0],\n      setGenerator = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generatorsLoaded = _useState8[0],\n      setGeneratorsLoaded = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      generatorsSelected = _useState10[0],\n      setGeneratorsSelected = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedGenerators = _useState12[0],\n      setSelectedGenerators = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      park = _useState14[0],\n      setPark = _useState14[1];\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      date = _useState16[0],\n      setDate = _useState16[1];\n\n  var _useState17 = useState('12w'),\n      _useState18 = _slicedToArray(_useState17, 2),\n      dateRange = _useState18[0],\n      setDateRange = _useState18[1];\n\n  var _useState19 = useState('week'),\n      _useState20 = _slicedToArray(_useState19, 2),\n      groupBy = _useState20[0],\n      setGroupBy = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      data = _useState22[0],\n      setData = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      loading = _useState24[0],\n      setLoading = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      dataLoaded = _useState26[0],\n      setDataLoaded = _useState26[1];\n\n  var _useState27 = useState(null),\n      _useState28 = _slicedToArray(_useState27, 2),\n      generatorsButtons = _useState28[0],\n      setGeneratorsButtons = _useState28[1];\n\n  var colors = ['#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600', '#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600'];\n\n  var fetchData = function fetchData() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var generator = options.generator,\n        period = options.period,\n        groupBy = options.groupBy;\n    setLoading(true);\n    var body = {};\n    if (generator) body.generators = [generator];\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    DataAPI({\n      endpoint: 'chart/performanceIndex',\n      method: 'POST',\n      body: body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var data = {\n        labels: [],\n        datasets: [],\n        backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n      };\n      var dataset100 = {\n        labels: [''],\n        label: '',\n        backgroundColor: colors.pop(),\n        data: []\n      };\n      responseData.data.forEach(function (rDs) {\n        var dataset = {\n          labels: [],\n          label: rDs.name,\n          backgroundColor: colors.pop(),\n          data: [],\n          hidden: rDs.name != 'Total'\n        };\n        rDs.data.graph.forEach(function (rD) {\n          // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\n          var label = groupBy == \"day\" ? \"\".concat(formatDate(rD.from)) : \"\".concat(formatDate(rD.from), \" - \").concat(formatDate(rD.to));\n          dataset.labels.push(label);\n          dataset.data.push(rD.value);\n          dataset100.data.push(100);\n        });\n        dataset.labels.reverse();\n        dataset.data.reverse();\n        data.datasets.push(dataset); // data.datasets.push(dataset100);\n      });\n      responseData.data[0].data.graph.forEach(function (rD) {\n        var rDfrom = rD.from;\n        var rDto = rD.to;\n        var label = groupBy == \"day\" ? \"\".concat(formatDate(rD.from, 'noyear')) : \"\".concat(formatDate(rD.from, 'noyear'), \" - \").concat(formatDate(rD.to, 'noyear'));\n        data.labels.push(label);\n      });\n      data.labels.reverse();\n      setGraphData(data);\n      setDataLoaded(true);\n    }).catch(function (err) {\n      console.warn(\"ERROR! \".concat(err));\n      setLoading(false);\n    } // err => alert(`ERROR! ${err}`)\n    );\n  }; // useEffect(() => {\n  //   fetchData({period: period,  groupBy: groupBy});\n  // }, []);\n\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        // setGenerator(response.generators[0].id);\n        setGeneratorsLoaded(true);\n        setGenerators(response.generators);\n        fetchData({\n          period: dateRange,\n          groupBy: groupBy\n        });\n      }\n    });\n  };\n\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este aÃ±o'];\n\n  var change = function change(ev) {}; // const refreshChart = (period) => {\n  //   fetchData({generator: generator, period: dateRange,  groupBy: groupBy});\n  // }\n\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n\n  var selectGenerator = function selectGenerator(id) {\n    var newSelected = selectedGenerators;\n    newSelected = newSelected.includes(id) ? newSelected.filter(function (i) {\n      return i !== id;\n    }) // remove item\n    : [].concat(_toConsumableArray(newSelected), [id]); // add item\n\n    setSelectedGenerators(newSelected);\n    return selectedGenerators;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"traffic\",\n          className: \"card-title mb-0\",\n          children: \"Choose de generators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"9\",\n            children: generatorsLoaded && generators.map(function (gen, index) {\n              return /*#__PURE__*/_jsxDEV(CButton, {\n                style: {\n                  backgroundColor: colors[index],\n                  color: 'white'\n                },\n                className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\",\n                onClick: function onClick() {\n                  return selectGenerator(gen.id);\n                },\n                id: gen.id,\n                children: gen.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"3\",\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"primary\",\n              className: \"mx-2\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, _this), generatorsSelected && /*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"7\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              id: \"traffic\",\n              className: \"card-title mb-0\",\n              children: \"Performance Index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"small text-medium-emphasis\",\n              children: getDateLabel(dateRange)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"5\",\n            className: \"text-right d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4,\n                minWidth: '60px'\n              },\n              children: \"Group by\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n              value: groupBy,\n              style: {\n                maxWidth: '150px'\n              },\n              disabled: loading,\n              onChange: function onChange(ev) {\n                setGroupBy(ev.target.value);\n                fetchData({\n                  generator: generator,\n                  period: dateRange,\n                  groupBy: ev.target.value\n                });\n              },\n              custom: true,\n              name: \"period\",\n              id: \"period\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"day\",\n                children: \"Day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"week\",\n                selected: true,\n                children: \"Week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"month\",\n                children: \"Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4\n              },\n              children: \"Period\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n              value: dateRange,\n              options: ['cm', 'cy', '12w', '12m', 'x', 'xx'],\n              disabled: loading,\n              onChange: function onChange(value) {\n                setDateRange(value);\n                fetchData({\n                  generator: generator,\n                  period: value,\n                  groupBy: groupBy\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: graphData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"eukenEXzY1e8YYGdEndQQfUxubQ=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/performance/performance.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CMultiSelect","Multiselect","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Bar","Chart","Line","Scatter","generatePath","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","generator","setGenerator","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","generatorsSelected","setGeneratorsSelected","selectedGenerators","setSelectedGenerators","park","setPark","date","setDate","dateRange","setDateRange","groupBy","setGroupBy","data","setData","loading","setLoading","dataLoaded","setDataLoaded","generatorsButtons","setGeneratorsButtons","colors","fetchData","options","period","body","split","length","from","to","endpoint","method","then","responseData","error","message","alert","backgroundColor","dataset100","label","pop","forEach","rDs","dataset","name","hidden","graph","rD","push","value","reverse","rDfrom","rDto","catch","err","console","warn","loadGenerators","response","dataSets","parks","dates","change","ev","animation","duration","selectGenerator","id","newSelected","includes","filter","i","map","gen","index","color","lineHeight","minWidth","maxWidth","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect\r\n} from '@coreui/react'\r\nimport { CMultiSelect } from '@coreui/react-pro'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\n\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\nimport { generatePath } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\n// var mixedChart = new Chart(ctx, {\r\n//     data: {\r\n//         datasets: [\r\n//         {\r\n//             type: 'line',\r\n//             label: 'Line Dataset',\r\n//             data: [50, 50, 50, 50],\r\n//         }],\r\n//         labels: ['January', 'February', 'March', 'April']\r\n//     },\r\n//     // options: options\r\n// });\r\n\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [generatorsButtons, setGeneratorsButtons] = useState(null);\r\n  const colors = [\r\n    '#003f5c',\r\n    '#374c80',\r\n    '#7a5195',\r\n    '#bc5090',\r\n    '#ef5675',\r\n    '#ff764a',\r\n    '#ffa600',\r\n    '#003f5c',\r\n    '#374c80',\r\n    '#7a5195',\r\n    '#bc5090',\r\n    '#ef5675',\r\n    '#ff764a',\r\n    '#ffa600'\r\n  ];\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    const {generator, period, groupBy} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (generator) body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      endpoint: 'chart/performanceIndex',\r\n      method: 'POST',\r\n      body: body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData.error) {\r\n           if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n           } else {\r\n            return(alert(responseData.error)) \r\n           }\r\n        }\r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: [],\r\n          backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n        }\r\n\r\n        const dataset100 = {\r\n          labels: [''],\r\n          label: '',\r\n          backgroundColor: colors.pop(),\r\n          data: []\r\n        };\r\n\r\n        responseData.data.forEach((rDs) => {\r\n\r\n          const dataset = {\r\n            labels: [],\r\n            label: rDs.name,\r\n            backgroundColor: colors.pop(),\r\n            data: [],\r\n            hidden: rDs.name!='Total'\r\n          };\r\n\r\n          rDs.data.graph.forEach((rD) => {\r\n            // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n            const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\r\n            dataset.labels.push(label);\r\n            dataset.data.push(rD.value)\r\n\r\n            dataset100.data.push(100)\r\n\r\n          });\r\n\r\n          dataset.labels.reverse();\r\n          dataset.data.reverse();\r\n\r\n          data.datasets.push(dataset);\r\n          // data.datasets.push(dataset100);\r\n\r\n        });\r\n\r\n        responseData.data[0].data.graph.forEach((rD) => {\r\n          const rDfrom = rD.from;\r\n          const rDto = rD.to;\r\n          const label = (groupBy == \"day\") ? `${formatDate(rD.from, 'noyear')}` : `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\r\n          data.labels.push(label);\r\n\r\n        });\r\n\r\n        data.labels.reverse();\r\n\r\n        setGraphData(data);\r\n        setDataLoaded(true);\r\n\r\n      })\r\n      .catch(\r\n        err => {\r\n          console.warn(`ERROR! ${err}`)\r\n          setLoading(false);\r\n        }\r\n\r\n        // err => alert(`ERROR! ${err}`)\r\n      );\r\n\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   fetchData({period: period,  groupBy: groupBy});\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  const loadGenerators = () => {\r\n  \r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n  \r\n          // setGenerator(response.generators[0].id);\r\n          setGeneratorsLoaded(true);\r\n          setGenerators(response.generators);\r\n  \r\n          fetchData({period: dateRange, groupBy: groupBy});\r\n  \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n  ]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este aÃ±o'\r\n  ]\r\n\r\n\r\n  const change = (ev) => {\r\n  }\r\n\r\n  // const refreshChart = (period) => {\r\n  //   fetchData({generator: generator, period: dateRange,  groupBy: groupBy});\r\n  // }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n    return selectedGenerators;\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n        <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n          Choose de generators\r\n        </h4>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow>\r\n          <CCol sm=\"9\">\r\n          {generatorsLoaded && \r\n            generators.map((gen, index) => (  \r\n                <CButton \r\n                  style={{backgroundColor:colors[index],color: 'white'}} \r\n                  className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\"}\r\n                  onClick={() => selectGenerator(gen.id)} \r\n                  id={gen.id}\r\n                  >\r\n                    {gen.name}\r\n                </CButton>\r\n            ))\r\n          }\r\n          </CCol>\r\n          <CCol sm=\"3\" className=\"text-right\">\r\n            <CButton color=\"primary\" className=\"mx-2\">Submit</CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardBody>\r\n\r\n      </CCard>\r\n\r\n      { generatorsSelected &&\r\n\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Performance Index\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n              <CCol sm=\"5\" className=\"text-right d-flex\">\r\n              {/* <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4,minWidth:'64px'}}>Generator</h6> */}\r\n\r\n              {/* <Multiselect\r\n                options={state.options} // Options to display in the dropdown\r\n                selectedValues={state.selectedValue} // Preselected value to persist in dropdown\r\n                //onSelect={this.onSelect} // Function will trigger on select event\r\n                //onRemove={this.onRemove} // Function will trigger on remove event\r\n                displayValue=\"name\" // Property name to display in the dropdown options\r\n                /> */}\r\n\r\n                {/* <CSelect disabled={loading} style={{maxWidth:'150px'}} onChange={(ev) => {setGenerator(ev.target.value); fetchData({period: dateRange, groupBy: groupBy, generator: ev.target.value});}} custom name=\"generator\" id=\"generator\">\r\n                  <option value=\"0\">All generators</option>\r\n                  {generators.map((oGenerator) => (\r\n                      <option value={oGenerator.id}>\r\n                        {oGenerator.code}\r\n                      </option>\r\n                    ))}\r\n                </CSelect> */}\r\n                <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect value={groupBy} style={{maxWidth:'150px'}} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); fetchData({generator: generator, period: dateRange, groupBy: ev.target.value});}} custom name=\"period\" id=\"period\">\r\n                  <option value=\"day\">Day</option>\r\n                  <option value=\"week\" selected>Week</option>\r\n                  <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4}}>Period</h6>\r\n                <DateFilter value={dateRange} options={['cm','cy','12w','12m','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData({generator: generator, period: value, groupBy: groupBy});}} />\r\n              </CCol>\r\n\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n         \r\n          <Line data={graphData} options={options} />\r\n        </CCardBody>\r\n\r\n      </CCard>\r\n      }\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}