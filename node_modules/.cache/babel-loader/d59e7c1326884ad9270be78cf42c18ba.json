{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\overview\\\\overview.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { lazy, useEffect, useState } from 'react';\nimport { CDataTable, CBadge, CButton, CButtonGroup, CCard, CCardBody, CCardFooter, CCardHeader, CCol, CProgress, CRow, CCallout, CSpinner, CWidgetDropdown, CDropdown, CDropdownMenu, CDropdownItem, CDropdownToggle, CCardTitle, CCardText } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport MainChartExample from '../../charts/MainChartExample.js';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, round, getDateLabel, getCurrentDateNDaysBefore } from '../../../helpers/utils.js';\nimport { setCookie } from '../../../helpers/sessionCookie.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar WidgetsDropdown = /*#__PURE__*/lazy(_c = function _c() {\n  return import('./Widgets.js');\n});\n_c2 = WidgetsDropdown;\nvar WidgetsBrand = /*#__PURE__*/lazy(_c3 = function _c3() {\n  return import('../../widgets/WidgetsBrand.js');\n});\n_c4 = WidgetsBrand;\n\nvar Overview = function Overview() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fetchingData = _useState8[0],\n      setFetchingData = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setDate = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      generators = _useState12[0],\n      setGenerators = _useState12[1];\n\n  var _useState13 = useState('y'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dateRange = _useState14[0],\n      setDateRange = _useState14[1]; // const [dateRangeName, setDateRangeName] = useState('Ayer');\n\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      averageWindSpeed = _useState16[0],\n      setAverageWindSpeed = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      metMastWindSpeed = _useState18[0],\n      setMetMastWindSpeed = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      mWh = _useState20[0],\n      setMWh = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      estimatedCurtailment = _useState22[0],\n      setEstimatedCurtailment = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      availability = _useState24[0],\n      setAvailability = _useState24[1];\n\n  var _useState25 = useState(),\n      _useState26 = _slicedToArray(_useState25, 2),\n      loadFactor = _useState26[0],\n      setLoadFactor = _useState26[1];\n\n  var _useState27 = useState([]),\n      _useState28 = _slicedToArray(_useState27, 2),\n      alert1 = _useState28[0],\n      setAlert1 = _useState28[1];\n\n  var _useState29 = useState([]),\n      _useState30 = _slicedToArray(_useState29, 2),\n      alert2 = _useState30[0],\n      setAlert2 = _useState30[1];\n\n  var _useState31 = useState([]),\n      _useState32 = _slicedToArray(_useState31, 2),\n      alert3 = _useState32[0],\n      setAlert3 = _useState32[1];\n\n  var _useState33 = useState({\n    datasets: [],\n    labels: []\n  }),\n      _useState34 = _slicedToArray(_useState33, 2),\n      availabilityChartData = _useState34[0],\n      setAvailabilityChartData = _useState34[1];\n\n  var _useState35 = useState({\n    datasets: [],\n    labels: []\n  }),\n      _useState36 = _slicedToArray(_useState35, 2),\n      loadFactorChartData = _useState36[0],\n      setLoadFactorChartData = _useState36[1];\n\n  useEffect(function () {\n    loadGenerators();\n    refreshChart(dateRange);\n  }, []);\n  var fields = ['id', 'name', 'MWh generated for period', 'Capacity factor', 'Time based availability', 'Met mast wind speed', 'MWh from wind turbines'];\n\n  var getBadge = function getBadge(status) {\n    switch (status) {\n      case 'Active':\n        return 'success';\n\n      case 'Inactive':\n        return 'secondary';\n\n      case 'Pending':\n        return 'warning';\n\n      case 'Banned':\n        return 'danger';\n\n      default:\n        return 'primary';\n    }\n  };\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response && response.error) {\n        setCookie('lastTimeStamp', '');\n        setCookie('name', '');\n        window.location.reload();\n      } else if (!dataLoaded && response && !response.error) {\n        var gen = [];\n        response.generators.forEach(function (generator) {\n          gen.push(generator.id);\n        });\n        setGenerators(gen); // fetchAlerts();\n      }\n    });\n  };\n\n  var fetchData = function fetchData(dateRange) {\n    setLoading(true);\n    var body = {};\n\n    if (dateRange && dateRange.split('--').length == 2) {\n      body.from = dateRange.split('--')[0];\n      body.to = dateRange.split('--')[1];\n    } else {\n      body.period = dateRange;\n    }\n\n    DataAPI({\n      'endpoint': 'chart/overview',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      var chartData = response.data && response.data[0];\n\n      if (chartData) {\n        var _availability = Math.round(chartData.timeBasedAvailability * 10) / 10;\n\n        var _loadFactor = Math.round(chartData.capacityFactor * 10) / 10;\n\n        var _mWh = Math.round(chartData.mWhFromWindTurbines * 10) / 10;\n\n        var _estimatedCurtailment = Math.round(chartData.mWhEstimatedCurtailment * 10) / 10;\n\n        var loadFactorDataset = {\n          clip: true,\n          labels: ['Load Factor'],\n          datasets: [{\n            borderWidth: 0,\n            data: [_loadFactor, 100 - _loadFactor],\n            backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)']\n          }]\n        };\n        var availabilityDataset = {\n          clip: true,\n          labels: ['Availability'],\n          datasets: [{\n            borderWidth: 0,\n            data: [_availability, 100 - _availability],\n            backgroundColor: ['#0a58ca', '#052c65']\n          }]\n        };\n        setAverageWindSpeed(chartData.averageWindSpeed);\n        setMetMastWindSpeed(chartData.metMastWindSpeed);\n        setAvailability(\"\".concat(_availability, \"%\"));\n        setLoadFactor(\"\".concat(_loadFactor, \"%\"));\n        setAvailabilityChartData(availabilityDataset);\n        setLoadFactorChartData(loadFactorDataset);\n        setMWh(_mWh);\n        setEstimatedCurtailment(_estimatedCurtailment);\n      } // setDateRange(`${response.chart.from.replace(\" 00:00:00\", \"\")} - ${response.chart.to.replace(\" 00:00:00\", \"\")}`);\n\n    });\n  }; // const fetchAlerts = () => {\n  //     DataAPI({\n  //       'endpoint': 'chart/performanceIndex',\n  //       'method': 'POST',\n  //       'body': {period: \"cm\", groupBy:\"day\"}\n  //     }).then(\n  //       response => {\n  //         if (response.error) {\n  //            if (response.error.message) {\n  //             return(alert(response.error.message))\n  //            } else {\n  //             return(alert(response.error)) \n  //            }\n  //         }\n  //         let generatorsAlert1 = []\n  //         response.data.forEach((rDs) => {\n  //           if (rDs.name!='Total') {\n  //             if (rDs.data.performance.performanceIndex < 90) {\n  //               generatorsAlert1.push(rDs.name)\n  //             }\n  //           }\n  //         });\n  //         setAlert1(generatorsAlert1)\n  //       }\n  //     );\n  //     DataAPI({\n  //       'endpoint': 'chart/performanceIndex',\n  //       'method': 'POST',\n  //       'body': {from: getCurrentDateNDaysBefore(\"-\",2), to: getCurrentDateNDaysBefore(\"-\",1), groupBy:\"day\"}\n  //     }).then(\n  //       response => {\n  //         if (response.error) {\n  //            if (response.error.message) {\n  //             return(alert(response.error.message))\n  //            } else {\n  //             return(alert(response.error)) \n  //            }\n  //         }\n  //         let generatorsAlert2 = []\n  //         response.data.forEach((rDs) => {\n  //           if (rDs.name!='Total') {\n  //             const pIYesterday = rDs.data.graph[0].value\n  //             const pIBeforeYesterday = rDs.data.graph[1].value\n  //             if (pIBeforeYesterday - pIYesterday > 6) {\n  //               generatorsAlert2.push(rDs.name)\n  //             }\n  //           }\n  //         });\n  //         setAlert2(generatorsAlert2)\n  //       }\n  //     );\n  //     DataAPI({\n  //       'endpoint': 'chart/stopped',\n  //       'method': 'POST',\n  //       'body': {period:\"y\",generators:generators}\n  //     }).then(\n  //       response => {\n  //         if (response.error) {\n  //            if (response.error.message) {\n  //             return(alert(response.error.message))\n  //            } else {\n  //             return(alert(response.error)) \n  //            }\n  //         }\n  //         let generatorsAlert3 = []\n  //         response.data.forEach((rDs) => {\n  //           if (rDs.missingHours.split(\":\")[0] >= 10) {\n  //             generatorsAlert3.push(rDs.gen_code)\n  //           }\n  //         });\n  //         setAlert3(generatorsAlert3)   \n  //       }\n  //     );\n  // }\n\n\n  var refreshChart = function refreshChart(dateRange) {\n    fetchData(dateRange);\n  };\n\n  var filterData = function filterData(date) {\n    // setDateRangeName(getDateLabel(date));\n    setDateRange(date);\n    fetchData(date); // setDateRangeName(value); setDateRange(value); refreshChart();\n  };\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n  var bodyOpacity = 1; //loading?.5:1\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CCard, {\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"9\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"traffic\",\n              className: \"card-title mb-0\",\n              children: \"Overview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"small text-medium-emphasis\",\n              children: getDateLabel(dateRange)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"3\",\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxDEV(DateFilter, {\n              warning: \"Seleccionar un rango máximo de 31 días\",\n              options: ['y', 'cm', 'x', 'xx'],\n              disabled: loading,\n              onChange: function onChange(value) {\n                filterData(value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: bodyOpacity\n          },\n          children: [false && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              zIndex: 999,\n              position: 'absolute',\n              width: '100%',\n              height: '100%',\n              backgroundColor: 'rgba(255,255,255,.7)'\n            },\n            children: /*#__PURE__*/_jsxDEV(CSpinner, {\n              style: {\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 139\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 19\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"6\",\n              lg: \"4\",\n              children: /*#__PURE__*/_jsxDEV(CWidgetDropdown, {\n                color: \"gradient-warning\",\n                header: \"LOAD FACTOR (%)\",\n                text: loadFactor,\n                footerSlot: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"px-lg-5 pb-lg-3\",\n                  children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n                    data: loadFactorChartData,\n                    options: options\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 13\n                  }, _this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"pt-lg-3 d-inline-block w-100 text-center\",\n                    children: \"* Excludes Estimated Curtailment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 13\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 13\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 9\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 7\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"6\",\n              lg: \"4\",\n              children: /*#__PURE__*/_jsxDEV(CWidgetDropdown, {\n                color: \"gradient-info\",\n                header: \"AVAILABILITY (%)\",\n                text: availability,\n                footerSlot: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"px-lg-5 pb-lg-5\",\n                  children: /*#__PURE__*/_jsxDEV(Doughnut, {\n                    data: availabilityChartData,\n                    options: options\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 13\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 13\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 9\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 7\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"6\",\n              lg: \"4\",\n              children: /*#__PURE__*/_jsxDEV(CCard, {\n                color: \"success\",\n                textColor: \"white\",\n                children: /*#__PURE__*/_jsxDEV(CCardBody, {\n                  children: [/*#__PURE__*/_jsxDEV(CCardTitle, {\n                    children: \"PRODUCTION AND WIND\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 9\n                  }, _this), /*#__PURE__*/_jsxDEV(CCardText, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      class: \"h6\",\n                      children: [\"Production: \", round(mWh), \" MWh\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 11\n                    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      class: \"h6\",\n                      children: [\"Estimated Curtailment: \", round(estimatedCurtailment), \" MWh\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 11\n                    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      class: \"h6\",\n                      children: [\"Turbine average wind speed: \", round(averageWindSpeed), \" m/s\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 408,\n                      columnNumber: 11\n                    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      class: \"h6\",\n                      children: [\"Met mast average wind speed: \", round(metMastWindSpeed), \" m/s\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 409,\n                      columnNumber: 11\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 9\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 7\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 11\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 7\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 9\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(Overview, \"tC1DQY2Sxh57QysdQ1vb7N1TfMI=\");\n\n_c5 = Overview;\nexport default Overview;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"WidgetsDropdown$lazy\");\n$RefreshReg$(_c2, \"WidgetsDropdown\");\n$RefreshReg$(_c3, \"WidgetsBrand$lazy\");\n$RefreshReg$(_c4, \"WidgetsBrand\");\n$RefreshReg$(_c5, \"Overview\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/overview/overview.js"],"names":["React","lazy","useEffect","useState","CDataTable","CBadge","CButton","CButtonGroup","CCard","CCardBody","CCardFooter","CCardHeader","CCol","CProgress","CRow","CCallout","CSpinner","CWidgetDropdown","CDropdown","CDropdownMenu","CDropdownItem","CDropdownToggle","CCardTitle","CCardText","CIcon","MainChartExample","DataAPI","DateFilter","round","getDateLabel","getCurrentDateNDaysBefore","setCookie","Doughnut","WidgetsDropdown","WidgetsBrand","Overview","data","setData","loading","setLoading","dataLoaded","setDataLoaded","fetchingData","setFetchingData","date","setDate","generators","setGenerators","dateRange","setDateRange","averageWindSpeed","setAverageWindSpeed","metMastWindSpeed","setMetMastWindSpeed","mWh","setMWh","estimatedCurtailment","setEstimatedCurtailment","availability","setAvailability","loadFactor","setLoadFactor","alert1","setAlert1","alert2","setAlert2","alert3","setAlert3","datasets","labels","availabilityChartData","setAvailabilityChartData","loadFactorChartData","setLoadFactorChartData","loadGenerators","refreshChart","fields","getBadge","status","then","response","error","window","location","reload","gen","forEach","generator","push","id","fetchData","body","split","length","from","to","period","message","alert","chartData","Math","timeBasedAvailability","capacityFactor","mWhFromWindTurbines","mWhEstimatedCurtailment","loadFactorDataset","clip","borderWidth","backgroundColor","availabilityDataset","filterData","options","animation","duration","bodyOpacity","value","opacity","zIndex","position","width","height"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SACEC,UADF,EAEEC,MAFF,EAGEC,OAHF,EAIEC,YAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,WARF,EASEC,IATF,EAUEC,SAVF,EAWEC,IAXF,EAYEC,QAZF,EAaEC,QAbF,EAcEC,eAdF,EAeEC,SAfF,EAgBEC,aAhBF,EAiBEC,aAjBF,EAkBEC,eAlBF,EAmBEC,UAnBF,EAoBEC,SApBF,QAqBO,eArBP;AAuBA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAAQC,UAAR,EAAoBC,KAApB,EAA2BC,YAA3B,EAAyCC,yBAAzC,QAAyE,2BAAzE;AACA,SAAQC,SAAR,QAAwB,mCAAxB;AAEA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,IAAMC,eAAe,gBAAGhC,IAAI,MAAC;AAAA,SAAM,OAAO,cAAP,CAAN;AAAA,CAAD,CAA5B;MAAMgC,e;AACN,IAAMC,YAAY,gBAAGjC,IAAI,OAAC;AAAA,SAAM,OAAO,+BAAP,CAAN;AAAA,CAAD,CAAzB;MAAMiC,Y;;AAEN,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AAErB,kBAAwBhC,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOiC,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BlC,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOmC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAoCpC,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOqC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAwCtC,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOuC,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAwBxC,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOyC,IAAP;AAAA,MAAaC,OAAb;;AACA,oBAAoC1C,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO2C,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,oBAAkC5C,QAAQ,CAAC,GAAD,CAA1C;AAAA;AAAA,MAAO6C,SAAP;AAAA,MAAkBC,YAAlB,kBATqB,CAUrB;;;AAEA,oBAAgD9C,QAAQ,EAAxD;AAAA;AAAA,MAAO+C,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,oBAAgDhD,QAAQ,EAAxD;AAAA;AAAA,MAAOiD,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,oBAAsBlD,QAAQ,CAAC,EAAD,CAA9B;AAAA;AAAA,MAAOmD,GAAP;AAAA,MAAYC,MAAZ;;AACA,oBAAwDpD,QAAQ,CAAC,EAAD,CAAhE;AAAA;AAAA,MAAOqD,oBAAP;AAAA,MAA6BC,uBAA7B;;AAEA,oBAAwCtD,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAOuD,YAAP;AAAA,MAAqBC,eAArB;;AACA,oBAAoCxD,QAAQ,EAA5C;AAAA;AAAA,MAAOyD,UAAP;AAAA,MAAmBC,aAAnB;;AAGA,oBAA4B1D,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAO2D,MAAP;AAAA,MAAeC,SAAf;;AACA,oBAA4B5D,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAO6D,MAAP;AAAA,MAAeC,SAAf;;AACA,oBAA4B9D,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAO+D,MAAP;AAAA,MAAeC,SAAf;;AAEA,oBAA0DhE,QAAQ,CAChE;AACEiE,IAAAA,QAAQ,EAAE,EADZ;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADgE,CAAlE;AAAA;AAAA,MAAOC,qBAAP;AAAA,MAA8BC,wBAA9B;;AAMA,oBAAsDpE,QAAQ,CAC5D;AACEiE,IAAAA,QAAQ,EAAE,EADZ;AAEEC,IAAAA,MAAM,EAAE;AAFV,GAD4D,CAA9D;AAAA;AAAA,MAAOG,mBAAP;AAAA,MAA4BC,sBAA5B;;AAQAvE,EAAAA,SAAS,CAAC,YAAM;AACdwE,IAAAA,cAAc;AACdC,IAAAA,YAAY,CAAC3B,SAAD,CAAZ;AACD,GAHQ,EAGN,EAHM,CAAT;AAMA,MAAM4B,MAAM,GAAG,CACf,IADe,EAEf,MAFe,EAGf,0BAHe,EAIf,iBAJe,EAKf,yBALe,EAMf,qBANe,EAOf,wBAPe,CAAf;;AAUF,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM,EAAI;AACzB,YAAQA,MAAR;AACE,WAAK,QAAL;AAAe,eAAO,SAAP;;AACf,WAAK,UAAL;AAAiB,eAAO,WAAP;;AACjB,WAAK,SAAL;AAAgB,eAAO,SAAP;;AAChB,WAAK,QAAL;AAAe,eAAO,QAAP;;AACf;AAAS,eAAO,SAAP;AALX;AAOD,GARD;;AAUA,MAAMJ,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAE3BhD,IAAAA,OAAO,CAAC;AACN,kBAAY,yBADN;AAEN,gBAAU;AAFJ,KAAD,CAAP,CAGGqD,IAHH,CAIE,UAAAC,QAAQ,EAAI;AAEV,UAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAzB,EAAgC;AAC9BlD,QAAAA,SAAS,CAAC,eAAD,EAAkB,EAAlB,CAAT;AACAA,QAAAA,SAAS,CAAC,MAAD,EAAS,EAAT,CAAT;AACAmD,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAJD,MAKK,IAAI,CAAC5C,UAAD,IAAewC,QAAf,IAA4B,CAACA,QAAQ,CAACC,KAA1C,EAAiD;AACpD,YAAII,GAAG,GAAG,EAAV;AACAL,QAAAA,QAAQ,CAAClC,UAAT,CAAoBwC,OAApB,CACE,UAAAC,SAAS,EAAI;AACXF,UAAAA,GAAG,CAACG,IAAJ,CAASD,SAAS,CAACE,EAAnB;AACD,SAHH;AAIA1C,QAAAA,aAAa,CAACsC,GAAD,CAAb,CANoD,CAOpD;AACD;AACF,KApBH;AAwBD,GA1BD;;AA4BA,MAAMK,SAAS,GAAG,SAAZA,SAAY,CAAC1C,SAAD,EAAe;AAE/BT,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAMoD,IAAI,GAAG,EAAb;;AAEA,QAAI3C,SAAS,IAAIA,SAAS,CAAC4C,KAAV,CAAgB,IAAhB,EAAsBC,MAAtB,IAA8B,CAA/C,EAAkD;AAC9CF,MAAAA,IAAI,CAACG,IAAL,GAAY9C,SAAS,CAAC4C,KAAV,CAAgB,IAAhB,EAAsB,CAAtB,CAAZ;AACAD,MAAAA,IAAI,CAACI,EAAL,GAAU/C,SAAS,CAAC4C,KAAV,CAAgB,IAAhB,EAAsB,CAAtB,CAAV;AACD,KAHH,MAGS;AACLD,MAAAA,IAAI,CAACK,MAAL,GAAchD,SAAd;AACD;;AAEDtB,IAAAA,OAAO,CAAC;AACN,kBAAY,gBADN;AAEN,gBAAU,MAFJ;AAGN,cAAQiE;AAHF,KAAD,CAAP,CAIGZ,IAJH,CAKE,UAAAC,QAAQ,EAAI;AAGVzC,MAAAA,UAAU,CAAC,KAAD,CAAV;;AAIA,UAAIyC,QAAQ,CAACC,KAAb,EAAoB;AACjB,YAAID,QAAQ,CAACC,KAAT,CAAegB,OAAnB,EAA4B;AAC3B,iBAAOC,KAAK,CAAClB,QAAQ,CAACC,KAAT,CAAegB,OAAhB,CAAZ;AACA,SAFD,MAEO;AACN,iBAAOC,KAAK,CAAClB,QAAQ,CAACC,KAAV,CAAZ;AACA;AACH;;AAGD,UAAIkB,SAAS,GAAGnB,QAAQ,CAAC5C,IAAT,IAAiB4C,QAAQ,CAAC5C,IAAT,CAAc,CAAd,CAAjC;;AAEA,UAAI+D,SAAJ,EAAe;AAEb,YAAMzC,aAAY,GAAG0C,IAAI,CAACxE,KAAL,CAAWuE,SAAS,CAACE,qBAAV,GAAgC,EAA3C,IAA+C,EAApE;;AACA,YAAMzC,WAAU,GAAGwC,IAAI,CAACxE,KAAL,CAAWuE,SAAS,CAACG,cAAV,GAAyB,EAApC,IAAwC,EAA3D;;AACA,YAAMhD,IAAG,GAAG8C,IAAI,CAACxE,KAAL,CAAWuE,SAAS,CAACI,mBAAV,GAA8B,EAAzC,IAA6C,EAAzD;;AACA,YAAM/C,qBAAoB,GAAG4C,IAAI,CAACxE,KAAL,CAAWuE,SAAS,CAACK,uBAAV,GAAkC,EAA7C,IAAiD,EAA9E;;AAEA,YAAMC,iBAAiB,GAAG;AACxBC,UAAAA,IAAI,EAAC,IADmB;AAExBrC,UAAAA,MAAM,EAAE,CAAC,aAAD,CAFgB;AAGxBD,UAAAA,QAAQ,EAAE,CAAC;AACTuC,YAAAA,WAAW,EAAE,CADJ;AAETvE,YAAAA,IAAI,EAAE,CAACwB,WAAD,EAAY,MAAIA,WAAhB,CAFG;AAGTgD,YAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,gBAAZ;AAHR,WAAD;AAHc,SAA1B;AAWA,YAAMC,mBAAmB,GAAG;AAC1BH,UAAAA,IAAI,EAAC,IADqB;AAE1BrC,UAAAA,MAAM,EAAE,CAAC,cAAD,CAFkB;AAG1BD,UAAAA,QAAQ,EAAE,CAAC;AACTuC,YAAAA,WAAW,EAAE,CADJ;AAETvE,YAAAA,IAAI,EAAE,CAACsB,aAAD,EAAc,MAAIA,aAAlB,CAFG;AAGTkD,YAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHR,WAAD;AAHgB,SAA5B;AAUAzD,QAAAA,mBAAmB,CAACgD,SAAS,CAACjD,gBAAX,CAAnB;AACAG,QAAAA,mBAAmB,CAAC8C,SAAS,CAAC/C,gBAAX,CAAnB;AAEAO,QAAAA,eAAe,WAAID,aAAJ,OAAf;AACAG,QAAAA,aAAa,WAAID,WAAJ,OAAb;AAEAW,QAAAA,wBAAwB,CAACsC,mBAAD,CAAxB;AACApC,QAAAA,sBAAsB,CAACgC,iBAAD,CAAtB;AACAlD,QAAAA,MAAM,CAACD,IAAD,CAAN;AACAG,QAAAA,uBAAuB,CAACD,qBAAD,CAAvB;AAID,OA3DS,CA8DR;;AAEH,KArEH;AAyEH,GAtFD,CA7FuB,CAsLvB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;AAEE,MAAMmB,YAAY,GAAG,SAAfA,YAAe,CAAC3B,SAAD,EAAe;AAClC0C,IAAAA,SAAS,CAAC1C,SAAD,CAAT;AACD,GAFD;;AAIA,MAAM8D,UAAU,GAAG,SAAbA,UAAa,CAAClE,IAAD,EAAU;AAC3B;AACAK,IAAAA,YAAY,CAACL,IAAD,CAAZ;AACA8C,IAAAA,SAAS,CAAC9C,IAAD,CAAT,CAH2B,CAI3B;AACD,GALD;;AAOA,MAAMmE,OAAO,GAAG;AAACC,IAAAA,SAAS,EAAE;AAACC,MAAAA,QAAQ,EAAE3E,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAZ,GAAhB;AACA,MAAM4E,WAAW,GAAG,CAApB,CAzRqB,CAyRC;;AAEtB,sBACE;AAAA,2BAEE,QAAC,KAAD;AAAA,8BACE,QAAC,WAAD;AAAA,+BACE,QAAC,IAAD;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,GAAT;AAAA,oCACE;AAAI,cAAA,EAAE,EAAC,SAAP;AAAiB,cAAA,SAAS,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,wBAA6CrF,YAAY,CAACmB,SAAD;AAAzD;AAAA;AAAA;AAAA;AAAA,qBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAOE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,GAAT;AAAa,YAAA,SAAS,EAAC,YAAvB;AAAA,mCAEA,QAAC,UAAD;AAAY,cAAA,OAAO,EAAE,wCAArB;AAA+D,cAAA,OAAO,EAAE,CAAC,GAAD,EAAK,IAAL,EAAU,GAAV,EAAc,IAAd,CAAxE;AAA6F,cAAA,QAAQ,EAAEV,OAAvG;AAAgH,cAAA,QAAQ,EAAE,kBAAC6E,KAAD,EAAW;AAAEL,gBAAAA,UAAU,CAACK,KAAD,CAAV;AAAoB;AAA3J;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,mBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eADF,eAkBE,QAAC,SAAD;AAAA,+BAEA;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,OAAO,EAACF;AAAT,WAAZ;AAAA,qBAEC,sBAAS;AAAK,YAAA,KAAK,EAAE;AAACG,cAAAA,MAAM,EAAE,GAAT;AAAcC,cAAAA,QAAQ,EAAE,UAAxB;AAAoCC,cAAAA,KAAK,EAAE,MAA3C;AAAmDC,cAAAA,MAAM,EAAE,MAA3D;AAAmEZ,cAAAA,eAAe,EAAC;AAAnF,aAAZ;AAAA,mCAAwH,QAAC,QAAD;AAAU,cAAA,KAAK,EAAE;AAACU,gBAAAA,QAAQ,EAAE;AAAX;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAxH;AAAA;AAAA;AAAA;AAAA,mBAFV,eAMA,QAAC,IAAD;AAAA,oCAGF,QAAC,IAAD;AAAM,cAAA,EAAE,EAAC,GAAT;AAAa,cAAA,EAAE,EAAC,GAAhB;AAAA,qCACE,QAAC,eAAD;AACE,gBAAA,KAAK,EAAC,kBADR;AAEE,gBAAA,MAAM,EAAC,iBAFT;AAGE,gBAAA,IAAI,EAAE1D,UAHR;AAIE,gBAAA,UAAU,eACR;AAAK,kBAAA,SAAS,EAAC,iBAAf;AAAA,0CACA,QAAC,QAAD;AACG,oBAAA,IAAI,EAAEY,mBADT;AAEG,oBAAA,OAAO,EAAEuC;AAFZ;AAAA;AAAA;AAAA;AAAA,2BADA,eAKA;AAAO,oBAAA,SAAS,EAAC,0CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BALA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBAHE,eAsBF,QAAC,IAAD;AAAM,cAAA,EAAE,EAAC,GAAT;AAAa,cAAA,EAAE,EAAC,GAAhB;AAAA,qCACE,QAAC,eAAD;AACE,gBAAA,KAAK,EAAC,eADR;AAEE,gBAAA,MAAM,EAAC,kBAFT;AAGE,gBAAA,IAAI,EAAErD,YAHR;AAIE,gBAAA,UAAU,eACR;AAAK,kBAAA,SAAS,EAAC,iBAAf;AAAA,yCACA,QAAC,QAAD;AACG,oBAAA,IAAI,EAAEY,qBADT;AAEG,oBAAA,OAAO,EAAEyC;AAFZ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBAtBE,eA2CF,QAAC,IAAD;AAAM,cAAA,EAAE,EAAC,GAAT;AAAa,cAAA,EAAE,EAAC,GAAhB;AAAA,qCAGI,QAAC,KAAD;AACJ,gBAAA,KAAK,EAAE,SADH;AAEJ,gBAAA,SAAS,EAAE,OAFP;AAAA,uCAMJ,QAAC,SAAD;AAAA,0CACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE,QAAC,SAAD;AAAA,4CACE;AAAG,sBAAA,KAAK,EAAC,IAAT;AAAA,iDAA2BnF,KAAK,CAAC0B,GAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE;AAAG,sBAAA,KAAK,EAAC,IAAT;AAAA,4DAAsC1B,KAAK,CAAC4B,oBAAD,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFF,eAGE;AAAG,sBAAA,KAAK,EAAC,IAAT;AAAA,iEAA2C5B,KAAK,CAACsB,gBAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHF,eAIE;AAAG,sBAAA,KAAK,EAAC,IAAT;AAAA,kEAA4CtB,KAAK,CAACwB,gBAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,6BAJF;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AANI;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,qBA3CE;AAAA;AAAA;AAAA;AAAA;AAAA,mBANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,eAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AA4HD,CAvZD;;GAAMjB,Q;;MAAAA,Q;AAyZN,eAAeA,QAAf","sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\r\n\r\nimport {\r\n  CDataTable,\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout,\r\n  CSpinner,\r\n  CWidgetDropdown,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CCardTitle,\r\n  CCardText\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport MainChartExample from '../../charts/MainChartExample.js'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, round, getDateLabel, getCurrentDateNDaysBefore} from '../../../helpers/utils.js'\r\nimport {setCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst WidgetsDropdown = lazy(() => import('./Widgets.js'))\r\nconst WidgetsBrand = lazy(() => import('../../widgets/WidgetsBrand.js'))\r\n\r\nconst Overview = () => {\r\n\r\n  const [data, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [fetchingData, setFetchingData] = useState(false);\r\n  const [date, setDate] = useState('');\r\n  const [generators, setGenerators] = useState([]);\r\n  \r\n  const [dateRange, setDateRange] = useState('y');\r\n  // const [dateRangeName, setDateRangeName] = useState('Ayer');\r\n\r\n  const [averageWindSpeed, setAverageWindSpeed] = useState();\r\n  const [metMastWindSpeed, setMetMastWindSpeed] = useState();\r\n  const [mWh, setMWh] = useState([]);\r\n  const [estimatedCurtailment, setEstimatedCurtailment] = useState([]);\r\n\r\n  const [availability, setAvailability] = useState('');\r\n  const [loadFactor, setLoadFactor] = useState();\r\n  \r\n\r\n  const [alert1, setAlert1] = useState([]);\r\n  const [alert2, setAlert2] = useState([]);\r\n  const [alert3, setAlert3] = useState([]);\r\n\r\n  const [availabilityChartData, setAvailabilityChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n  const [loadFactorChartData, setLoadFactorChartData] = useState(\r\n    {\r\n      datasets: [],\r\n      labels: []\r\n    }\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    refreshChart(dateRange);\r\n  }, []);\r\n\r\n\r\n  const fields = [\r\n  'id',\r\n  'name',\r\n  'MWh generated for period',\r\n  'Capacity factor',\r\n  'Time based availability',\r\n  'Met mast wind speed',\r\n  'MWh from wind turbines'\r\n];\r\n\r\nconst getBadge = status => {\r\n  switch (status) {\r\n    case 'Active': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'Pending': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\nconst loadGenerators = () => {\r\n\r\n  DataAPI({\r\n    'endpoint': 'admin/locations/current',\r\n    'method': 'GET'\r\n  }).then(\r\n    response => {\r\n      \r\n      if (response && response.error) {\r\n        setCookie('lastTimeStamp', '');\r\n        setCookie('name', '');\r\n        window.location.reload();\r\n      }\r\n      else if (!dataLoaded && response  && !response.error) {\r\n        let gen = [];\r\n        response.generators.forEach(\r\n          generator => { \r\n            gen.push(generator.id)\r\n          })\r\n        setGenerators(gen);\r\n        // fetchAlerts();\r\n      }\r\n    }\r\n  );\r\n\r\n\r\n}\r\n\r\nconst fetchData = (dateRange) => {\r\n\r\n  setLoading(true);\r\n  \r\n  const body = {}\r\n\r\n  if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/overview',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n\r\n\r\n        if (response.error) {\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n\r\n\r\n        let chartData = response.data && response.data[0];\r\n\r\n        if (chartData) {\r\n\r\n          const availability = Math.round(chartData.timeBasedAvailability*10)/10;\r\n          const loadFactor = Math.round(chartData.capacityFactor*10)/10;\r\n          const mWh = Math.round(chartData.mWhFromWindTurbines*10)/10;\r\n          const estimatedCurtailment = Math.round(chartData.mWhEstimatedCurtailment*10)/10;\r\n\r\n          const loadFactorDataset = {\r\n            clip:true,\r\n            labels: ['Load Factor'],\r\n            datasets: [{\r\n              borderWidth: 0,\r\n              data: [loadFactor,100-loadFactor],\r\n              backgroundColor: ['#ca6510', 'rgba(0,0,0,.7)']\r\n            }\r\n          ]}\r\n\r\n\r\n          const availabilityDataset = {\r\n            clip:true,\r\n            labels: ['Availability'],\r\n            datasets: [{\r\n              borderWidth: 0,\r\n              data: [availability,100-availability],\r\n              backgroundColor: ['#0a58ca', '#052c65']\r\n            }\r\n          ]}\r\n\r\n          setAverageWindSpeed(chartData.averageWindSpeed);\r\n          setMetMastWindSpeed(chartData.metMastWindSpeed);\r\n\r\n          setAvailability(`${availability}%`)\r\n          setLoadFactor(`${loadFactor}%`)\r\n          \r\n          setAvailabilityChartData(availabilityDataset)\r\n          setLoadFactorChartData(loadFactorDataset)\r\n          setMWh(mWh)\r\n          setEstimatedCurtailment(estimatedCurtailment)\r\n\r\n          \r\n          \r\n        }\r\n\r\n\r\n          // setDateRange(`${response.chart.from.replace(\" 00:00:00\", \"\")} - ${response.chart.to.replace(\" 00:00:00\", \"\")}`);\r\n\r\n      }\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\n// const fetchAlerts = () => {\r\n  \r\n//     DataAPI({\r\n//       'endpoint': 'chart/performanceIndex',\r\n//       'method': 'POST',\r\n//       'body': {period: \"cm\", groupBy:\"day\"}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n\r\n//         let generatorsAlert1 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.name!='Total') {\r\n//             if (rDs.data.performance.performanceIndex < 90) {\r\n//               generatorsAlert1.push(rDs.name)\r\n//             }\r\n//           }\r\n//         });\r\n//         setAlert1(generatorsAlert1)\r\n//       }\r\n//     );\r\n\r\n//     DataAPI({\r\n//       'endpoint': 'chart/performanceIndex',\r\n//       'method': 'POST',\r\n//       'body': {from: getCurrentDateNDaysBefore(\"-\",2), to: getCurrentDateNDaysBefore(\"-\",1), groupBy:\"day\"}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n\r\n//         let generatorsAlert2 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.name!='Total') {\r\n//             const pIYesterday = rDs.data.graph[0].value\r\n//             const pIBeforeYesterday = rDs.data.graph[1].value\r\n//             if (pIBeforeYesterday - pIYesterday > 6) {\r\n//               generatorsAlert2.push(rDs.name)\r\n//             }\r\n//           }\r\n//         });\r\n//         setAlert2(generatorsAlert2)\r\n//       }\r\n//     );\r\n\r\n\r\n//     DataAPI({\r\n//       'endpoint': 'chart/stopped',\r\n//       'method': 'POST',\r\n//       'body': {period:\"y\",generators:generators}\r\n//     }).then(\r\n//       response => {\r\n\r\n//         if (response.error) {\r\n//            if (response.error.message) {\r\n//             return(alert(response.error.message))\r\n//            } else {\r\n//             return(alert(response.error)) \r\n//            }\r\n//         }\r\n//         let generatorsAlert3 = []\r\n//         response.data.forEach((rDs) => {\r\n//           if (rDs.missingHours.split(\":\")[0] >= 10) {\r\n//             generatorsAlert3.push(rDs.gen_code)\r\n//           }\r\n//         });\r\n//         setAlert3(generatorsAlert3)   \r\n        \r\n//       }\r\n//     );\r\n\r\n\r\n// }\r\n\r\n  const refreshChart = (dateRange) => {\r\n    fetchData(dateRange);\r\n  }\r\n\r\n  const filterData = (date) => {\r\n    // setDateRangeName(getDateLabel(date));\r\n    setDateRange(date);\r\n    fetchData(date);\r\n    // setDateRangeName(value); setDateRange(value); refreshChart();\r\n  }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n  const bodyOpacity = 1;//loading?.5:1\r\n\r\n  return (\r\n    <>\r\n      \r\n      <CCard>\r\n        <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Overview\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n            <CCol sm=\"3\" className=\"text-right\">\r\n\r\n            <DateFilter warning={\"Seleccionar un rango máximo de 31 días\"} options={['y','cm','x','xx']} disabled={loading} onChange={(value) => { filterData(value); }} />\r\n\r\n                            </CCol>\r\n                            </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        <CCardBody>\r\n\r\n        <div style={{opacity:bodyOpacity}}>\r\n\r\n        {false && <div style={{zIndex: 999, position: 'absolute', width: '100%', height: '100%', backgroundColor:'rgba(255,255,255,.7)'}}><CSpinner style={{position: 'absolute'}} /></div>}\r\n        \r\n\r\n\r\n        <CRow>\r\n      \r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"LOAD FACTOR (%)\"\r\n          text={loadFactor}\r\n          footerSlot={\r\n            <div className=\"px-lg-5 pb-lg-3\">\r\n            <Doughnut\r\n               data={loadFactorChartData}\r\n               options={options}\r\n            />\r\n            <small className='pt-lg-3 d-inline-block w-100 text-center'>* Excludes Estimated Curtailment</small>\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-info\"\r\n          header=\"AVAILABILITY (%)\"\r\n          text={availability}\r\n          footerSlot={\r\n            <div className=\"px-lg-5 pb-lg-5\">\r\n            <Doughnut\r\n               data={availabilityChartData}\r\n               options={options}\r\n            />\r\n            </div>\r\n          }\r\n        >\r\n          \r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n\r\n\r\n\r\n      <CCol sm=\"6\" lg=\"4\">\r\n          \r\n\r\n          <CCard\r\n      color={\"success\"}\r\n      textColor={\"white\"}\r\n\r\n    >\r\n\r\n      <CCardBody>\r\n        <CCardTitle>PRODUCTION AND WIND</CCardTitle>\r\n        <CCardText>\r\n          <p class=\"h6\">Production: {round(mWh)} MWh</p>\r\n          <p class=\"h6\">Estimated Curtailment: {round(estimatedCurtailment)} MWh</p>\r\n          <p class=\"h6\">Turbine average wind speed: {round(averageWindSpeed)} m/s</p>\r\n          <p class=\"h6\">Met mast average wind speed: {round(metMastWindSpeed)} m/s</p>\r\n        </CCardText>\r\n      </CCardBody>\r\n    </CCard>\r\n\r\n\r\n    {/* <CCard\r\n      color={\"danger\"}\r\n      textColor={\"white\"}\r\n    >\r\n\r\n      <CCardBody>\r\n        <CCardTitle>ALERTS</CCardTitle>\r\n        <CCardText>\r\n          <p class=\"\">Wind turbines with performance &lt; 90% (current month): \r\n            <h5>{alert1.length > 0 ? alert1.join(' - ') : \" - \"}</h5>\r\n          </p>\r\n          <p class=\"\">Wind turbines with negative change exceeding -6% in performance (yesterday): \r\n            <h5>{alert2.length > 0 ? alert2.join(' - ') : \" - \"}</h5>\r\n          </p>\r\n          <p class=\"\">Wind turbines with long stops (yesterday): \r\n            <h5>{alert3.length > 0 ? alert3.join(' - ') : \" - \"}</h5>\r\n          </p>\r\n        </CCardText>\r\n      </CCardBody>\r\n    </CCard> */}\r\n\r\n\r\n      </CCol>\r\n    </CRow></div>\r\n        \r\n        </CCardBody>\r\n\r\n        </CCard>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n"]},"metadata":{},"sourceType":"module"}