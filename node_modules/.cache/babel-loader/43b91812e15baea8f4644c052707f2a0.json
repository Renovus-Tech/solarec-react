{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\summary.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol } from '@coreui/react';\nimport { CChartLine, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar ClimateSummary = function ClimateSummary() {\n  _s();\n\n  var _useState = useState('y'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('day'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generator = _useState8[0],\n      setGenerator = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      lineChartOneData = _useState12[0],\n      setLineChartOneData = _useState12[1];\n\n  var _useState13 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      lineChartTwoData = _useState14[0],\n      setLineChartTwoData = _useState14[1];\n\n  var _useState15 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState16 = _slicedToArray(_useState15, 2),\n      polarChartData = _useState16[0],\n      setPolarChartData = _useState16[1];\n\n  useEffect(function () {\n    getChartData(dateRange);\n  }, []);\n  var colorCounter = 0;\n  var colors = ['blue', 'lightblue', 'turquoise', 'yellow', 'orange', 'red'];\n  var windRoseLabels = ['0-3', '3-6', '6-9', '9-12', '12-15', '15*'];\n\n  var windRoseColor = function windRoseColor(value) {\n    var n = 0;\n\n    if (value < 3) {\n      n = 0;\n    } else if (value < 6) {\n      n = 1;\n    } else if (value < 9) {\n      n = 2;\n    } else if (value < 12) {\n      n = 3;\n    } else if (value < 15) {\n      n = 4;\n    } else {\n      n = 5;\n    }\n\n    console.log('windRoseColor', value, n);\n    var x = colors;\n    return x[n];\n  };\n\n  var windRoseRange = function windRoseRange(value) {\n    var n = 0;\n\n    if (value < 3) {\n      n = 0;\n    } else if (value < 6) {\n      n = 1;\n    } else if (value < 9) {\n      n = 2;\n    } else if (value < 12) {\n      n = 3;\n    } else if (value < 15) {\n      n = 4;\n    } else {\n      n = 5;\n    }\n\n    return n;\n  };\n\n  var getChartData = function getChartData(period) {\n    setLoading(true);\n    var body = {};\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    DataAPI({\n      'endpoint': 'chart/climate',\n      'method': 'POST',\n      'body': body\n    }).then(function (responseData) {\n      if (responseData.error && responseData.error.message) alert(responseData.error.message);\n      setLoading(false);\n      var labels = Utils.months({\n        count: 7\n      });\n      var data = {\n        labels: labels,\n        datasets: [{\n          label: 'Met Mast Average',\n          data: Utils.numbers(NUMBER_CFG),\n          borderColor: Utils.CHART_COLORS.red,\n          backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5)\n        }, {\n          label: 'Turbine Average',\n          data: Utils.numbers(NUMBER_CFG),\n          borderColor: Utils.CHART_COLORS.blue,\n          backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5)\n        }]\n      };\n\n      if (responseData && responseData.graphs) {\n        responseData.graphs.find(function (item) {\n          switch (item.type) {\n            case 'WindSpeed':\n              item.data.forEach(function (rDs) {\n                var windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\n                windSpeedDataSets.data.push(windSpeed);\n                var date = rDs.datetimeFrom.split(' ')[0];\n                var time = rDs.datetimeFrom.split(' ')[1];\n                var timeArr = time.split(':');\n                var rDfrom = \"\".concat(date, \" - \").concat(timeArr[0], \":\").concat(timeArr[1]);\n                var rDto = rDs.datetimeTo;\n                windSpeedData.labels.push(rDfrom);\n              });\n              console.log('responseData.graphs', responseData.graphs);\n              windSpeedData.datasets.push(windSpeedDataSets);\n              console.log('windSpeedData', windSpeedData);\n              setLineChartOneData(windSpeedData);\n              break;\n\n            case 'Temperature':\n              item.data.forEach(function (rDs) {\n                temperatureDataSets.data.push(round(rDs.temperature));\n                var rDfrom = rDs.datetimeFrom;\n                var rDto = rDs.datetimeTo;\n                temperatureData.labels.push(formatDate2(rDfrom, 'time'));\n              });\n              temperatureData.datasets.push(temperatureDataSets);\n              setLineChartTwoData(temperatureData);\n              break;\n\n            case 'WindRose':\n              item.data.forEach(function (rDs) {\n                var windRoseDataSets = {};\n                var diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\n                var color = windRoseColor(rDs);\n                windRoseDataSets.data = rDs.radiuses;\n                windRoseDataSets.backgroundColor = [];\n                rDs.radiuses.forEach(function (radius) {\n                  return windRoseDataSets.backgroundColor.push(windRoseColor(radius));\n                });\n\n                if (diff > 0) {\n                  for (var i = 0; i <= diff; i++) {\n                    windRoseDataSets.data.push(0);\n                  }\n                }\n\n                windRoseDataSets.pointBackgroundColor = color; // windRoseDataSets.pointBorderColor = \"white\",\n\n                windRoseDataSets.pointHoverBackgroundColor = color;\n                windRoseDataSets.pointHoverBorderColor = color;\n                windRoseData.datasets.push(windRoseDataSets); // console.log('windRoseRange',rDfrom,rDs.angle.from)\n              });\n              windRoseData.datasets.backgroundColor = ['red', 'blue'];\n              setPolarChartData(windRoseData);\n              break;\n          }\n        });\n      }\n    });\n  }; // const getChartData = (period) => {\n  //   setLoading(true);\n  //   const body = {}\n  //   if (period && period.split('--').length==2) {\n  //     body.from = period.split('--')[0]\n  //     body.to = period.split('--')[1]\n  //   } else {\n  //     body.period = period\n  //   }\n  //   DataAPI(\n  //     {\n  //     'endpoint': 'chart/climate',\n  //     'method': 'POST',\n  //     'body': body\n  //   })\n  //     .then(function (responseData) {\n  //       if (responseData.error && responseData.error.message) alert(responseData.error.message)\n  //       setLoading(false);\n  //       var windSpeedData = {\n  //         labels: [],\n  //         datasets: []\n  //       }\n  //       var temperatureData = {\n  //         labels: [],\n  //         datasets: []\n  //       }\n  //       var windRoseData = {\n  //         labels: [],\n  //         datasets: []\n  //       }\n  //       var windSpeedDataSets = {\n  //         label: 'WindSpeed',\n  //         borderColor: '#f87979',\n  //         pointBackgroundColor: 'transparent',\n  //         pointBorderColor: 'transparent',\n  //         backgroundColor: 'transparent',\n  //         data: []\n  //       };\n  //       var temperatureDataSets = {\n  //         label: 'Temperature',\n  //         borderColor: '#00D8FF',\n  //         pointBackgroundColor: 'transparent',\n  //         pointBorderColor: 'transparent',\n  //         backgroundColor: 'transparent',\n  //         data: []\n  //       };\n  //       if (responseData && responseData.graphs){\n  //       responseData.graphs.find((item) => {\n  //         switch (item.type) {\n  //           case 'WindSpeed':\n  //             item.data.forEach((rDs) => {\n  //               const windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\n  //               windSpeedDataSets.data.push(windSpeed);\n  //               let date = rDs.datetimeFrom.split(' ')[0];\n  //               let time = rDs.datetimeFrom.split(' ')[1];\n  //               let timeArr = time.split(':')\n  //               const rDfrom = `${date} - ${timeArr[0]}:${timeArr[1]}`;\n  //               const rDto = rDs.datetimeTo;\n  //               windSpeedData.labels.push(rDfrom);\n  //             });\n  //             console.log('responseData.graphs', responseData.graphs);\n  //             windSpeedData.datasets.push(windSpeedDataSets);\n  //             console.log('windSpeedData', windSpeedData);\n  //             setLineChartOneData(windSpeedData)\n  //             break;\n  //           case 'Temperature':\n  //             item.data.forEach((rDs) => {\n  //               temperatureDataSets.data.push(round(rDs.temperature))\n  //               const rDfrom = rDs.datetimeFrom;\n  //               const rDto = rDs.datetimeTo;\n  //               temperatureData.labels.push(formatDate2(rDfrom, 'time'));\n  //             });\n  //             temperatureData.datasets.push(temperatureDataSets);\n  //             setLineChartTwoData(temperatureData)\n  //             break;\n  //           case 'WindRose':\n  //             item.data.forEach((rDs) => {\n  //               let windRoseDataSets = {}\n  //               const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\n  //               const color = windRoseColor(rDs);\n  //               windRoseDataSets.data = rDs.radiuses;\n  //               windRoseDataSets.backgroundColor=[];\n  //               rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\n  //               if (diff > 0) {\n  //                 for (let i = 0; i <= diff; i++) {\n  //                   windRoseDataSets.data.push(0);\n  //                 }\n  //               }\n  //               windRoseDataSets.pointBackgroundColor = color;\n  //               // windRoseDataSets.pointBorderColor = \"white\",\n  //               windRoseDataSets.pointHoverBackgroundColor = color;\n  //               windRoseDataSets.pointHoverBorderColor = color;\n  //               windRoseData.datasets.push(windRoseDataSets);\n  //               // console.log('windRoseRange',rDfrom,rDs.angle.from)\n  //             });\n  //             windRoseData.datasets.backgroundColor = ['red','blue'];\n  //             setPolarChartData(windRoseData)\n  //             break;\n  //         }\n  //       });\n  //     }\n  //     });\n  // }\n\n\n  var windRoseLabelsMap = windRoseLabels.map(function (v, m) {\n    var color = colors[m];\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginRight: '20px'\n      },\n      children: [v, /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          backgroundColor: color,\n          width: '30px',\n          height: '10px',\n          display: 'inline-block',\n          'marginLeft': '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 52\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 14\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Alarms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"7\",\n          className: \"text-right d-flex flex-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-4 m-0\",\n            style: {\n              lineHeight: 2.4,\n              minWidth: '60px'\n            },\n            children: \"Group by\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            value: groupBy,\n            disabled: loading,\n            onChange: function onChange(ev) {\n              setGroupBy(ev.target.value);\n            },\n            custom: true,\n            name: \"period\",\n            id: \"period\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"day\",\n              children: \"Day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"week\",\n              children: \"Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"month\",\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-4 m-0\",\n            style: {\n              lineHeight: 2.4\n            },\n            children: \"Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['y', 'cm', 'cy', 'x', 'xx'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            disabled: loading,\n            className: \"mr-2 ml-3\",\n            onClick: function onClick() {\n              fetchData({\n                period: dateRange,\n                groupBy: groupBy\n              });\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"m/s\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n            datasets: lineChartOneData.datasets,\n            labels: lineChartOneData.labels,\n            options: {\n              tooltips: {\n                enabled: true\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: false && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Wind Rose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 23\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                maxWidth: '600px',\n                margin: 'auto'\n              },\n              children: windRoseLabelsMap\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(CChartPolarArea, {\n              datasets: polarChartData.datasets,\n              labels: polarChartData.labels,\n              options: {\n                tooltips: {\n                  enabled: true\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 11\n            }, _this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\xB0C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n            datasets: lineChartTwoData.datasets,\n            labels: lineChartTwoData.labels,\n            options: {\n              tooltips: {\n                enabled: true\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateSummary, \"ZperqIFCGuruxabYoTqwxqoF+Ak=\");\n\n_c = ClimateSummary;\nexport default ClimateSummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateSummary\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/summary.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CChartLine","CChartPolarArea","DocsLink","ClimateSummary","dateRange","setDateRange","groupBy","setGroupBy","generators","setGenerators","generator","setGenerator","loading","setLoading","labels","datasets","lineChartOneData","setLineChartOneData","lineChartTwoData","setLineChartTwoData","polarChartData","setPolarChartData","getChartData","colorCounter","colors","windRoseLabels","windRoseColor","value","n","console","log","x","windRoseRange","period","body","split","length","from","to","then","responseData","error","message","alert","Utils","months","count","data","label","numbers","NUMBER_CFG","borderColor","CHART_COLORS","red","backgroundColor","transparentize","blue","graphs","find","item","type","forEach","rDs","windSpeed","Math","toFixed","windSpeedDataSets","push","date","datetimeFrom","time","timeArr","rDfrom","rDto","datetimeTo","windSpeedData","temperatureDataSets","temperature","temperatureData","windRoseDataSets","diff","parseInt","radiuses","color","radius","i","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","windRoseData","windRoseLabelsMap","map","v","m","marginRight","width","height","display","lineHeight","minWidth","ev","target","fetchData","tooltips","enabled","maxWidth","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateSummary = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [polarChartData, setPolarChartData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\nuseEffect(() => {\r\n  getChartData(dateRange);\r\n}, []);\r\n  \r\n  \r\n  var colorCounter=0;\r\n\r\n  const colors = [\r\n            'blue','lightblue','turquoise', 'yellow', 'orange', 'red', \r\n          ];\r\n\r\n  const windRoseLabels = [\r\n            '0-3','3-6','6-9', '9-12', '12-15', '15*', \r\n          ];\r\n\r\n  const windRoseColor = (value) => {\r\n\r\n\r\n\r\n    let n=0;\r\n\r\n    if (value < 3) {\r\n      n=0;\r\n    } else if (value < 6){\r\n      n=1;\r\n    } else if (value < 9){\r\n      n=2;\r\n    } else if (value < 12){\r\n      n=3;\r\n    } else if (value < 15){\r\n      n=4;\r\n    } else {\r\n      n=5;\r\n\r\n    }\r\n\r\n    console.log('windRoseColor', value, n)\r\n\r\n    const x = colors;\r\n\r\n    return x[n];\r\n  }\r\n\r\n\r\n  const windRoseRange = (value) => {\r\n\r\n    let n=0;\r\n\r\n    if (value < 3) {\r\n      n=0;\r\n    } else if (value < 6){\r\n      n=1;\r\n    } else if (value < 9){\r\n      n=2;\r\n    } else if (value < 12){\r\n      n=3;\r\n    } else if (value < 15){\r\n      n=4;\r\n    } else {\r\n      n=5;\r\n\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  const getChartData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) alert(responseData.error.message)\r\n\r\n        setLoading(false);\r\n\r\n\r\n\r\n        const labels = Utils.months({count: 7});\r\n        const data = {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Met Mast Average',\r\n              data: Utils.numbers(NUMBER_CFG),\r\n              borderColor: Utils.CHART_COLORS.red,\r\n              backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\r\n            },\r\n            {\r\n              label: 'Turbine Average',\r\n              data: Utils.numbers(NUMBER_CFG),\r\n              borderColor: Utils.CHART_COLORS.blue,\r\n              backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\r\n            }\r\n          ]\r\n        };\r\n\r\n        if (responseData && responseData.graphs){\r\n\r\n\r\n\r\n        responseData.graphs.find((item) => {\r\n          switch (item.type) {\r\n            case 'WindSpeed':\r\n              item.data.forEach((rDs) => {\r\n                const windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\r\n                windSpeedDataSets.data.push(windSpeed);\r\n\r\n                let date = rDs.datetimeFrom.split(' ')[0];\r\n                let time = rDs.datetimeFrom.split(' ')[1];\r\n                let timeArr = time.split(':')\r\n\r\n                \r\n\r\n                const rDfrom = `${date} - ${timeArr[0]}:${timeArr[1]}`;\r\n                const rDto = rDs.datetimeTo;\r\n                windSpeedData.labels.push(rDfrom);\r\n              });\r\n\r\n              console.log('responseData.graphs', responseData.graphs);\r\n              \r\n              windSpeedData.datasets.push(windSpeedDataSets);\r\n              console.log('windSpeedData', windSpeedData);\r\n              setLineChartOneData(windSpeedData)\r\n              break;\r\n            case 'Temperature':\r\n              item.data.forEach((rDs) => {\r\n                temperatureDataSets.data.push(round(rDs.temperature))\r\n                const rDfrom = rDs.datetimeFrom;\r\n                const rDto = rDs.datetimeTo;\r\n                temperatureData.labels.push(formatDate2(rDfrom, 'time'));\r\n              });\r\n              temperatureData.datasets.push(temperatureDataSets);\r\n              setLineChartTwoData(temperatureData)\r\n              break;\r\n            case 'WindRose':\r\n              item.data.forEach((rDs) => {\r\n                let windRoseDataSets = {}\r\n                const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\r\n                \r\n                const color = windRoseColor(rDs);\r\n\r\n                windRoseDataSets.data = rDs.radiuses;\r\n                windRoseDataSets.backgroundColor=[];\r\n\r\n                rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\r\n\r\n                if (diff > 0) {\r\n                  for (let i = 0; i <= diff; i++) {\r\n                    windRoseDataSets.data.push(0);\r\n                  }\r\n                }\r\n                \r\n                windRoseDataSets.pointBackgroundColor = color;\r\n                // windRoseDataSets.pointBorderColor = \"white\",\r\n                windRoseDataSets.pointHoverBackgroundColor = color;\r\n                windRoseDataSets.pointHoverBorderColor = color;\r\n                \r\n                windRoseData.datasets.push(windRoseDataSets);\r\n\r\n                // console.log('windRoseRange',rDfrom,rDs.angle.from)\r\n                \r\n\r\n                \r\n              });\r\n\r\n              windRoseData.datasets.backgroundColor = ['red','blue'];\r\n\r\n              setPolarChartData(windRoseData)\r\n              break;\r\n          }\r\n        });\r\n\r\n      }\r\n      });\r\n\r\n  }\r\n\r\n\r\n  // const getChartData = (period) => {\r\n\r\n  //   setLoading(true);\r\n\r\n  //   const body = {}\r\n\r\n  //   if (period && period.split('--').length==2) {\r\n  //     body.from = period.split('--')[0]\r\n  //     body.to = period.split('--')[1]\r\n  //   } else {\r\n  //     body.period = period\r\n  //   }\r\n    \r\n  //   DataAPI(\r\n  //     {\r\n  //     'endpoint': 'chart/climate',\r\n  //     'method': 'POST',\r\n  //     'body': body\r\n  //   })\r\n  //     .then(function (responseData) {\r\n\r\n  //       if (responseData.error && responseData.error.message) alert(responseData.error.message)\r\n\r\n  //       setLoading(false);\r\n\r\n  //       var windSpeedData = {\r\n  //         labels: [],\r\n  //         datasets: []\r\n  //       }\r\n  //       var temperatureData = {\r\n  //         labels: [],\r\n  //         datasets: []\r\n  //       }\r\n  //       var windRoseData = {\r\n  //         labels: [],\r\n  //         datasets: []\r\n  //       }\r\n\r\n\r\n  //       var windSpeedDataSets = {\r\n  //         label: 'WindSpeed',\r\n  //         borderColor: '#f87979',\r\n  //         pointBackgroundColor: 'transparent',\r\n  //         pointBorderColor: 'transparent',\r\n  //         backgroundColor: 'transparent',\r\n  //         data: []\r\n  //       };\r\n  //       var temperatureDataSets = {\r\n  //         label: 'Temperature',\r\n  //         borderColor: '#00D8FF',\r\n  //         pointBackgroundColor: 'transparent',\r\n  //         pointBorderColor: 'transparent',\r\n  //         backgroundColor: 'transparent',\r\n  //         data: []\r\n  //       };\r\n\r\n\r\n\r\n\r\n  //       if (responseData && responseData.graphs){\r\n\r\n\r\n\r\n  //       responseData.graphs.find((item) => {\r\n  //         switch (item.type) {\r\n  //           case 'WindSpeed':\r\n  //             item.data.forEach((rDs) => {\r\n  //               const windSpeed = (Math.round(rDs.windSpeed * 100) / 100).toFixed(2);\r\n  //               windSpeedDataSets.data.push(windSpeed);\r\n\r\n  //               let date = rDs.datetimeFrom.split(' ')[0];\r\n  //               let time = rDs.datetimeFrom.split(' ')[1];\r\n  //               let timeArr = time.split(':')\r\n\r\n                \r\n\r\n  //               const rDfrom = `${date} - ${timeArr[0]}:${timeArr[1]}`;\r\n  //               const rDto = rDs.datetimeTo;\r\n  //               windSpeedData.labels.push(rDfrom);\r\n  //             });\r\n\r\n  //             console.log('responseData.graphs', responseData.graphs);\r\n              \r\n  //             windSpeedData.datasets.push(windSpeedDataSets);\r\n  //             console.log('windSpeedData', windSpeedData);\r\n  //             setLineChartOneData(windSpeedData)\r\n  //             break;\r\n  //           case 'Temperature':\r\n  //             item.data.forEach((rDs) => {\r\n  //               temperatureDataSets.data.push(round(rDs.temperature))\r\n  //               const rDfrom = rDs.datetimeFrom;\r\n  //               const rDto = rDs.datetimeTo;\r\n  //               temperatureData.labels.push(formatDate2(rDfrom, 'time'));\r\n  //             });\r\n  //             temperatureData.datasets.push(temperatureDataSets);\r\n  //             setLineChartTwoData(temperatureData)\r\n  //             break;\r\n  //           case 'WindRose':\r\n  //             item.data.forEach((rDs) => {\r\n  //               let windRoseDataSets = {}\r\n  //               const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\r\n                \r\n  //               const color = windRoseColor(rDs);\r\n\r\n  //               windRoseDataSets.data = rDs.radiuses;\r\n  //               windRoseDataSets.backgroundColor=[];\r\n\r\n  //               rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\r\n\r\n  //               if (diff > 0) {\r\n  //                 for (let i = 0; i <= diff; i++) {\r\n  //                   windRoseDataSets.data.push(0);\r\n  //                 }\r\n  //               }\r\n                \r\n  //               windRoseDataSets.pointBackgroundColor = color;\r\n  //               // windRoseDataSets.pointBorderColor = \"white\",\r\n  //               windRoseDataSets.pointHoverBackgroundColor = color;\r\n  //               windRoseDataSets.pointHoverBorderColor = color;\r\n                \r\n  //               windRoseData.datasets.push(windRoseDataSets);\r\n\r\n  //               // console.log('windRoseRange',rDfrom,rDs.angle.from)\r\n                \r\n\r\n                \r\n  //             });\r\n\r\n  //             windRoseData.datasets.backgroundColor = ['red','blue'];\r\n\r\n  //             setPolarChartData(windRoseData)\r\n  //             break;\r\n  //         }\r\n  //       });\r\n\r\n  //     }\r\n  //     });\r\n\r\n  // }\r\n\r\n\r\n  const windRoseLabelsMap = windRoseLabels.map(\r\n    (v,m) => {\r\n      const color = colors[m];\r\n      return <span style={{marginRight:'20px'}}>{v}<span style={{backgroundColor:color, width: '30px', height: '10px', display: 'inline-block', 'marginLeft':'10px' }}></span></span>;\r\n    }\r\n  )\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            {/* <CCol sm=\"7\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n               <CCol sm=\"5\" class=\"text-right\">\r\n\r\n            <DateFilter options={'y,cm,cy,12w,12m,x,xx'.split(',')} disabled={loading} onChange={(value) => { setDateRange(value); getChartData(value);}} />\r\n\r\n                            </CCol> */}\r\n\r\n            \r\n            <CCol sm=\"5\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Alarms\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n            \r\n            <CCol sm=\"7\" className=\"text-right d-flex flex-center\">\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"period\" id=\"period\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\">Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n              <DateFilter value={dateRange} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value);}} />\r\n              <CButton color=\"primary\" disabled={loading} className=\"mr-2 ml-3\" onClick={() => { fetchData({period: dateRange, groupBy: groupBy});}} >Submit</CButton>\r\n            </CCol>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n\r\n        <CRow>\r\n          <CCol>\r\n          <h5>Wind Speed</h5>\r\n\r\n          <div>m/s</div>\r\n          <CChartLine\r\n            datasets={lineChartOneData.datasets}\r\n            labels={lineChartOneData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n\r\n\r\n          <br />\r\n          <br />\r\n          \r\n          </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol>\r\n          \r\n          {false && <><h5>Wind Rose</h5>\r\n\r\n          <div style={{maxWidth:'600px', margin:'auto'}}>{windRoseLabelsMap}</div>\r\n\r\n          <CChartPolarArea\r\n            datasets={polarChartData.datasets}\r\n            labels={polarChartData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n\r\n\r\n          <br />\r\n          <br /></>}\r\n\r\n          </CCol>\r\n          </CRow>\r\n          <CRow>\r\n\r\n\r\n            <CCol>\r\n\r\n          <h5>Temperature</h5>\r\n\r\n          <div>°C</div>\r\n          <CChartLine\r\n            datasets={lineChartTwoData.datasets}\r\n            labels={lineChartTwoData.labels}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n          </CCol>\r\n          </CRow>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateSummary\r\n"]},"metadata":{},"sourceType":"module"}