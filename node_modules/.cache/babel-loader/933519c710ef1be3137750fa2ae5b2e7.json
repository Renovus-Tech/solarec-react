{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(normalizeFile);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  var data = require(\"debug\");\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _t() {\n  var data = require(\"@babel/types\");\n\n  _t = function _t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  var data = require(\"convert-source-map\");\n\n  _convertSourceMap = function _convertSourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"./file/file\");\n\nvar _parser = require(\"../parser\");\n\nvar _cloneDeep = require(\"./util/clone-deep\");\n\nvar _t2 = _t(),\n    file = _t2.file,\n    traverseFast = _t2.traverseFast;\n\nvar debug = _debug()(\"babel:transform:file\");\n\nvar LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction normalizeFile(pluginPasses, options, code, ast) {\n  var inputMap, lastComment, _lastComment, match, inputMapContent;\n\n  return _regeneratorRuntime.wrap(function normalizeFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          code = \"\".concat(code || \"\");\n\n          if (!ast) {\n            _context.next = 11;\n            break;\n          }\n\n          if (!(ast.type === \"Program\")) {\n            _context.next = 6;\n            break;\n          }\n\n          ast = file(ast, [], []);\n          _context.next = 8;\n          break;\n\n        case 6:\n          if (!(ast.type !== \"File\")) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"AST root must be a Program or File node\");\n\n        case 8:\n          if (options.cloneInputAst) {\n            ast = (0, _cloneDeep.default)(ast);\n          }\n\n          _context.next = 13;\n          break;\n\n        case 11:\n          return _context.delegateYield((0, _parser.default)(pluginPasses, options, code), \"t0\", 12);\n\n        case 12:\n          ast = _context.t0;\n\n        case 13:\n          inputMap = null;\n\n          if (options.inputSourceMap !== false) {\n            if (typeof options.inputSourceMap === \"object\") {\n              inputMap = _convertSourceMap().fromObject(options.inputSourceMap);\n            }\n\n            if (!inputMap) {\n              lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n              if (lastComment) {\n                try {\n                  inputMap = _convertSourceMap().fromComment(lastComment);\n                } catch (err) {\n                  debug(\"discarding unknown inline input sourcemap\", err);\n                }\n              }\n            }\n\n            if (!inputMap) {\n              _lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n              if (typeof options.filename === \"string\" && _lastComment) {\n                try {\n                  match = EXTERNAL_SOURCEMAP_REGEX.exec(_lastComment);\n                  inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));\n\n                  if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n                    debug(\"skip merging input map > 1 MB\");\n                  } else {\n                    inputMap = _convertSourceMap().fromJSON(inputMapContent);\n                  }\n                } catch (err) {\n                  debug(\"discarding unknown file input sourcemap\", err);\n                }\n              } else if (_lastComment) {\n                debug(\"discarding un-loadable file input sourcemap\");\n              }\n            }\n          }\n\n          return _context.abrupt(\"return\", new _file.default(options, {\n            code: code,\n            ast: ast,\n            inputMap: inputMap\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nvar EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(function (_ref) {\n      var value = _ref.value;\n\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  var lastComment = null;\n  traverseFast(ast, function (node) {\n    var _extractCommentsFromL = extractCommentsFromList(regex, node.leadingComments, lastComment);\n\n    var _extractCommentsFromL2 = _slicedToArray(_extractCommentsFromL, 2);\n\n    node.leadingComments = _extractCommentsFromL2[0];\n    lastComment = _extractCommentsFromL2[1];\n\n    var _extractCommentsFromL3 = extractCommentsFromList(regex, node.innerComments, lastComment);\n\n    var _extractCommentsFromL4 = _slicedToArray(_extractCommentsFromL3, 2);\n\n    node.innerComments = _extractCommentsFromL4[0];\n    lastComment = _extractCommentsFromL4[1];\n\n    var _extractCommentsFromL5 = extractCommentsFromList(regex, node.trailingComments, lastComment);\n\n    var _extractCommentsFromL6 = _slicedToArray(_extractCommentsFromL5, 2);\n\n    node.trailingComments = _extractCommentsFromL6[0];\n    lastComment = _extractCommentsFromL6[1];\n  });\n  return lastComment;\n}","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/lib/transformation/normalize-file.js"],"names":["normalizeFile","Object","defineProperty","exports","value","default","_fs","data","require","_path","_debug","_t","_convertSourceMap","_file","_parser","_cloneDeep","file","traverseFast","debug","LARGE_INPUT_SOURCEMAP_THRESHOLD","pluginPasses","options","code","ast","type","Error","cloneInputAst","inputMap","inputSourceMap","fromObject","lastComment","extractComments","INLINE_SOURCEMAP_REGEX","fromComment","err","EXTERNAL_SOURCEMAP_REGEX","filename","match","exec","inputMapContent","readFileSync","resolve","dirname","length","fromJSON","extractCommentsFromList","regex","comments","filter","test","node","leadingComments","innerComments","trailingComments"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = require(\"debug\");\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _t() {\n  const data = require(\"@babel/types\");\n\n  _t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = require(\"convert-source-map\");\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"./file/file\");\n\nvar _parser = require(\"../parser\");\n\nvar _cloneDeep = require(\"./util/clone-deep\");\n\nconst {\n  file,\n  traverseFast\n} = _t();\n\nconst debug = _debug()(\"babel:transform:file\");\n\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction* normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = (0, _cloneDeep.default)(ast);\n    }\n  } else {\n    ast = yield* (0, _parser.default)(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n      if (lastComment) {\n        try {\n          inputMap = _convertSourceMap().fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);\n\n          const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));\n\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = _convertSourceMap().fromJSON(inputMapContent);\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new _file.default(options, {\n    code,\n    ast,\n    inputMap\n  });\n}\n\nconst INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(({\n      value\n    }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  let lastComment = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);\n    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);\n    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);\n  });\n  return lastComment;\n}"]},"metadata":{},"sourceType":"script"}