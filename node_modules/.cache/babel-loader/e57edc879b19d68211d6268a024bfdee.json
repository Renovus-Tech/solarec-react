{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar callExpression = _t.callExpression,\n    cloneNode = _t.cloneNode,\n    expressionStatement = _t.expressionStatement,\n    identifier = _t.identifier,\n    importDeclaration = _t.importDeclaration,\n    importDefaultSpecifier = _t.importDefaultSpecifier,\n    importNamespaceSpecifier = _t.importNamespaceSpecifier,\n    importSpecifier = _t.importSpecifier,\n    memberExpression = _t.memberExpression,\n    stringLiteral = _t.stringLiteral,\n    variableDeclaration = _t.variableDeclaration,\n    variableDeclarator = _t.variableDeclarator;\n\nvar ImportBuilder = /*#__PURE__*/function () {\n  function ImportBuilder(importedSource, scope, hub) {\n    _classCallCheck(this, ImportBuilder);\n\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  _createClass(ImportBuilder, [{\n    key: \"done\",\n    value: function done() {\n      return {\n        statements: this._statements,\n        resultName: this._resultName\n      };\n    }\n  }, {\n    key: \"import\",\n    value: function _import() {\n      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n\n      return this;\n    }\n  }, {\n    key: \"require\",\n    value: function require() {\n      this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n\n      return this;\n    }\n  }, {\n    key: \"namespace\",\n    value: function namespace() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"namespace\";\n\n      var local = this._scope.generateUidIdentifier(name);\n\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [importNamespaceSpecifier(local)];\n      this._resultName = cloneNode(local);\n      return this;\n    }\n  }, {\n    key: \"default\",\n    value: function _default(name) {\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [importDefaultSpecifier(name)];\n      this._resultName = cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"named\",\n    value: function named(name, importName) {\n      if (importName === \"default\") return this.default(name);\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [importSpecifier(name, identifier(importName))];\n      this._resultName = cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"var\",\n    value: function _var(name) {\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type !== \"ExpressionStatement\") {\n        _assert(this._resultName);\n\n        statement = expressionStatement(this._resultName);\n\n        this._statements.push(statement);\n      }\n\n      this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(name, statement.expression)]);\n      this._resultName = cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"defaultInterop\",\n    value: function defaultInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n    }\n  }, {\n    key: \"wildcardInterop\",\n    value: function wildcardInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n    }\n  }, {\n    key: \"_interop\",\n    value: function _interop(callee) {\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = callExpression(callee, [statement.expression]);\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n\n        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n      } else {\n        _assert.fail(\"Unexpected type.\");\n      }\n\n      return this;\n    }\n  }, {\n    key: \"prop\",\n    value: function prop(name) {\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = memberExpression(statement.expression, identifier(name));\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n\n        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n      } else {\n        _assert.fail(\"Unexpected type:\" + statement.type);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(name) {\n      this._resultName = memberExpression(this._resultName, identifier(name));\n    }\n  }]);\n\n  return ImportBuilder;\n}();\n\nexports.default = ImportBuilder;","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/node_modules/@babel/helper-module-imports/lib/import-builder.js"],"names":["Object","defineProperty","exports","value","default","_assert","require","_t","callExpression","cloneNode","expressionStatement","identifier","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","memberExpression","stringLiteral","variableDeclaration","variableDeclarator","ImportBuilder","importedSource","scope","hub","_statements","_resultName","_scope","_hub","_importedSource","statements","resultName","push","name","local","generateUidIdentifier","statement","length","type","specifiers","importName","expression","_interop","addHelper","callee","declarations","init","fail"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nclass ImportBuilder {\n  constructor(importedSource, scope, hub) {\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName\n    };\n  }\n\n  import() {\n    this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n\n    return this;\n  }\n\n  require() {\n    this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n\n  default(name) {\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importDefaultSpecifier(name)];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  named(name, importName) {\n    if (importName === \"default\") return this.default(name);\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importSpecifier(name, identifier(importName))];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  var(name) {\n    name = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n\n    if (statement.type !== \"ExpressionStatement\") {\n      _assert(this._resultName);\n\n      statement = expressionStatement(this._resultName);\n\n      this._statements.push(statement);\n    }\n\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(name, statement.expression)]);\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n    } else {\n      _assert.fail(\"Unexpected type.\");\n    }\n\n    return this;\n  }\n\n  prop(name) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(statement.expression, identifier(name));\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n    } else {\n      _assert.fail(\"Unexpected type:\" + statement.type);\n    }\n\n    return this;\n  }\n\n  read(name) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n\n}\n\nexports.default = ImportBuilder;"]},"metadata":{},"sourceType":"script"}