{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/solarec2/renovusUnicef/ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\solarec2\\\\renovusUnicef\\\\ui_web\\\\src\\\\views\\\\dashboard\\\\Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardHeader, CDataTable, CRow, CCol, CSpinner, CBadge } from '@coreui/react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { freeSet } from '@coreui/icons';\nimport DataAPI from '../../helpers/DataAPI.js';\nimport { formatDateWithSeconds, round, formatNumber } from '../../helpers/utils.js';\nimport CIcon from '@coreui/icons-react';\nimport { setCookie, getCookie } from '../../helpers/sessionCookie.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastUpdated = _useState2[0],\n      setLastUpdated = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoadError = _useState6[0],\n      setDataLoadError = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasSolarParks = _useState8[0],\n      setHasSolarParks = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      solarGeneratorsTableData = _useState10[0],\n      setSolarGeneratorsTableData = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      tableDataSolarCurrentStatus = _useState12[0],\n      setTableDataSolarCurrentStatus = _useState12[1];\n\n  var fetchData = function fetchData() {\n    DataAPI({\n      'method': 'GET',\n      'endpoint': 'solar/dashboard/now' // 'body': body\n\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        setDataLoadError(true);\n\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      if (responseData.dateData != undefined) setLastUpdated(formatDateWithSeconds(responseData.dateData));\n      if (responseData.locations.length > 0) setHasSolarParks(true);\n      var tableDataSolarCurrentStatus = {\n        items: [{\n          item: \"Production:\",\n          now: formatNumber(round(responseData.dataNow.production, 1)) + \" MWh\"\n        }, {\n          item: \"Irradiance average:\",\n          now: round(responseData.dataNow.irradiance, 2) + \" kW/m2\"\n        }, {\n          item: \"Inverters in operation:\",\n          now: responseData.amountGeneratorsOk + \"/\" + responseData.amountGenerators\n        }],\n        fields: [{\n          key: 'item',\n          label: ''\n        }, 'now']\n      };\n      setTableDataSolarCurrentStatus(tableDataSolarCurrentStatus);\n      var solarGeneratorsTableData = [];\n      responseData.locations.forEach(function (rL, index) {\n        if (rL.generators.length > 0) {\n          var park = rL.name;\n          var generatorStatus = rL.generators.map(function (d) {\n            var line = {};\n            line.inverter = d.code;\n            line.production = d.dataNow.production != undefined ? formatNumber(round(d.dataNow.production, 3)) : \"\";\n            line.irradiance = \"\";\n            return line;\n          });\n          var total = {\n            inverter: \"Total\",\n            production: formatNumber(round(rL.dataNow.production, 3)),\n            irradiance: formatNumber(round(rL.dataNow.irradiance, 3))\n          };\n          var tableData = {\n            park: park,\n            items: [total].concat(generatorStatus),\n            fields: ['inverter', {\n              key: 'production',\n              label: 'Production (MWh)'\n            }, {\n              key: 'irradiance',\n              label: 'Irradiance (kw/m2)'\n            }]\n          };\n          solarGeneratorsTableData.push(tableData);\n        }\n      });\n      setSolarGeneratorsTableData(solarGeneratorsTableData);\n    });\n  };\n\n  useEffect(function () {\n    loadGenerators();\n    var interval = setInterval(function () {\n      return fetchData();\n    }, 5000);\n    return function () {\n      return clearInterval(interval);\n    }; // cleanup\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response && response.error) {\n        setCookie('lastTimeStamp', '');\n        setCookie('name', '');\n        window.location.reload();\n      } else if (response && !response.error) {\n        // setGenerators(response.generators);\n        setLoading(true);\n        fetchData();\n      }\n    });\n  };\n\n  var getBadge = function getBadge(status) {\n    switch (status) {\n      case 'green':\n        return 'success';\n\n      case 'red':\n        return 'danger';\n\n      default:\n        return '';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          xs: \"10\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Current Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-medium-emphasis\",\n            children: [\"Last updated on: \", lastUpdated]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          xs: \"2\",\n          className: \"text-right d-flex flex-center flex-justify-end\",\n          children: /*#__PURE__*/_jsxDEV(CIcon, {\n            content: freeSet.cilReload,\n            className: \"cursor-pointer animate-rotate\",\n            size: 'lg',\n            title: 'Refresh',\n            onClick: function onClick() {\n              return fetchData();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, _this), !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        children: hasSolarParks && /*#__PURE__*/_jsxDEV(CCol, {\n          xl: \"12\",\n          className: \"col-solar px-sm-4 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '30px'\n            },\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: tableDataSolarCurrentStatus && /*#__PURE__*/_jsxDEV(CCol, {\n                xl: \"6\",\n                className: \"px-sm-4 mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Solar Portfolio\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 29\n                }, _this), /*#__PURE__*/_jsxDEV(CDataTable, {\n                  addTableClasses: \"current-status-table\",\n                  striped: true,\n                  items: tableDataSolarCurrentStatus.items,\n                  fields: tableDataSolarCurrentStatus.fields\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 29\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 27\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 23\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: hasSolarParks && /*#__PURE__*/_jsxDEV(CCol, {\n          xl: \"12\",\n          className: \"col-solar px-sm-4 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '50px'\n            },\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: solarGeneratorsTableData.length > 0 && solarGeneratorsTableData.map(function (park) {\n                return /*#__PURE__*/_jsxDEV(CCol, {\n                  xl: \"6\",\n                  className: \"px-sm-4 mb-4\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: park.park\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 27\n                  }, _this), /*#__PURE__*/_jsxDEV(CDataTable, {\n                    addTableClasses: \"monitor-park-table table-header-center\",\n                    striped: true,\n                    items: park.items,\n                    fields: park.fields // itemsPerPage={15}\n                    // pagination\n                    ,\n                    sorter: true,\n                    scopedSlots: {\n                      'indicator': function indicator(item) {\n                        return /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: /*#__PURE__*/_jsxDEV(CBadge, {\n                            color: getBadge(item.indicator)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 250,\n                            columnNumber: 39\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 249,\n                          columnNumber: 37\n                        }, _this);\n                      },\n                      'production': function production(item) {\n                        return /*#__PURE__*/_jsxDEV(\"td\", {\n                          className: \"text-right\",\n                          children: item.production\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 256,\n                          columnNumber: 37\n                        }, _this);\n                      },\n                      'irradiance': function irradiance(item) {\n                        return /*#__PURE__*/_jsxDEV(\"td\", {\n                          className: \"text-right\",\n                          children: item.irradiance\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 262,\n                          columnNumber: 37\n                        }, _this);\n                      }\n                    }\n                  }, park.park, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 27\n                  }, _this)]\n                }, 'col-' + park.park, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 25\n                }, _this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 21\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }, _this) : /*#__PURE__*/_jsxDEV(CCardBody, {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CSpinner, {\n        className: \"loading-spinner\",\n        color: \"#321fdb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Dashboard, \"5g6l9imHV0h+9eH/yrfIA2Qx4nU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/solarec2/renovusUnicef/ui_web/src/views/dashboard/Dashboard.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardHeader","CDataTable","CRow","CCol","CSpinner","CBadge","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","freeSet","DataAPI","formatDateWithSeconds","round","formatNumber","CIcon","setCookie","getCookie","register","Dashboard","lastUpdated","setLastUpdated","loading","setLoading","dataLoadError","setDataLoadError","hasSolarParks","setHasSolarParks","solarGeneratorsTableData","setSolarGeneratorsTableData","tableDataSolarCurrentStatus","setTableDataSolarCurrentStatus","fetchData","then","responseData","error","message","alert","dateData","undefined","locations","length","items","item","now","dataNow","production","irradiance","amountGeneratorsOk","amountGenerators","fields","key","label","forEach","rL","index","generators","park","name","generatorStatus","map","d","line","inverter","code","total","tableData","concat","push","loadGenerators","interval","setInterval","clearInterval","response","window","location","reload","getBadge","status","cilReload","marginBottom","indicator","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CBadge\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nimport { freeSet } from '@coreui/icons'\r\nimport DataAPI from '../../helpers/DataAPI.js'\r\nimport { formatDateWithSeconds, round, formatNumber } from '../../helpers/utils.js'\r\nimport CIcon from '@coreui/icons-react';\r\nimport {setCookie,getCookie} from '../../helpers/sessionCookie.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [hasSolarParks, setHasSolarParks] = useState(false);\r\n\r\n  const [solarGeneratorsTableData, setSolarGeneratorsTableData] = useState([]);\r\n  const [tableDataSolarCurrentStatus, setTableDataSolarCurrentStatus] = useState(false);\r\n\r\n  const fetchData = () => {\r\n\r\n    DataAPI(\r\n      {\r\n      'method': 'GET',\r\n      'endpoint': 'solar/dashboard/now',\r\n      // 'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      if (responseData.dateData != undefined)\r\n        setLastUpdated(formatDateWithSeconds(responseData.dateData));\r\n\r\n      if (responseData.locations.length > 0)\r\n        setHasSolarParks(true);\r\n\r\n      const tableDataSolarCurrentStatus = {\r\n        items: [{\r\n                  item:\"Production:\",\r\n                  now:formatNumber(round(responseData.dataNow.production,1))+\" MWh\",\r\n                },\r\n                {\r\n                  item:\"Irradiance average:\",\r\n                  now:round(responseData.dataNow.irradiance,2)+\" kW/m2\",\r\n                },\r\n                {\r\n                  item:\"Inverters in operation:\",\r\n                  now:responseData.amountGeneratorsOk+\"/\"+responseData.amountGenerators,\r\n                },\r\n              ],\r\n        fields:  [\r\n          { key: 'item', label: '' },\r\n          'now'\r\n        ]\r\n      }\r\n      setTableDataSolarCurrentStatus(tableDataSolarCurrentStatus)\r\n\r\n      const solarGeneratorsTableData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          const generatorStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.inverter = d.code\r\n            line.production = (d.dataNow.production!=undefined?formatNumber(round(d.dataNow.production,3)):\"\")\r\n            line.irradiance = \"\"\r\n            return line\r\n          });\r\n\r\n          const total =  {\r\n            inverter: \"Total\",\r\n            production: formatNumber(round(rL.dataNow.production,3)),\r\n            irradiance: formatNumber(round(rL.dataNow.irradiance,3))\r\n          };\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(generatorStatus),\r\n            fields:  [\r\n              'inverter',\r\n              { key: 'production', label: 'Production (MWh)'},\r\n              { key: 'irradiance', label: 'Irradiance (kw/m2)' }\r\n            ]\r\n          }\r\n    \r\n          solarGeneratorsTableData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setSolarGeneratorsTableData(solarGeneratorsTableData);\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n    const interval = setInterval(() => fetchData(), 5000)\r\n    return () => clearInterval(interval) // cleanup\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (response  && !response.error) {\r\n          // setGenerators(response.generators);\r\n          setLoading(true);\r\n          fetchData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return ''\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol xs=\"10\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Current Status\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Last updated on: {lastUpdated}</div>\r\n            </CCol>\r\n            <CCol xs=\"2\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              <CIcon content={freeSet.cilReload} className={\"cursor-pointer animate-rotate\"} size={'lg'} title={'Refresh'}\r\n                onClick={() => fetchData()}/>\r\n            </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n\r\n            <CRow>\r\n\r\n              { hasSolarParks &&\r\n                <CCol xl={\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n\r\n                <div style={{marginBottom:'30px'}}>\r\n                      <CRow>\r\n                      \r\n                        { tableDataSolarCurrentStatus &&\r\n                          <CCol xl={\"6\"} className=\"px-sm-4 mb-4\">\r\n                            <h4>Solar Portfolio</h4>\r\n                            <CDataTable\r\n                                addTableClasses=\"current-status-table\"\r\n                                striped\r\n                                items={tableDataSolarCurrentStatus.items}\r\n                                fields={tableDataSolarCurrentStatus.fields}\r\n                              />\r\n                          </CCol>\r\n                        }\r\n\r\n                      </CRow>\r\n                    </div>\r\n\r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n            <CRow>\r\n\r\n              { hasSolarParks &&\r\n\r\n                <CCol xl={\"12\"} className=\"col-solar px-sm-4 mb-4\">\r\n                  <div style={{marginBottom:'50px'}}>\r\n                    <CRow>\r\n                    \r\n                      { solarGeneratorsTableData.length > 0 &&\r\n                        solarGeneratorsTableData.map(park => (  \r\n                        <CCol xl={\"6\"} className=\"px-sm-4 mb-4\" key={'col-'+park.park}>\r\n                          <h5>{park.park}</h5>\r\n                          <CDataTable\r\n                              key={park.park}\r\n                              addTableClasses=\"monitor-park-table table-header-center\"\r\n                              striped\r\n                              items={park.items}\r\n                              fields={park.fields}\r\n                              // itemsPerPage={15}\r\n                              // pagination\r\n                              sorter\r\n                              scopedSlots = {{\r\n                                'indicator':\r\n                                  (item)=>(\r\n                                    <td>\r\n                                      <CBadge color={getBadge(item.indicator)}>\r\n                                      </CBadge>\r\n                                    </td>\r\n                                  ),\r\n                                  'production':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.production}\r\n                                    </td>\r\n                                  ),\r\n                                  'irradiance':\r\n                                  (item)=>(\r\n                                    <td className=\"text-right\">\r\n                                      {item.irradiance}\r\n                                    </td>\r\n                                  )\r\n                              }}\r\n                            />\r\n                        </CCol>\r\n                        ))\r\n                      }\r\n\r\n                    </CRow>\r\n                  </div>\r\n                  \r\n                </CCol>\r\n              }\r\n\r\n            </CRow>\r\n\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"]},"metadata":{},"sourceType":"module"}