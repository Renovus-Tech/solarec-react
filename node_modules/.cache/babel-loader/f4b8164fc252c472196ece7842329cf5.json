{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\performance\\\\performance.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardHeader, CRow, CCol, CButton, CSelect, CSpinner, Fade } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Line } from 'react-chartjs-2';\nimport { generatePath } from 'react-router-dom/cjs/react-router-dom.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x'); // var mixedChart = new Chart(ctx, {\n//     data: {\n//         datasets: [\n//         {\n//             type: 'line',\n//             label: 'Line Dataset',\n//             data: [50, 50, 50, 50],\n//         }],\n//         labels: ['January', 'February', 'March', 'April']\n//     },\n//     // options: options\n// });\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      graphData2 = _useState4[0],\n      setGraphData2 = _useState4[1];\n\n  var _useState5 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      graphData3 = _useState6[0],\n      setGraphData3 = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generator = _useState8[0],\n      setGenerator = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      generators = _useState10[0],\n      setGenerators = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      generatorsLoaded = _useState12[0],\n      setGeneratorsLoaded = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      generatorsSelected = _useState14[0],\n      setGeneratorsSelected = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      selectedGenerators = _useState16[0],\n      setSelectedGenerators = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      park = _useState18[0],\n      setPark = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      date = _useState20[0],\n      setDate = _useState20[1];\n\n  var _useState21 = useState('12w'),\n      _useState22 = _slicedToArray(_useState21, 2),\n      dateRange = _useState22[0],\n      setDateRange = _useState22[1];\n\n  var _useState23 = useState('week'),\n      _useState24 = _slicedToArray(_useState23, 2),\n      groupBy = _useState24[0],\n      setGroupBy = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      data = _useState26[0],\n      setData = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      loading = _useState28[0],\n      setLoading = _useState28[1];\n\n  var _useState29 = useState(false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      dataLoaded = _useState30[0],\n      setDataLoaded = _useState30[1];\n\n  var _useState31 = useState(false),\n      _useState32 = _slicedToArray(_useState31, 2),\n      dataLoadError = _useState32[0],\n      setDataLoadError = _useState32[1];\n\n  var _useState33 = useState(null),\n      _useState34 = _slicedToArray(_useState33, 2),\n      generatorsButtons = _useState34[0],\n      setGeneratorsButtons = _useState34[1];\n\n  var colors = ['#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600', '#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600'];\n\n  var fetchData = function fetchData() {// const {period, groupBy} = options\n    // setLoading(true);\n    // const body = {}\n    // body.generators = selectedGenerators;\n    // if (period && period.split('--').length==2) {\n    //   body.from = period.split('--')[0]\n    //   body.to = period.split('--')[1]\n    // } else {\n    //   body.period = period\n    // }\n    // body.groupBy = groupBy\n    //   DataAPI({\n    //     endpoint: 'chart/performanceIndex',\n    //     method: 'POST',\n    //     body: body\n    //   })\n    //     .then(function (responseData) {\n    //       setLoading(false);\n    //       if (responseData.error) {\n    //         setDataLoadError(true);\n    //         if (responseData.error.message) {\n    //         return(alert(responseData.error.message))\n    //         } else {\n    //         return(alert(responseData.error)) \n    //         }\n    //       }\n    //       const data = {\n    //         labels: [],\n    //         datasets: [],\n    //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    //       }\n    //       const data2 = {\n    //         labels: [],\n    //         datasets: [],\n    //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    //       }\n    //       const data3 = {\n    //         labels: [],\n    //         datasets: [],\n    //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    //       }\n    //       responseData.data.forEach((rDs) => {\n    //         const dataset = {\n    //           labels: [],\n    //           label: rDs.name,\n    //           backgroundColor: colors.pop(),\n    //           data: [],\n    //           // hidden: rDs.name!='Total'\n    //         };\n    //         const dataset2y = {\n    //           labels: [],\n    //           label: rDs.name,\n    //           backgroundColor: colors.pop(),\n    //           data: [],\n    //           yAxisID: 'y'\n    //           // hidden: rDs.name!='Total'\n    //         };\n    //         const dataset2y1 = {\n    //           labels: [],\n    //           label: rDs.name,\n    //           backgroundColor: colors.pop(),\n    //           data: [],\n    //           yAxisID: 'y1'\n    //           // hidden: rDs.name!='Total'\n    //         };\n    //         const dataset3 = {\n    //           labels: [],\n    //           label: rDs.name,\n    //           backgroundColor: colors.pop(),\n    //           data: [],\n    //           // hidden: rDs.name!='Total'\n    //         };\n    //         rDs.data.graph.forEach((rD) => {\n    //           const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\n    //           dataset.labels.push(label);\n    //           dataset2y.labels.push(label);\n    //           dataset2y1.labels.push(label);\n    //           dataset3.labels.push(label);\n    //           dataset.data.push(rD.performance)\n    //           dataset2y.data.push(rD.power)\n    //           dataset2y1.data.push(rD.windspeed)\n    //           dataset3.data.push(rD.availability)\n    //         });\n    //         dataset.labels.reverse();\n    //         dataset.data.reverse();\n    //         dataset2y.labels.reverse();\n    //         dataset2y.data.reverse();\n    //         dataset2y1.labels.reverse();\n    //         dataset2y1.data.reverse();\n    //         dataset3.labels.reverse();\n    //         dataset3.data.reverse();\n    //         data.datasets.push(dataset);\n    //         data2.datasets.push([dataset2y,dataset2y1]);\n    //         data3.datasets.push(dataset3);\n    //       });\n    //       responseData.data[0].data.graph.forEach((rD) => {\n    //         const rDfrom = rD.from;\n    //         const rDto = rD.to;\n    //         const label = (groupBy == \"day\") ? `${formatDate(rD.from, 'noyear')}` : `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\n    //         data.labels.push(label);\n    //         data2.labels.push(label);\n    //         data3.labels.push(label);\n    //       });\n    //       data.labels.reverse();\n    //       setGraphData(data);\n    //       setGraphData2(data2);\n    //       setGraphData3(data3);\n    //       setDataLoaded(true);\n    //     })\n    //     .catch(\n    //       err => {\n    //         console.warn(`ERROR! ${err}`)\n    //         setLoading(false);\n    //       }\n    //     );\n\n    var optionsq = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  };\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGeneratorsLoaded(true);\n        setGenerators(response.generators); // fetchData({period: dateRange, groupBy: groupBy});\n      }\n    });\n  };\n\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este año'];\n\n  var change = function change(ev) {};\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  }; // const options2 =  {\n  //   responsive: true,\n  //   animation: {duration: loading ? 0 : 1000},\n  //   interaction: {\n  //     mode: 'index',\n  //     intersect: false,\n  //   },\n  //   stacked: false,\n  //   scales: {\n  //     y: {\n  //       type: 'linear',\n  //       display: true,\n  //       position: 'left',\n  //     },\n  //     y1: {\n  //       type: 'linear',\n  //       display: true,\n  //       position: 'right',\n  //       // grid line settings\n  //       grid: {\n  //         drawOnChartArea: false, // only want the grid lines for one axis to show up\n  //       },\n  //     },\n  //   },\n  // };\n\n  var selectGenerator = function selectGenerator(id) {\n    var newSelected = selectedGenerators;\n    newSelected = newSelected.includes(id) ? newSelected.filter(function (i) {\n      return i !== id;\n    }) // remove item\n    : [].concat(_toConsumableArray(newSelected), [id]); // add item\n\n    setSelectedGenerators(newSelected);\n  };\n\n  var filterGenerators = function filterGenerators() {\n    setGeneratorsSelected(true);\n    fetchData({\n      period: dateRange,\n      groupBy: groupBy\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !generatorsSelected ? /*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"traffic\",\n          className: \"card-title mb-0\",\n          children: \"Choose the generators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"9\",\n            children: generatorsLoaded && generators.map(function (gen, index) {\n              return /*#__PURE__*/_jsxDEV(CButton, {\n                style: {\n                  backgroundColor: colors[index],\n                  color: 'white'\n                },\n                className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\",\n                onClick: function onClick() {\n                  return selectGenerator(gen.id);\n                },\n                id: gen.id,\n                children: gen.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"3\",\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"primary\",\n              className: \"mx-2\",\n              onClick: function onClick() {\n                return filterGenerators();\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"7\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"traffic\",\n              className: \"card-title mb-0\",\n              children: \"Performance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"small text-medium-emphasis\",\n              children: getDateLabel(dateRange)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"5\",\n            className: \"text-right d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4,\n                minWidth: '60px'\n              },\n              children: \"Group by\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n              value: groupBy,\n              style: {\n                maxWidth: '150px'\n              },\n              disabled: loading,\n              onChange: function onChange(ev) {\n                setGroupBy(ev.target.value);\n                fetchData({\n                  period: dateRange,\n                  groupBy: ev.target.value\n                });\n              },\n              custom: true,\n              name: \"period\",\n              id: \"period\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"day\",\n                children: \"Day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"week\",\n                selected: true,\n                children: \"Week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"month\",\n                children: \"Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4\n              },\n              children: \"Period\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n              value: dateRange,\n              options: ['cm', 'cy', '12w', '12m', 'x', 'xx'],\n              disabled: loading,\n              onChange: function onChange(value) {\n                setDateRange(value);\n                fetchData({\n                  period: value,\n                  groupBy: groupBy\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(CRow, {\n          className: \"py-3 mb-4 mx-2 bg-light\",\n          style: \"border-radius: 3px\",\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"9\",\n            children: generatorsLoaded && generators.map(function (gen, index) {\n              return /*#__PURE__*/_jsxDEV(CButton, {\n                style: {\n                  backgroundColor: colors[index],\n                  color: 'white'\n                },\n                className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\",\n                onClick: function onClick() {\n                  return selectGenerator(gen.id);\n                },\n                id: gen.id,\n                children: gen.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"3\",\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"primary\",\n              className: \"mx-2\",\n              onClick: function onClick() {\n                return filterGenerators();\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, _this), !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Performance Index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: graphData,\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Production and Wind Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: graphData2,\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Time-Based Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: graphData3,\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(CRow, {\n          style: {\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(CSpinner, {\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"a4FwQsZxdJAVLbZE1eSR2ee8GLE=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/performance/performance.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardHeader","CRow","CCol","CButton","CSelect","CSpinner","Fade","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Line","generatePath","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","graphData2","setGraphData2","graphData3","setGraphData3","generator","setGenerator","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","generatorsSelected","setGeneratorsSelected","selectedGenerators","setSelectedGenerators","park","setPark","date","setDate","dateRange","setDateRange","groupBy","setGroupBy","data","setData","loading","setLoading","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","generatorsButtons","setGeneratorsButtons","colors","fetchData","optionsq","loadGenerators","then","response","error","dataSets","parks","dates","change","ev","options","animation","duration","selectGenerator","id","newSelected","includes","filter","i","filterGenerators","period","map","gen","index","backgroundColor","color","name","lineHeight","minWidth","maxWidth","target","value","marginBottom","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CSpinner,\r\n  Fade\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport { generatePath } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\n// var mixedChart = new Chart(ctx, {\r\n//     data: {\r\n//         datasets: [\r\n//         {\r\n//             type: 'line',\r\n//             label: 'Line Dataset',\r\n//             data: [50, 50, 50, 50],\r\n//         }],\r\n//         labels: ['January', 'February', 'March', 'April']\r\n//     },\r\n//     // options: options\r\n// });\r\n\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({ labels: [], datasets: [] });\r\n  const [graphData2, setGraphData2] = useState({labels: [],datasets: [] });\r\n  const [graphData3, setGraphData3] = useState({labels: [],datasets: [] });\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [generatorsButtons, setGeneratorsButtons] = useState(null);\r\n  const colors = [\r\n    '#003f5c',\r\n    '#374c80',\r\n    '#7a5195',\r\n    '#bc5090',\r\n    '#ef5675',\r\n    '#ff764a',\r\n    '#ffa600',\r\n    '#003f5c',\r\n    '#374c80',\r\n    '#7a5195',\r\n    '#bc5090',\r\n    '#ef5675',\r\n    '#ff764a',\r\n    '#ffa600'\r\n  ];\r\n\r\n  const fetchData = (optionsq = {}) => {\r\n\r\n    // const {period, groupBy} = options\r\n\r\n    // setLoading(true);\r\n\r\n    // const body = {}\r\n\r\n    // body.generators = selectedGenerators;\r\n    // if (period && period.split('--').length==2) {\r\n    //   body.from = period.split('--')[0]\r\n    //   body.to = period.split('--')[1]\r\n    // } else {\r\n    //   body.period = period\r\n    // }\r\n    // body.groupBy = groupBy\r\n\r\n  //   DataAPI({\r\n  //     endpoint: 'chart/performanceIndex',\r\n  //     method: 'POST',\r\n  //     body: body\r\n  //   })\r\n  //     .then(function (responseData) {\r\n\r\n  //       setLoading(false);\r\n\r\n  //       if (responseData.error) {\r\n  //         setDataLoadError(true);\r\n  //         if (responseData.error.message) {\r\n  //         return(alert(responseData.error.message))\r\n  //         } else {\r\n  //         return(alert(responseData.error)) \r\n  //         }\r\n  //       }\r\n\r\n  //       const data = {\r\n  //         labels: [],\r\n  //         datasets: [],\r\n  //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n  //       }\r\n  //       const data2 = {\r\n  //         labels: [],\r\n  //         datasets: [],\r\n  //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n  //       }\r\n  //       const data3 = {\r\n  //         labels: [],\r\n  //         datasets: [],\r\n  //         backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n  //       }\r\n\r\n\r\n  //       responseData.data.forEach((rDs) => {\r\n\r\n  //         const dataset = {\r\n  //           labels: [],\r\n  //           label: rDs.name,\r\n  //           backgroundColor: colors.pop(),\r\n  //           data: [],\r\n  //           // hidden: rDs.name!='Total'\r\n  //         };\r\n  //         const dataset2y = {\r\n  //           labels: [],\r\n  //           label: rDs.name,\r\n  //           backgroundColor: colors.pop(),\r\n  //           data: [],\r\n  //           yAxisID: 'y'\r\n  //           // hidden: rDs.name!='Total'\r\n  //         };\r\n  //         const dataset2y1 = {\r\n  //           labels: [],\r\n  //           label: rDs.name,\r\n  //           backgroundColor: colors.pop(),\r\n  //           data: [],\r\n  //           yAxisID: 'y1'\r\n  //           // hidden: rDs.name!='Total'\r\n  //         };\r\n\r\n  //         const dataset3 = {\r\n  //           labels: [],\r\n  //           label: rDs.name,\r\n  //           backgroundColor: colors.pop(),\r\n  //           data: [],\r\n  //           // hidden: rDs.name!='Total'\r\n  //         };\r\n\r\n\r\n  //         rDs.data.graph.forEach((rD) => {\r\n  //           const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\r\n  //           dataset.labels.push(label);\r\n  //           dataset2y.labels.push(label);\r\n  //           dataset2y1.labels.push(label);\r\n  //           dataset3.labels.push(label);\r\n  //           dataset.data.push(rD.performance)\r\n  //           dataset2y.data.push(rD.power)\r\n  //           dataset2y1.data.push(rD.windspeed)\r\n  //           dataset3.data.push(rD.availability)\r\n\r\n            \r\n  //         });\r\n\r\n  //         dataset.labels.reverse();\r\n  //         dataset.data.reverse();\r\n  //         dataset2y.labels.reverse();\r\n  //         dataset2y.data.reverse();\r\n  //         dataset2y1.labels.reverse();\r\n  //         dataset2y1.data.reverse();\r\n  //         dataset3.labels.reverse();\r\n  //         dataset3.data.reverse();\r\n\r\n  //         data.datasets.push(dataset);\r\n  //         data2.datasets.push([dataset2y,dataset2y1]);\r\n  //         data3.datasets.push(dataset3);\r\n\r\n  //       });\r\n\r\n  //       responseData.data[0].data.graph.forEach((rD) => {\r\n  //         const rDfrom = rD.from;\r\n  //         const rDto = rD.to;\r\n  //         const label = (groupBy == \"day\") ? `${formatDate(rD.from, 'noyear')}` : `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\r\n  //         data.labels.push(label);\r\n  //         data2.labels.push(label);\r\n  //         data3.labels.push(label);\r\n\r\n  //       });\r\n\r\n  //       data.labels.reverse();\r\n\r\n  //       setGraphData(data);\r\n  //       setGraphData2(data2);\r\n  //       setGraphData3(data3);\r\n  //       setDataLoaded(true);\r\n\r\n  //     })\r\n  //     .catch(\r\n  //       err => {\r\n  //         console.warn(`ERROR! ${err}`)\r\n  //         setLoading(false);\r\n  //       }\r\n  //     );\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  const loadGenerators = () => {\r\n  \r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n  \r\n          setGeneratorsLoaded(true);\r\n          setGenerators(response.generators);\r\n  \r\n          // fetchData({period: dateRange, groupBy: groupBy});\r\n  \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n  ]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este año'\r\n  ]\r\n\r\n\r\n  const change = (ev) => {\r\n  }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n  // const options2 =  {\r\n  //   responsive: true,\r\n  //   animation: {duration: loading ? 0 : 1000},\r\n  //   interaction: {\r\n  //     mode: 'index',\r\n  //     intersect: false,\r\n  //   },\r\n  //   stacked: false,\r\n  //   scales: {\r\n  //     y: {\r\n  //       type: 'linear',\r\n  //       display: true,\r\n  //       position: 'left',\r\n  //     },\r\n  //     y1: {\r\n  //       type: 'linear',\r\n  //       display: true,\r\n  //       position: 'right',\r\n  //       // grid line settings\r\n  //       grid: {\r\n  //         drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n  //       },\r\n  //     },\r\n  //   },\r\n  // };\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setGeneratorsSelected(true);\r\n    fetchData({period: dateRange, groupBy: groupBy})\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {!generatorsSelected ?\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n              Choose the generators\r\n            </h4>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow>\r\n              <CCol sm=\"9\">\r\n              {generatorsLoaded && \r\n                generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:colors[index],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.name}\r\n                    </CButton>\r\n                ))\r\n              }\r\n              </CCol>\r\n              <CCol sm=\"3\" className=\"text-right\">\r\n                <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardBody>\r\n        </CCard>\r\n      :\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n\r\n              <CCol sm=\"7\">\r\n                <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                  Performance\r\n                </h3>\r\n                <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n                </CCol>\r\n\r\n                <CCol sm=\"5\" className=\"text-right d-flex\">\r\n                  <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                  <CSelect value={groupBy} style={{maxWidth:'150px'}} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); fetchData({period: dateRange, groupBy: ev.target.value});}} custom name=\"period\" id=\"period\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\" selected>Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                  </CSelect>\r\n                  <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4}}>Period</h6>\r\n                  <DateFilter value={dateRange} options={['cm','cy','12w','12m','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData({period: value, groupBy: groupBy});}} />\r\n                \r\n                </CCol>\r\n            </CRow>\r\n\r\n          </CCardHeader>\r\n\r\n          <CCardBody>\r\n\r\n            <CRow className={\"py-3 mb-4 mx-2 bg-light\"} style={\"border-radius: 3px\"}>\r\n              <CCol sm=\"9\">\r\n              {generatorsLoaded && \r\n                generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:colors[index],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \"btn-generator mx-2\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.name}\r\n                    </CButton>\r\n                ))\r\n              }\r\n              </CCol>\r\n              <CCol sm=\"3\" className=\"text-right\">\r\n                <CButton color=\"primary\" className=\"mx-2\" onClick={() => filterGenerators()} >Submit</CButton>\r\n              </CCol>\r\n            </CRow>\r\n\r\n            {!loading || dataLoadError ?\r\n\r\n              <div>\r\n                <div style={{marginBottom:'50px'}}>\r\n                  <h4 className=\"pb-2 mb-4 border-bottom\" >Performance Index</h4>\r\n                  <Line data={graphData} options={options} />\r\n                </div>\r\n\r\n                <div style={{marginBottom:'50px'}}>\r\n                  <h4 className=\"pb-2 mb-4 border-bottom\" >Production and Wind Speed</h4>\r\n                  <Line data={graphData2} options={options} />\r\n                </div>\r\n\r\n                <div style={{marginBottom:'50px'}}>\r\n                  <h4 className=\"pb-2 mb-4 border-bottom\" >Time-Based Availability</h4>\r\n                  <Line data={graphData3} options={options} />\r\n                </div>\r\n              </div>\r\n\r\n            :\r\n              <CRow style={{justifyContent:'center'}}>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </CRow>\r\n            }\r\n            \r\n          </CCardBody>\r\n\r\n        </CCard>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}