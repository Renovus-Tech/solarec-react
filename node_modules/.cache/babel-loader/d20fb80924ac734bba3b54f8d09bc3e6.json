{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;\n\nvar _t = require(\"@babel/types\");\n\nvar assertExpressionStatement = _t.assertExpressionStatement;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: function code(str) {\n      return \"/* @babel/template */;\\n\".concat(str);\n    },\n    validate: function validate() {},\n    unwrap: function unwrap(ast) {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nvar smart = makeStatementFormatter(function (body) {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nvar statements = makeStatementFormatter(function (body) {\n  return body;\n});\nexports.statements = statements;\nvar statement = makeStatementFormatter(function (body) {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nvar expression = {\n  code: function code(str) {\n    return \"(\\n\".concat(str, \"\\n)\");\n  },\n  validate: function validate(ast) {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: function unwrap(_ref) {\n    var program = _ref.program;\n\n    var _program$body = _slicedToArray(program.body, 1),\n        stmt = _program$body[0];\n\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nvar program = {\n  code: function code(str) {\n    return str;\n  },\n  validate: function validate() {},\n  unwrap: function unwrap(ast) {\n    return ast.program;\n  }\n};\nexports.program = program;","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/node_modules/@babel/template/lib/formatters.js"],"names":["Object","defineProperty","exports","value","statements","statement","smart","program","expression","_t","require","assertExpressionStatement","makeStatementFormatter","fn","code","str","validate","unwrap","ast","body","slice","length","Error","start","stmt"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assertExpressionStatement\n} = _t;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;"]},"metadata":{},"sourceType":"script"}