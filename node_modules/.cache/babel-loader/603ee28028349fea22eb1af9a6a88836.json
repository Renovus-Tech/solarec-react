{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assumptionsNames = void 0;\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\nexports.validate = validate;\n\nvar _plugin = require(\"../plugin\");\n\nvar _removed = require(\"./removed\");\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nvar ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  cloneInputAst: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nvar BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nvar NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList,\n  targets: _optionAssertions.assertTargets,\n  browserslistConfigFile: _optionAssertions.assertConfigFileSearch,\n  browserslistEnv: _optionAssertions.assertString\n};\nvar COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  assumptions: _optionAssertions.assertAssumptions,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n{\n  Object.assign(COMMON_VALIDATORS, {\n    getModuleId: _optionAssertions.assertFunction,\n    moduleRoot: _optionAssertions.assertString,\n    moduleIds: _optionAssertions.assertBoolean,\n    moduleId: _optionAssertions.assertString\n  });\n}\nvar assumptionsNames = new Set([\"arrayLikeIsIterable\", \"constantReexports\", \"constantSuper\", \"enumerableModuleMeta\", \"ignoreFunctionLength\", \"ignoreToPrimitiveHint\", \"iterableIsArray\", \"mutableTemplateObject\", \"noClassCalls\", \"noDocumentAll\", \"noIncompleteNsImportDetection\", \"noNewArrows\", \"objectRestNoSymbols\", \"privateFieldsAsProperties\", \"pureGetters\", \"setClassMethods\", \"setComputedProperties\", \"setPublicClassFields\", \"setSpreadProperties\", \"skipForOfIteratorClosing\", \"superIsCallableConstructor\"]);\nexports.assumptionsNames = assumptionsNames;\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  var type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(function (key) {\n    var optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is not allowed in preset options\"));\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is only allowed in root programmatic options\"));\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is not allowed in .babelrc or \\\"extends\\\"ed files, only in root programmatic options, \") + \"or babel.config.js/config file options\");\n      }\n\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is only allowed in root programmatic options, or babel.config.js/config file options\"));\n    }\n\n    var validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  var key = loc.name;\n\n  if (_removed.default[key]) {\n    var _removed$default$key = _removed.default[key],\n        message = _removed$default$key.message,\n        _removed$default$key$ = _removed$default$key.version,\n        version = _removed$default$key$ === void 0 ? 5 : _removed$default$key$;\n    throw new Error(\"Using removed Babel \".concat(version, \" option: \").concat((0, _optionAssertions.msg)(loc), \" - \").concat(message));\n  } else {\n    var unknownOptErr = new Error(\"Unknown option: \".concat((0, _optionAssertions.msg)(loc), \". Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\"));\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside of another .env block\"));\n  }\n\n  var parent = loc.parent;\n  var obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var envName = _Object$keys[_i];\n      var env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      var envLoc = {\n        type: \"env\",\n        name: envName,\n        parent: parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside an .env block\"));\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside an .overrides block\"));\n  }\n\n  var parent = loc.parent;\n  var arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    var _iterator = _createForOfIteratorHelper(arr.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            item = _step$value[1];\n\n        var objLoc = (0, _optionAssertions.access)(loc, index);\n        var env = (0, _optionAssertions.assertObject)(objLoc, item);\n        if (!env) throw new Error(\"\".concat((0, _optionAssertions.msg)(objLoc), \" must be an object\"));\n        var overridesLoc = {\n          type: \"overrides\",\n          index: index,\n          parent: parent\n        };\n        validateNested(overridesLoc, env);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return arr;\n}\n\nfunction checkNoUnwrappedItemOptionPairs(items, index, type, e) {\n  if (index === 0) return;\n  var lastItem = items[index - 1];\n  var thisItem = items[index];\n\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\n    e.message += \"\\n- Maybe you meant to use\\n\" + \"\\\"\".concat(type, \"s\\\": [\\n  [\\\"\").concat(lastItem.file.request, \"\\\", \").concat(JSON.stringify(thisItem.value, undefined, 2), \"]\\n]\\n\") + \"To be a valid \".concat(type, \", its name and options should be wrapped in a pair of brackets\");\n  }\n}","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/lib/config/validation/options.js"],"names":["Object","defineProperty","exports","value","assumptionsNames","checkNoUnwrappedItemOptionPairs","validate","_plugin","require","_removed","_optionAssertions","ROOT_VALIDATORS","cwd","assertString","root","rootMode","assertRootMode","configFile","assertConfigFileSearch","caller","assertCallerMetadata","filename","filenameRelative","code","assertBoolean","ast","cloneInputAst","envName","BABELRC_VALIDATORS","babelrc","babelrcRoots","assertBabelrcSearch","NONPRESET_VALIDATORS","extends","ignore","assertIgnoreList","only","targets","assertTargets","browserslistConfigFile","browserslistEnv","COMMON_VALIDATORS","inputSourceMap","assertInputSourceMap","presets","assertPluginList","plugins","passPerPreset","assumptions","assertAssumptions","env","assertEnvSet","overrides","assertOverridesList","test","assertConfigApplicableTest","include","exclude","retainLines","comments","shouldPrintComment","assertFunction","compact","assertCompact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceType","assertSourceType","wrapPluginVisitorMethod","highlightCode","sourceMaps","assertSourceMaps","sourceMap","sourceFileName","sourceRoot","parserOpts","assertObject","generatorOpts","assign","getModuleId","moduleRoot","moduleIds","moduleId","Set","getSource","loc","type","source","parent","opts","validateNested","assertNoDuplicateSourcemap","keys","forEach","key","optLoc","name","Error","msg","validator","throwUnknownError","default","message","version","unknownOptErr","has","obj","prototype","hasOwnProperty","call","access","envLoc","arr","assertArray","entries","index","item","objLoc","overridesLoc","items","e","lastItem","thisItem","file","options","undefined","request","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assumptionsNames = void 0;\nexports.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;\nexports.validate = validate;\n\nvar _plugin = require(\"../plugin\");\n\nvar _removed = require(\"./removed\");\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  cloneInputAst: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList,\n  targets: _optionAssertions.assertTargets,\n  browserslistConfigFile: _optionAssertions.assertConfigFileSearch,\n  browserslistEnv: _optionAssertions.assertString\n};\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  assumptions: _optionAssertions.assertAssumptions,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n{\n  Object.assign(COMMON_VALIDATORS, {\n    getModuleId: _optionAssertions.assertFunction,\n    moduleRoot: _optionAssertions.assertString,\n    moduleIds: _optionAssertions.assertBoolean,\n    moduleId: _optionAssertions.assertString\n  });\n}\nconst assumptionsNames = new Set([\"arrayLikeIsIterable\", \"constantReexports\", \"constantSuper\", \"enumerableModuleMeta\", \"ignoreFunctionLength\", \"ignoreToPrimitiveHint\", \"iterableIsArray\", \"mutableTemplateObject\", \"noClassCalls\", \"noDocumentAll\", \"noIncompleteNsImportDetection\", \"noNewArrows\", \"objectRestNoSymbols\", \"privateFieldsAsProperties\", \"pureGetters\", \"setClassMethods\", \"setComputedProperties\", \"setPublicClassFields\", \"setSpreadProperties\", \"skipForOfIteratorClosing\", \"superIsCallableConstructor\"]);\nexports.assumptionsNames = assumptionsNames;\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  const type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  const key = loc.name;\n\n  if (_removed.default[key]) {\n    const {\n      message,\n      version = 5\n    } = _removed.default[key];\n    throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\n  } else {\n    const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\n  }\n\n  const parent = loc.parent;\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (const envName of Object.keys(obj)) {\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\n  }\n\n  const parent = loc.parent;\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = (0, _optionAssertions.access)(loc, index);\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent\n      };\n      validateNested(overridesLoc, env);\n    }\n  }\n\n  return arr;\n}\n\nfunction checkNoUnwrappedItemOptionPairs(items, index, type, e) {\n  if (index === 0) return;\n  const lastItem = items[index - 1];\n  const thisItem = items[index];\n\n  if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === \"object\") {\n    e.message += `\\n- Maybe you meant to use\\n` + `\"${type}s\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(thisItem.value, undefined, 2)}]\\n]\\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}"]},"metadata":{},"sourceType":"script"}