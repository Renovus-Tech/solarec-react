{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\dashboard\\\\Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CDataTable, CRow, CCol, CSpinner, CSelect, CBadge } from '@coreui/react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport DataAPI from '../../helpers/DataAPI.js';\nimport { formatDate2, round } from '../../helpers/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  var _useState = useState('cm'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('day'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generator = _useState8[0],\n      setGenerator = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      lastUpdated = _useState10[0],\n      setLastUpdated = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dataLoaded = _useState12[0],\n      setDataLoaded = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      dataLoadError = _useState16[0],\n      setDataLoadError = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      turbinesTablesData = _useState18[0],\n      setTurbinesTablesData = _useState18[1];\n\n  var fetchData = function fetchData() {\n    var body = {};\n    setLoading(true);\n    DataAPI({\n      'endpoint': 'chart/dashboard',\n      'body': body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        setDataLoadError(true);\n\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      setLastUpdated(formatDate2(responseData.dateGenerated));\n      var turbinesTablesData = [];\n      responseData.locations.forEach(function (rL, index) {\n        if (rL.generators.length > 0) {\n          var park = rL.name;\n          var productionTotal = 0;\n          var windSpeedTotal = 0;\n          var turbinesStatus = rL.generators.map(function (d) {\n            var line = {};\n            line.turbine = d.code;\n            line.indicator = d.dataN.indicator;\n            line.production = d.data.production;\n            line.windSpeed = d.data.windSpeed;\n            line.status = d.data.status;\n            productionTotal += d.data.production;\n            windSpeedTotal += d.data.windSpeed;\n            return line;\n          });\n          var total = {\n            turbine: \"Total\",\n            indicator: \"\",\n            production: round(productionTotal),\n            windSpeed: round(windSpeedTotal / rL.generators.length),\n            status: \"\"\n          }; // turbinesStatus.push(total)\n          // [total].concat(turbinesStatus);\n\n          var tableData = {\n            park: park,\n            items: [total].concat(turbinesStatus),\n            fields: ['turbine', {\n              key: 'indicator',\n              label: ''\n            }, {\n              key: 'production',\n              label: 'Production (KWh)'\n            }, {\n              key: 'windSpeed',\n              label: 'Wind Speed (m/s)'\n            }, 'status']\n          };\n          turbinesTablesData.push(tableData);\n        }\n      });\n      setTurbinesTablesData(turbinesTablesData);\n    });\n  };\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerators(response.generators);\n        fetchData();\n      }\n    });\n  };\n\n  var getBadge = function getBadge(status) {\n    switch (status) {\n      case 'green':\n        return 'success';\n\n      case 'red':\n        return 'danger';\n\n      default:\n        return 'danger';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Turbines Current Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-medium-emphasis\",\n            children: [\"Last updated on: \", lastUpdated]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, _this), !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '50px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: turbinesTablesData.length > 0 && turbinesTablesData.map(function (park) {\n            return /*#__PURE__*/_jsxDEV(CCol, {\n              xl: \"6\",\n              className: \"px-sm-4 mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: park.park\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(CDataTable, {\n                addTableClasses: \"monitor-park-table\",\n                striped: true,\n                items: park.items,\n                fields: park.fields // itemsPerPage={15}\n                // pagination\n                ,\n                sorter: true,\n                scopedSlots: {\n                  'indicator': function indicator(item) {\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(CBadge, {\n                        color: getBadge(item.indicator)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 197,\n                        columnNumber: 31\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 29\n                    }, _this);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }, _this) : /*#__PURE__*/_jsxDEV(CCardBody, {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CSpinner, {\n        className: \"loading-spinner\",\n        color: \"#321fdb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Dashboard, \"388MUELFOOpa686vne3mqIMcNY0=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/dashboard/Dashboard.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CDataTable","CRow","CCol","CSpinner","CSelect","CBadge","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","DataAPI","formatDate2","round","register","Dashboard","dateRange","setDateRange","groupBy","setGroupBy","generators","setGenerators","generator","setGenerator","lastUpdated","setLastUpdated","dataLoaded","setDataLoaded","loading","setLoading","dataLoadError","setDataLoadError","turbinesTablesData","setTurbinesTablesData","fetchData","body","then","responseData","error","message","alert","dateGenerated","locations","forEach","rL","index","length","park","name","productionTotal","windSpeedTotal","turbinesStatus","map","d","line","turbine","code","indicator","dataN","production","data","windSpeed","status","total","tableData","items","concat","fields","key","label","push","loadGenerators","response","getBadge","marginBottom","item","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CSelect,\r\n  CBadge\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nimport DataAPI from '../../helpers/DataAPI.js'\r\n\r\nimport { formatDate2, round } from '../../helpers/utils.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [turbinesTablesData, setTurbinesTablesData] = useState([]);\r\n\r\n  const fetchData = () => {\r\n\r\n    const body = {}\r\n    setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/dashboard',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      setLastUpdated(formatDate2(responseData.dateGenerated));\r\n\r\n      const turbinesTablesData = [];\r\n      responseData.locations.forEach((rL,index) => {\r\n        if(rL.generators.length > 0) {\r\n          const park = rL.name;\r\n          let productionTotal = 0;\r\n          let windSpeedTotal = 0;\r\n          const turbinesStatus = rL.generators.map((d) => {\r\n            let line = {}\r\n            line.turbine = d.code;\r\n            line.indicator = d.dataN.indicator;\r\n            line.production = d.data.production;\r\n            line.windSpeed = d.data.windSpeed;\r\n            line.status = d.data.status;\r\n            productionTotal += d.data.production;\r\n            windSpeedTotal += d.data.windSpeed;\r\n            return line;\r\n          });\r\n\r\n          const total =  {\r\n            turbine: \"Total\",\r\n            indicator: \"\",\r\n            production: round(productionTotal),\r\n            windSpeed: round(windSpeedTotal / rL.generators.length),\r\n            status: \"\"\r\n          };\r\n          // turbinesStatus.push(total)\r\n          // [total].concat(turbinesStatus);\r\n      \r\n          const tableData = {\r\n            park: park,\r\n            items: [total].concat(turbinesStatus),\r\n            fields:  [\r\n              'turbine',\r\n              { key: 'indicator', label: '' },\r\n              { key: 'production', label: 'Production (KWh)' },\r\n              { key: 'windSpeed', label: 'Wind Speed (m/s)' },\r\n              'status'\r\n            ]\r\n          }\r\n    \r\n          turbinesTablesData.push(tableData);\r\n        }\r\n        \r\n      });\r\n\r\n      setTurbinesTablesData(turbinesTablesData);\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (!dataLoaded && response  && !response.error) {\r\n          setGenerators(response.generators);\r\n          fetchData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return 'danger'\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"12\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Turbines Current Status\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Last updated on: {lastUpdated}</div>\r\n              </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n            \r\n\r\n          <div style={{marginBottom:'50px'}}>\r\n            <CRow>\r\n            \r\n              { turbinesTablesData.length > 0 &&\r\n                 turbinesTablesData.map(park => (  \r\n                <CCol xl=\"6\" className=\"px-sm-4 mb-4\">\r\n                  <h5>{park.park}</h5>\r\n                  <CDataTable\r\n                      addTableClasses=\"monitor-park-table\"\r\n                      striped\r\n                      items={park.items}\r\n                      fields={park.fields}\r\n                      // itemsPerPage={15}\r\n                      // pagination\r\n                      sorter\r\n                      scopedSlots = {{\r\n                        'indicator':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.indicator)}>\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n                      }}\r\n                    />\r\n                </CCol>\r\n                ))\r\n              }\r\n\r\n            </CRow>\r\n          </div>\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"]},"metadata":{},"sourceType":"module"}