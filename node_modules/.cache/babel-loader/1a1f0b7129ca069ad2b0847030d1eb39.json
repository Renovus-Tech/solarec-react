{"ast":null,"code":"import _objectSpread from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\wind\\\\budget\\\\budget.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardHeader, CRow, CCol, CButton, CSelect, CSpinner, CDataTable, CContainer } from '@coreui/react';\nimport DataAPI from '../../../../helpers/DataAPI.js';\nimport { round, formatNumber } from '../../../../helpers/utils.js';\nimport { getCookie, setCookie } from '../../../../helpers/sessionCookie.js';\nimport { Bar } from 'react-chartjs-2';\nimport * as FileSaver from 'file-saver';\nimport XLSX from 'sheetjs-style';\nimport { async } from 'regenerator-runtime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ExportExcel = function ExportExcel(_ref) {\n  var excelData = _ref.excelData,\n      fileName = _ref.fileName;\n  var fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  var fileExtension = '.xlsx';\n\n  var exportToExcel = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var ws, wb, excelBuffer, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ws = XLSX.utils.json_to_sheet(excelData);\n              wb = {\n                Sheets: {\n                  'data': ws\n                },\n                SheetNames: ['data']\n              };\n              excelBuffer = XLSX.write(wb, {\n                bookType: 'xlsx',\n                type: 'array'\n              });\n              data = new Blob([excelBuffer]);\n              FileSaver.saveAs(data, fileName + fileExtension);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function exportToExcel() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n\n_c = ExportExcel;\n\nvar Budget = function Budget() {\n  _s();\n\n  var currentMonth = new Date().getMonth();\n  var currentFiscalYear = currentMonth < getCookie('fiscalYearEndMonth') ? new Date().getFullYear() : new Date().getFullYear() + 1;\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(currentFiscalYear),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fiscalYear = _useState8[0],\n      setFiscalYear = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      addEstimatedCurtailments = _useState10[0],\n      setAddEstimatedCurtailments = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      parks = _useState12[0],\n      setParks = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      parksLoaded = _useState14[0],\n      setParksLoaded = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      park = _useState16[0],\n      setPark = _useState16[1];\n\n  var _useState17 = useState(\"Estimate 1\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      estimatesLabel1 = _useState18[0],\n      setEstimatesLabel1 = _useState18[1];\n\n  var _useState19 = useState(\"Estimate 2\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      estimatesLabel2 = _useState20[0],\n      setEstimatesLabel2 = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      difference1 = _useState22[0],\n      setDifference1 = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      difference2 = _useState24[0],\n      setDifference2 = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      cumulativeDifference1 = _useState26[0],\n      setCumulativeDifference1 = _useState26[1];\n\n  var _useState27 = useState([]),\n      _useState28 = _slicedToArray(_useState27, 2),\n      cumulativeDifference2 = _useState28[0],\n      setCumulativeDifference2 = _useState28[1];\n\n  var _useState29 = useState([]),\n      _useState30 = _slicedToArray(_useState29, 2),\n      tableData1 = _useState30[0],\n      setTableData1 = _useState30[1];\n\n  var _useState31 = useState([]),\n      _useState32 = _slicedToArray(_useState31, 2),\n      tableData2 = _useState32[0],\n      setTableData2 = _useState32[1];\n\n  var _useState33 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState34 = _slicedToArray(_useState33, 2),\n      graphData1 = _useState34[0],\n      setGraphData1 = _useState34[1];\n\n  var _useState35 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState36 = _slicedToArray(_useState35, 2),\n      graphData2 = _useState36[0],\n      setGraphData2 = _useState36[1];\n\n  useEffect(function () {\n    fetchParks();\n  }, []);\n\n  var fetchParks = function fetchParks() {\n    DataAPI({\n      'endpoint': 'security/authenticate/location',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.status == 401) {\n          setCookie('name', '');\n          setCookie('parkType', '');\n          window.location.reload();\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      if (!parksLoaded) {\n        setParks(response);\n        setParksLoaded(true);\n        setPark(response[0].id);\n      }\n    });\n  };\n\n  var fetchData = function fetchData() {\n    setLoading(true);\n    var body = {};\n    body.locIds = [park];\n    body.fiscalYear = fiscalYear;\n    body.includeCurtailments = addEstimatedCurtailments;\n    DataAPI({\n      'endpoint': 'chart/budget',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      setDataLoaded(true); // Current Data in grid\n\n      var currentData = response.currentData;\n      var tableData = [];\n      tableData.push({\n        label: 'Actual Production',\n        value: formatNumber(round(currentData.actualProductionMwh, 1)) + \" MWh\"\n      });\n      currentData.estimates.forEach(function (x) {\n        tableData.push({\n          label: x.label,\n          value: formatNumber(x.estimateMwh) + \" MWh\"\n        });\n      });\n      setTableData1(tableData); //Chart Budget\n\n      var budgetData = response.budgetData;\n      if (budgetData.length == 0) return;\n      setEstimatesLabel1(budgetData[0].estimates[0].label);\n      setEstimatesLabel2(budgetData[0].estimates[1].label);\n      var graphData = {\n        labels: budgetData.map(function (x, i) {\n          var startDate = new Date(x.startDate);\n          return months[startDate.getMonth()];\n        }),\n        datasets: [{\n          label: budgetData[0].estimates[0].label,\n          data: budgetData.map(function (x, i) {\n            return x.estimates[0].estimateMwh;\n          }),\n          borderColor: '#bc5090',\n          backgroundColor: '#bc5090',\n          order: 1\n        }, {\n          label: budgetData[0].estimates[1].label,\n          data: budgetData.map(function (x, i) {\n            return x.estimates[1].estimateMwh;\n          }),\n          borderColor: '#7a5195',\n          backgroundColor: '#7a5195',\n          order: 1\n        }, {\n          label: 'Actual Production',\n          data: budgetData.map(function (x, i) {\n            return x.actualProductionMwh;\n          }),\n          borderColor: '#ffa600',\n          backgroundColor: '#ffa600',\n          type: 'line',\n          order: 0\n        }]\n      };\n      var dif1 = budgetData.map(function (x, i) {\n        return x.estimates[0].actualVsEstimate;\n      });\n      var dif2 = budgetData.map(function (x, i) {\n        return x.estimates[1].actualVsEstimate;\n      });\n      setDifference1(dif1);\n      setDifference2(dif2);\n      setGraphData1(graphData);\n    });\n    DataAPI({\n      'endpoint': 'chart/budgetCumulative',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      setDataLoaded(true); // Current Data in grid\n\n      var currentData = response.currentData;\n      var tableData = [];\n      tableData.push({\n        label: 'Actual Production',\n        value: formatNumber(round(currentData.actualProductionMwh, 1)) + \" MWh\"\n      });\n      currentData.estimates.forEach(function (x) {\n        tableData.push({\n          label: x.label,\n          value: formatNumber(x.estimateMwh) + \" MWh\"\n        });\n      });\n      setTableData2(tableData); // Chart Cumulative Budget\n\n      var budgetData = response.budgetData;\n      if (budgetData.length == 0) return;\n      var graphData = {\n        labels: budgetData.map(function (x, i) {\n          var startDate = new Date(x.startDate);\n          return months[startDate.getMonth()];\n        }),\n        datasets: [{\n          label: budgetData[0].estimates[0].label,\n          data: budgetData.map(function (x, i) {\n            return x.estimates[0].estimateMwh;\n          }),\n          borderColor: '#bc5090',\n          backgroundColor: '#bc5090',\n          order: 1\n        }, {\n          label: budgetData[0].estimates[1].label,\n          data: budgetData.map(function (x, i) {\n            return x.estimates[1].estimateMwh;\n          }),\n          borderColor: '#7a5195',\n          backgroundColor: '#7a5195',\n          order: 1\n        }, {\n          label: 'Actual Production',\n          data: budgetData.map(function (x, i) {\n            return x.actualProductionMwh;\n          }),\n          borderColor: '#ffa600',\n          backgroundColor: '#ffa600',\n          type: 'line',\n          order: 0\n        }]\n      };\n      setCumulativeDifference1(budgetData.map(function (x, i) {\n        return x.estimates[0].actualVsEstimate;\n      }));\n      setCumulativeDifference2(budgetData.map(function (x, i) {\n        return x.estimates[1].actualVsEstimate;\n      }));\n      setGraphData2(graphData);\n    });\n  };\n\n  var options = {\n    responsive: true,\n    tooltips: {\n      enabled: true\n    }\n  };\n\n  var optionsGraph1 = _objectSpread(_objectSpread({}, options), {}, {\n    plugins: {\n      tooltip: {\n        // mode: 'index',\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            if (tooltipItem.dataset.label === \"Actual Production\") {\n              return [tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw, 1)) + ' MWh', \"% Difference vs. \" + estimatesLabel1 + \": \" + difference1[tooltipItem.dataIndex] + \" %\", \"% Difference vs. \" + estimatesLabel2 + \": \" + difference2[tooltipItem.dataIndex] + \" %\"];\n            } else {\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw, 1)) + ' MWh';\n            }\n          }\n        }\n      }\n    }\n  });\n\n  var optionsGraph2 = _objectSpread(_objectSpread({}, options), {}, {\n    plugins: {\n      tooltip: {\n        // mode: 'index',\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            if (tooltipItem.dataset.label === \"Actual Production\") {\n              return [tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw, 1)) + 'MWh', \"% Difference vs. \" + estimatesLabel1 + \": \" + cumulativeDifference1[tooltipItem.dataIndex] + \" %\", \"% Difference vs. \" + estimatesLabel2 + \": \" + cumulativeDifference2[tooltipItem.dataIndex] + \" %\"];\n            } else {\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw, 1)) + ' MWh';\n            }\n          }\n        }\n      }\n    }\n  });\n\n  var fields1 = [{\n    key: 'label',\n    label: ''\n  }, {\n    key: 'value',\n    label: 'Month to Date'\n  }];\n  var fields2 = [{\n    key: 'label',\n    label: ''\n  }, {\n    key: 'value',\n    label: 'Year to Date'\n  }];\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Budget\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"10\",\n          className: \"text-right d-flex px-2 flex-center flex-justify-end\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-3 m-0\",\n            style: {\n              lineHeight: 2.4,\n              minWidth: '64px'\n            },\n            children: \"Fiscal Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            className: 'input-sm',\n            disabled: loading,\n            custom: true,\n            name: \"fiscalYear\",\n            id: \"fiscalYear\",\n            onChange: function onChange(ev) {\n              setFiscalYear(ev.target.value);\n            },\n            children: [0, 1, 2, 3, 4].map(function (x) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: currentFiscalYear - x,\n                children: currentFiscalYear - x\n              }, currentFiscalYear - x, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 33\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-3 m-0\",\n            style: {\n              lineHeight: 2.4,\n              minWidth: '170px'\n            },\n            children: \"Add Estimated Curtailments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            className: 'input-sm',\n            disabled: loading,\n            custom: true,\n            defaultValue: \"true\",\n            name: \"addEstimatedCurtailments\",\n            id: \"addEstimatedCurtailments\",\n            onChange: function onChange(ev) {\n              setAddEstimatedCurtailments(ev.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"true\",\n              children: \"Yes\"\n            }, 'addEstimatedCurtailments-yes', false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"false\",\n              children: \"No\"\n            }, 'addEstimatedCurtailments-no', false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mr-2 ml-3 m-0\",\n            style: {\n              lineHeight: 2.4\n            },\n            children: \"Park\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n            className: 'input-md',\n            disabled: loading,\n            defaultValue: park,\n            custom: true,\n            name: \"park\",\n            id: \"park\",\n            onChange: function onChange(ev) {\n              setPark(ev.target.value);\n            },\n            children: parks && parks.map(function (park) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: park.id,\n                children: park.name\n              }, park.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            disabled: loading || !parksLoaded,\n            className: \"mr-2 ml-3\",\n            onClick: function onClick() {\n              fetchData();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: (loading || dataLoaded) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Monthly Production\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n                className: 'mb-2',\n                children: /*#__PURE__*/_jsxDEV(CCol, {\n                  sm: \"5\",\n                  children: /*#__PURE__*/_jsxDEV(CDataTable, {\n                    items: tableData1,\n                    fields: fields1,\n                    striped: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 25\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n                className: 'mb-2',\n                children: /*#__PURE__*/_jsxDEV(CCol, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: \"MWh\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 25\n                  }, _this), /*#__PURE__*/_jsxDEV(Bar, {\n                    data: graphData1,\n                    options: optionsGraph1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 25\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Cumulative Production\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n                className: 'mb-2',\n                children: /*#__PURE__*/_jsxDEV(CCol, {\n                  sm: \"5\",\n                  children: /*#__PURE__*/_jsxDEV(CDataTable, {\n                    items: tableData2,\n                    fields: fields2,\n                    striped: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 25\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 443,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n                className: 'mb-2',\n                children: /*#__PURE__*/_jsxDEV(CCol, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: \"MWh\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 454,\n                    columnNumber: 25\n                  }, _this), /*#__PURE__*/_jsxDEV(Bar, {\n                    data: graphData2,\n                    options: optionsGraph2\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 455,\n                    columnNumber: 25\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(CSpinner, {\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Budget, \"Xc0HZRApiGA+fAlpV91DtUVmngc=\");\n\n_c2 = Budget;\nexport default Budget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExportExcel\");\n$RefreshReg$(_c2, \"Budget\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/wind/budget/budget.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardHeader","CRow","CCol","CButton","CSelect","CSpinner","CDataTable","CContainer","DataAPI","round","formatNumber","getCookie","setCookie","Bar","FileSaver","XLSX","async","ExportExcel","excelData","fileName","fileType","fileExtension","exportToExcel","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","data","Blob","saveAs","Budget","currentMonth","Date","getMonth","currentFiscalYear","getFullYear","months","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","fiscalYear","setFiscalYear","addEstimatedCurtailments","setAddEstimatedCurtailments","parks","setParks","parksLoaded","setParksLoaded","park","setPark","estimatesLabel1","setEstimatesLabel1","estimatesLabel2","setEstimatesLabel2","difference1","setDifference1","difference2","setDifference2","cumulativeDifference1","setCumulativeDifference1","cumulativeDifference2","setCumulativeDifference2","tableData1","setTableData1","tableData2","setTableData2","labels","datasets","graphData1","setGraphData1","graphData2","setGraphData2","fetchParks","then","response","error","status","window","location","reload","alert","id","fetchData","body","locIds","includeCurtailments","message","currentData","tableData","push","label","value","actualProductionMwh","estimates","forEach","x","estimateMwh","budgetData","length","graphData","map","i","startDate","borderColor","backgroundColor","order","dif1","actualVsEstimate","dif2","options","responsive","tooltips","enabled","optionsGraph1","plugins","tooltip","callbacks","tooltipItem","dataset","raw","dataIndex","optionsGraph2","fields1","key","fields2","lineHeight","minWidth","ev","target","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSelect,\r\n  CSpinner,\r\n  CDataTable,\r\n  CContainer\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {round, formatNumber} from '../../../../helpers/utils.js'\r\nimport {getCookie, setCookie} from '../../../../helpers/sessionCookie.js'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport * as FileSaver from 'file-saver'\r\nimport XLSX from 'sheetjs-style'\r\nimport { async } from 'regenerator-runtime'\r\n\r\n\r\nconst ExportExcel = ({ excelData, fileName }) => {\r\n  const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n  const fileExtension = '.xlsx'\r\n\r\n  const exportToExcel = async () => {\r\n    const ws = XLSX.utils.json_to_sheet(excelData);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer])\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n    \r\n  }\r\n}\r\n\r\nconst Budget = () => {\r\n\r\n  const currentMonth = (new Date()).getMonth()\r\n  const currentFiscalYear = currentMonth < getCookie('fiscalYearEndMonth') ? new Date().getFullYear() : (new Date().getFullYear())+1\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [fiscalYear, setFiscalYear] = useState(currentFiscalYear);\r\n  const [addEstimatedCurtailments, setAddEstimatedCurtailments] = useState(true);\r\n  const [parks, setParks] = useState([]);\r\n  const [parksLoaded, setParksLoaded] = useState(false);\r\n  const [park, setPark] = useState(null);\r\n  const [estimatesLabel1, setEstimatesLabel1] = useState(\"Estimate 1\");\r\n  const [estimatesLabel2, setEstimatesLabel2] = useState(\"Estimate 2\");\r\n  const [difference1, setDifference1] = useState([]);\r\n  const [difference2, setDifference2] = useState([]);\r\n  const [cumulativeDifference1, setCumulativeDifference1] = useState([]);\r\n  const [cumulativeDifference2, setCumulativeDifference2] = useState([]);\r\n  const [tableData1, setTableData1] = useState([]);\r\n  const [tableData2, setTableData2] = useState([]);\r\n  const [graphData1, setGraphData1] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [graphData2, setGraphData2] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    fetchParks();\r\n  },[]);\r\n\r\n\r\n  const fetchParks = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'security/authenticate/location',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.status == 401) {\r\n            setCookie('name', ''); \r\n            setCookie('parkType', ''); \r\n            window.location.reload(); \r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n        \r\n        if (!parksLoaded) {\r\n          setParks(response);\r\n          setParksLoaded(true);\r\n          setPark(response[0].id)\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n    body.locIds = [park];\r\n    body.fiscalYear = fiscalYear\r\n    body.includeCurtailments  = addEstimatedCurtailments\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/budget',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setDataLoaded(true);\r\n\r\n\r\n        // Current Data in grid\r\n        const currentData = response.currentData;\r\n        const tableData = [];\r\n        tableData.push({\r\n          label: 'Actual Production',\r\n          value: formatNumber(round(currentData.actualProductionMwh,1)) + \" MWh\"\r\n        })\r\n        currentData.estimates.forEach(\r\n          x => {\r\n            tableData.push({\r\n              label: x.label,\r\n              value: formatNumber(x.estimateMwh) + \" MWh\"\r\n            })\r\n          }\r\n        )\r\n        setTableData1(tableData);\r\n\r\n\r\n        //Chart Budget\r\n        const budgetData = response.budgetData;\r\n        if (budgetData.length==0) return;\r\n        setEstimatesLabel1(budgetData[0].estimates[0].label)\r\n        setEstimatesLabel2(budgetData[0].estimates[1].label)\r\n\r\n        const graphData = {\r\n          labels: budgetData.map((x, i) => { \r\n            const startDate = new Date(x.startDate);\r\n            return months[startDate.getMonth()]; \r\n          }),\r\n          datasets: [\r\n            {\r\n              label: budgetData[0].estimates[0].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[0].estimateMwh }),\r\n              borderColor: '#bc5090',\r\n              backgroundColor: '#bc5090',\r\n              order: 1\r\n            },\r\n            {\r\n              label: budgetData[0].estimates[1].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[1].estimateMwh }),\r\n              borderColor: '#7a5195',\r\n              backgroundColor: '#7a5195',\r\n              order: 1\r\n            },\r\n            {\r\n              label: 'Actual Production',\r\n              data: budgetData.map((x, i) => { return x.actualProductionMwh }),\r\n              borderColor: '#ffa600',\r\n              backgroundColor: '#ffa600',\r\n              type: 'line',\r\n              order: 0\r\n            },\r\n          ],\r\n        }\r\n\r\n        const dif1 = budgetData.map((x, i) => { return x.estimates[0].actualVsEstimate })\r\n        const dif2 = budgetData.map((x, i) => { return x.estimates[1].actualVsEstimate })\r\n        setDifference1(dif1)\r\n        setDifference2(dif2)\r\n\r\n        setGraphData1(graphData);\r\n\r\n      }\r\n    );\r\n\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/budgetCumulative',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        setDataLoaded(true);\r\n\r\n\r\n        // Current Data in grid\r\n        const currentData = response.currentData;\r\n        const tableData = [];\r\n        tableData.push({\r\n          label: 'Actual Production',\r\n          value: formatNumber(round(currentData.actualProductionMwh,1)) + \" MWh\"\r\n        })\r\n        currentData.estimates.forEach(\r\n          x => {\r\n            tableData.push({\r\n              label: x.label,\r\n              value: formatNumber(x.estimateMwh) + \" MWh\"\r\n            })\r\n          }\r\n        )\r\n        setTableData2(tableData);\r\n\r\n\r\n        // Chart Cumulative Budget\r\n        const budgetData = response.budgetData;\r\n        if (budgetData.length==0) return;\r\n        const graphData = {\r\n          labels: budgetData.map((x, i) => { \r\n            const startDate = new Date(x.startDate);\r\n            return months[startDate.getMonth()]; \r\n          }),\r\n          datasets: [\r\n            {\r\n              label: budgetData[0].estimates[0].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[0].estimateMwh }),\r\n              borderColor: '#bc5090',\r\n              backgroundColor: '#bc5090',\r\n              order: 1\r\n            },\r\n            {\r\n              label: budgetData[0].estimates[1].label,\r\n              data: budgetData.map((x, i) => { return x.estimates[1].estimateMwh }),\r\n              borderColor: '#7a5195',\r\n              backgroundColor: '#7a5195',\r\n              order: 1\r\n            },\r\n            {\r\n              label: 'Actual Production',\r\n              data: budgetData.map((x, i) => { return x.actualProductionMwh }),\r\n              borderColor: '#ffa600',\r\n              backgroundColor: '#ffa600',\r\n              type: 'line',\r\n              order: 0\r\n            },\r\n          ],\r\n        }\r\n\r\n        setCumulativeDifference1(budgetData.map((x, i) => { return x.estimates[0].actualVsEstimate }))\r\n        setCumulativeDifference2(budgetData.map((x, i) => { return x.estimates[1].actualVsEstimate }))\r\n\r\n        setGraphData2(graphData);\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  \r\n  const options = {\r\n    responsive: true,\r\n    tooltips: {\r\n      enabled: true\r\n    }\r\n  };\r\n\r\n  const optionsGraph1 =  {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        // mode: 'index',\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.label === \"Actual Production\")  {\r\n              return [\r\n                tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh',\r\n                \"% Difference vs. \" + estimatesLabel1 + \": \" + difference1[tooltipItem.dataIndex] + \" %\",\r\n                \"% Difference vs. \" + estimatesLabel2 + \": \" + difference2[tooltipItem.dataIndex] + \" %\"\r\n            \r\n              ];\r\n            } else {\r\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh'\r\n            }\r\n              \r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const optionsGraph2 =  {\r\n    ...options,\r\n    plugins: {\r\n      tooltip: {\r\n        // mode: 'index',\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            if (tooltipItem.dataset.label === \"Actual Production\")  {\r\n              return [\r\n                tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + 'MWh',\r\n                \"% Difference vs. \" + estimatesLabel1 + \": \" + cumulativeDifference1[tooltipItem.dataIndex] + \" %\",\r\n                \"% Difference vs. \" + estimatesLabel2 + \": \" + cumulativeDifference2[tooltipItem.dataIndex] + \" %\"\r\n            \r\n              ];\r\n            } else {\r\n              return tooltipItem.dataset.label + ': ' + formatNumber(round(tooltipItem.raw,1)) + ' MWh'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const fields1=[\r\n    { \r\n      key: 'label',\r\n      label: '',\r\n    },\r\n    { \r\n      key: 'value',\r\n      label: 'Month to Date',\r\n    }\r\n  ]\r\n  const fields2=[\r\n    { \r\n      key: 'label',\r\n      label: '',\r\n    },\r\n    { \r\n      key: 'value',\r\n      label: 'Year to Date',\r\n    }\r\n  ]\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"2\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Budget\r\n            </h3>\r\n            {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n          </CCol>\r\n\r\n          <CCol sm=\"10\" className=\"text-right d-flex px-2 flex-center flex-justify-end\">\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4,minWidth:'64px'}}>Fiscal Year</h6>\r\n            <CSelect className={'input-sm'} disabled={loading} custom name=\"fiscalYear\" id=\"fiscalYear\" onChange={(ev) => {setFiscalYear(ev.target.value);}}>\r\n              {[0,1,2,3,4].map((x) => (\r\n                                <option key={currentFiscalYear-x} value={currentFiscalYear-x}>\r\n                                  {currentFiscalYear-x}\r\n                                </option>\r\n                              ))}\r\n            </CSelect>\r\n\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4,minWidth:'170px'}}>Add Estimated Curtailments</h6>\r\n            <CSelect className={'input-sm'} disabled={loading} custom defaultValue={\"true\"} name=\"addEstimatedCurtailments\" id=\"addEstimatedCurtailments\" onChange={(ev) => {setAddEstimatedCurtailments(ev.target.value);}}>\r\n              <option key={'addEstimatedCurtailments-yes'} value=\"true\">Yes</option>\r\n              <option  key={'addEstimatedCurtailments-no'} value=\"false\">No</option>\r\n            </CSelect>\r\n\r\n            <h6 className=\"mr-2 ml-3 m-0\" style={{lineHeight:2.4}}>Park</h6>\r\n            <CSelect className={'input-md'} disabled={loading} defaultValue={park} custom name=\"park\" id=\"park\" onChange={(ev) => {setPark(ev.target.value);}}>\r\n                {parks && parks.map((park) => (\r\n                    <option key={park.id} value={park.id}>\r\n                      {park.name}\r\n                    </option>\r\n                      ))}\r\n            </CSelect>\r\n\r\n            <CButton color=\"primary\" disabled={loading || !parksLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n          </CCol>\r\n\r\n          </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n\r\n        { (loading || dataLoaded) &&\r\n          <div>\r\n\r\n            { !loading || dataLoadError ? \r\n              <div>\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Monthly Production</h4>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol sm=\"5\">\r\n                        <CDataTable\r\n                          items={tableData1}\r\n                          fields={fields1}\r\n                          striped\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol>\r\n                        <div>MWh</div>\r\n                        <Bar \r\n                          data={graphData1}\r\n                          options={optionsGraph1} \r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Cumulative Production</h4>\r\n                    \r\n                    <CRow className={'mb-2'}>\r\n                      <CCol sm=\"5\">\r\n                        <CDataTable\r\n                          items={tableData2}\r\n                          fields={fields2}\r\n                          striped\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow className={'mb-2'}>\r\n                      <CCol>\r\n                        <div>MWh</div>\r\n                        <Bar \r\n                          data={graphData2}\r\n                          options={optionsGraph2} \r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n          </div>\r\n        }\r\n\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Budget\r\n"]},"metadata":{},"sourceType":"module"}