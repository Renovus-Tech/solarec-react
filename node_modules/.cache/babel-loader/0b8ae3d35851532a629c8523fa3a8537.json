{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\forecast.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { setCookie, getCookie } from '../../../helpers/sessionCookie.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner, CLabel } from '@coreui/react';\nimport { Chart, Plugin } from 'chart.js';\nimport { CChartLine } from '@coreui/react-chartjs';\nimport { Line } from 'react-chartjs-2';\nimport { OPEN_WEATHER_API } from '../../../constants';\nimport arrow from '../../../assets/arrow.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ClimateForecast = function ClimateForecast() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      arrowImage = _useState8[0],\n      setArrowImage = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      datetimes = _useState10[0],\n      setDatetimes = _useState10[1];\n\n  var _useState11 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      lineChartOneData = _useState12[0],\n      setLineChartOneData = _useState12[1];\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var arrowImage, APIResponse, responseData, graphData1, _datetimes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true); // var image = new Image();  // see note on creating an image\n              // image.src = arrow;\n              // image.onload = function(){\n              //   setArrowImage(this)\n              // }\n\n              arrowImage = new Image(22, 22);\n              arrowImage.src = arrow;\n\n              arrowImage.onload = function () {\n                setArrowImage(this);\n              };\n\n              _context.next = 6;\n              return fetch(OPEN_WEATHER_API);\n\n            case 6:\n              APIResponse = _context.sent;\n              _context.next = 9;\n              return APIResponse.json();\n\n            case 9:\n              responseData = _context.sent;\n\n              if (responseData.error && responseData.error.message) {\n                setDataLoadError(true);\n                alert(responseData.error.message);\n              }\n\n              if (responseData) {\n                graphData1 = {\n                  labels: responseData.list.map(function (x, i) {\n                    return x.wind.deg;\n                  }),\n                  datasets: [{\n                    label: '',\n                    borderColor: '#003f5c',\n                    pointBackgroundColor: '#003f5c',\n                    pointBorderColor: 'transparent',\n                    backgroundColor: 'transparent',\n                    data: responseData.list.map(function (x, i) {\n                      return x.wind.speed;\n                    })\n                  }]\n                };\n                _datetimes = [];\n                responseData.list.forEach(function (value, index) {\n                  _datetimes.push(value.dt);\n                });\n                setDatetimes(_datetimes); // responseData.graphs[0].gen_code.forEach((gen,index) => {\n                //   const dataset1 = {\n                //     label:  gen,\n                //     borderColor: '#003f5c',\n                //     pointBackgroundColor: '#003f5c',\n                //     pointBorderColor: 'transparent',\n                //     backgroundColor: 'transparent',\n                //     data: responseData.graphs[0].data.map( (x,i) => {\n                //       return x.genWindSpeed[index];\n                //     })\n                //   }\n                //   graphData1.datasets.push(dataset1)\n                // });\n\n                setLineChartOneData(graphData1);\n                setLoading(false);\n              }\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var plugins = [{\n    afterDraw: function afterDraw(chart) {\n      var ctx = chart.ctx;\n      var xAxis = chart.scales['x'];\n      var yAxis = chart.scales['y'];\n      xAxis.ticks.forEach(function (value, index) {\n        var x = xAxis.getPixelForTick(index);\n        var deg = value.label;\n        var newImageCanvas = document.createElement('canvas');\n        newImageCanvas.width = 22;\n        newImageCanvas.height = 22;\n        var newCtx = newImageCanvas.getContext('2d');\n        newCtx.save();\n        newCtx.translate(newImageCanvas.width / 2, newImageCanvas.height / 2);\n        newCtx.rotate((deg + 90) * 0.01745);\n        newCtx.translate(-newImageCanvas.width * 0.5, -newImageCanvas.height * 0.5);\n        newCtx.drawImage(arrowImage, 0, 0);\n        newCtx.restore();\n        ctx.drawImage(newImageCanvas, x - 10, yAxis.bottom + 24, arrowImage.width, arrowImage.height);\n        var datetime = new Date(datetimes[index] * 1000);\n        var month = datetime.getMonth() + 1 > 9 ? datetime.getMonth() + 1 : '0' + (datetime.getMonth() + 1);\n        var day = datetime.getDate() > 9 ? datetime.getDate() : '0' + datetime.getDate();\n        var hour = datetime.getHours() > 9 ? datetime.getHours() : '0' + datetime.getDate();\n        var minute = datetime.getMinutes() > 9 ? datetime.getDate() : '0' + datetime.getDate();\n        var date = ('0' + month).substring(month.length - 1) + \"-\" + ('0' + day).substring(day.length - 1);\n        var time = ('0' + hour).substring(hour.length - 1) + \":\" + ('0' + minute).substring(minute.length - 1);\n        ctx.fillText(time, x - 10, yAxis.bottom + 10);\n        ctx.fillText(date, x - 10, yAxis.bottom + 20);\n      });\n      ctx.fillText(\"Direction\", 0, yAxis.bottom + 22);\n    }\n  }];\n  var options = {\n    type: 'line',\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    elements: {\n      line: {\n        tension: .4\n      }\n    },\n    layout: {\n      padding: {\n        bottom: 80,\n        left: 50,\n        right: 20\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          display: false\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function title(tooltipItem, data) {\n            return tooltipItem[0].label + 'Â°';\n          },\n          label: function label(tooltipItem, data) {\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw, 1) + ' m/s';\n          }\n        }\n      },\n      legend: {\n        display: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate - Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"8\",\n          className: \"text-right d-flex flex-center flex-justify-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          className: 'mb-5',\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Wind Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"m/s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: lineChartOneData,\n              options: options,\n              plugins: plugins // datasets={[{\n              //   label:  '',\n              //   borderColor: '#003f5c',\n              //   pointBackgroundColor: '#003f5c',\n              //   pointBorderColor: 'transparent',\n              //   backgroundColor: 'transparent',\n              //   data: [1,2,3]\n              // }]}\n              // options={options}\n              // labels={['a','b','c']}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(CSpinner, {\n          className: \"loading-spinner\",\n          color: \"#321fdb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateForecast, \"Ijjf9ewO2vbaeNiq5C29a0Xbw1c=\");\n\n_c = ClimateForecast;\nexport default ClimateForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateForecast\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/forecast.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","setCookie","getCookie","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CLabel","Chart","Plugin","CChartLine","Line","OPEN_WEATHER_API","arrow","ClimateForecast","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","arrowImage","setArrowImage","datetimes","setDatetimes","labels","datasets","lineChartOneData","setLineChartOneData","fetchData","Image","src","onload","fetch","APIResponse","json","responseData","error","message","alert","graphData1","list","map","x","i","wind","deg","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","data","speed","forEach","value","index","push","dt","plugins","afterDraw","chart","ctx","xAxis","scales","yAxis","ticks","getPixelForTick","newImageCanvas","document","createElement","width","height","newCtx","getContext","save","translate","rotate","drawImage","restore","bottom","datetime","Date","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","date","substring","length","time","fillText","options","type","responsive","animation","duration","tooltips","enabled","legend","display","elements","line","tension","layout","padding","left","right","tooltip","callbacks","title","tooltipItem","dataset","raw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart,\r\n  Plugin\r\n} from 'chart.js';\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport { OPEN_WEATHER_API } from '../../../constants'\r\nimport arrow from '../../../assets/arrow.png'\r\n\r\n\r\nconst ClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [arrowImage, setArrowImage] = useState(null)\r\n  const [datetimes, setDatetimes] = useState([])\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n\r\n    setLoading(true);\r\n    // var image = new Image();  // see note on creating an image\r\n    // image.src = arrow;\r\n    // image.onload = function(){\r\n    //   setArrowImage(this)\r\n    // }\r\n\r\n    var arrowImage = new Image(22,22);\r\n    arrowImage.src = arrow\r\n    arrowImage.onload = function() {\r\n      setArrowImage(this);\r\n    }\r\n\r\n    const APIResponse = await fetch(OPEN_WEATHER_API);\r\n    const responseData = await APIResponse.json();\r\n\r\n    if (responseData.error && responseData.error.message) {\r\n      setDataLoadError(true)\r\n      alert(responseData.error.message)\r\n    } \r\n\r\n    \r\n\r\n    if (responseData) {\r\n\r\n      const graphData1 = {\r\n        labels: responseData.list.map( (x,i) => {\r\n          return x.wind.deg;\r\n        }),\r\n        datasets: [{\r\n          label:  '',\r\n          borderColor: '#003f5c',\r\n          pointBackgroundColor: '#003f5c',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          data: responseData.list.map( (x,i) => {\r\n            return x.wind.speed;\r\n          })\r\n        }]\r\n      }\r\n\r\n      const datetimes = []\r\n      responseData.list.forEach((value,index) => {\r\n        datetimes.push(value.dt);\r\n      })\r\n      setDatetimes(datetimes)\r\n      \r\n      // responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n      //   const dataset1 = {\r\n      //     label:  gen,\r\n      //     borderColor: '#003f5c',\r\n      //     pointBackgroundColor: '#003f5c',\r\n      //     pointBorderColor: 'transparent',\r\n      //     backgroundColor: 'transparent',\r\n      //     data: responseData.graphs[0].data.map( (x,i) => {\r\n      //       return x.genWindSpeed[index];\r\n      //     })\r\n      //   }\r\n      \r\n      //   graphData1.datasets.push(dataset1)\r\n      // });\r\n\r\n      setLineChartOneData(graphData1)\r\n\r\n      setLoading(false);\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const plugins = [{\r\n    afterDraw: (chart) => {\r\n      let ctx = chart.ctx;\r\n      var xAxis = chart.scales['x'];\r\n      var yAxis = chart.scales['y'];\r\n      xAxis.ticks.forEach((value, index) => {\r\n        var x = xAxis.getPixelForTick(index);\r\n        var deg = value.label;\r\n          var newImageCanvas = document.createElement('canvas');\r\n          newImageCanvas.width  = 22;\r\n          newImageCanvas.height = 22;\r\n          var newCtx = newImageCanvas.getContext('2d') ;\r\n          newCtx.save();\r\n          newCtx.translate(newImageCanvas.width/2,newImageCanvas.height/2);\r\n          newCtx.rotate((deg+90)*0.01745);\r\n          newCtx.translate(-newImageCanvas.width * 0.5, -newImageCanvas.height * 0.5);  \r\n          newCtx.drawImage(arrowImage, 0,0);\r\n          newCtx.restore();\r\n          ctx.drawImage(newImageCanvas, x - 10, yAxis.bottom + 24, arrowImage.width, arrowImage.height)\r\n          const datetime = new Date(datetimes[index] * 1000);\r\n          const month = datetime.getMonth()+1 > 9 ? datetime.getMonth()+1 : '0'+(datetime.getMonth()+1)\r\n          const day = datetime.getDate() > 9 ? datetime.getDate() : '0'+datetime.getDate()\r\n          const hour = datetime.getHours() > 9 ? datetime.getHours() : '0'+datetime.getDate()\r\n          const minute = datetime.getMinutes() > 9 ? datetime.getDate() : '0'+datetime.getDate()\r\n          const date = ('0'+month).substring(month.length-1)+\"-\"+('0'+day).substring(day.length-1)\r\n          const time = ('0'+hour).substring(hour.length-1)+\":\"+('0'+minute).substring(minute.length-1)\r\n          ctx.fillText(time, x - 10, yAxis.bottom + 10);\r\n          ctx.fillText(date, x - 10, yAxis.bottom + 20);\r\n      });\r\n      ctx.fillText(\"Direction\", 0, yAxis.bottom + 22);\r\n    }\r\n  }];\r\n\r\n  const options =  {\r\n    type: 'line',\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            bottom: 80,\r\n            left: 50,\r\n            right: 20\r\n        }\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n            display: false\r\n        }\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(tooltipItem, data){\r\n            return tooltipItem[0].label + 'Â°';\r\n          },\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' m/s';\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                      // datasets={[{\r\n                      //   label:  '',\r\n                      //   borderColor: '#003f5c',\r\n                      //   pointBackgroundColor: '#003f5c',\r\n                      //   pointBorderColor: 'transparent',\r\n                      //   backgroundColor: 'transparent',\r\n                      //   data: [1,2,3]\r\n                      // }]}\r\n                      // options={options}\r\n                      // labels={['a','b','c']}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateForecast\r\n"]},"metadata":{},"sourceType":"module"}