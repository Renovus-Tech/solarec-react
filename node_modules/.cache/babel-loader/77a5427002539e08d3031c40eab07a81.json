{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\performance\\\\performance.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect } from '@coreui/react';\nimport { CMultiSelect } from '@coreui/react-pro';\nimport Multiselect from 'multiselect-react-dropdown';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x'); // var mixedChart = new Chart(ctx, {\n//     data: {\n//         datasets: [\n//         {\n//             type: 'line',\n//             label: 'Line Dataset',\n//             data: [50, 50, 50, 50],\n//         }],\n//         labels: ['January', 'February', 'March', 'April']\n//     },\n//     // options: options\n// });\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generator = _useState4[0],\n      setGenerator = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generatorsLoaded = _useState8[0],\n      setGeneratorsLoaded = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      park = _useState10[0],\n      setPark = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      date = _useState12[0],\n      setDate = _useState12[1];\n\n  var _useState13 = useState('12w'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dateRange = _useState14[0],\n      setDateRange = _useState14[1];\n\n  var _useState15 = useState('week'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      groupBy = _useState16[0],\n      setGroupBy = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      data = _useState18[0],\n      setData = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      loading = _useState20[0],\n      setLoading = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      dataLoaded = _useState22[0],\n      setDataLoaded = _useState22[1];\n\n  var _useState23 = useState(null),\n      _useState24 = _slicedToArray(_useState23, 2),\n      generatorsButtons = _useState24[0],\n      setGeneratorsButtons = _useState24[1];\n\n  var fetchData = function fetchData() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var generator = options.generator,\n        period = options.period,\n        groupBy = options.groupBy;\n    setLoading(true);\n    var body = {};\n    if (generator) body.generators = [generator];\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    DataAPI({\n      endpoint: 'chart/performanceIndex',\n      method: 'POST',\n      body: body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var data = {\n        labels: [],\n        datasets: [],\n        backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n      };\n      var colors = ['#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600'];\n      var dataset100 = {\n        labels: [''],\n        label: '',\n        backgroundColor: colors.pop(),\n        data: []\n      };\n      responseData.data.forEach(function (rDs) {\n        var dataset = {\n          labels: [],\n          label: rDs.name,\n          backgroundColor: colors.pop(),\n          data: [],\n          hidden: rDs.name != 'Total'\n        };\n        rDs.data.graph.forEach(function (rD) {\n          // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\n          var label = groupBy == \"day\" ? \"\".concat(formatDate(rD.from)) : \"\".concat(formatDate(rD.from), \" - \").concat(formatDate(rD.to));\n          dataset.labels.push(label);\n          dataset.data.push(rD.value);\n          dataset100.data.push(100);\n        });\n        dataset.labels.reverse();\n        dataset.data.reverse();\n        data.datasets.push(dataset); // data.datasets.push(dataset100);\n      });\n      responseData.data[0].data.graph.forEach(function (rD) {\n        var rDfrom = rD.from;\n        var rDto = rD.to;\n        var label = groupBy == \"day\" ? \"\".concat(formatDate(rD.from, 'noyear')) : \"\".concat(formatDate(rD.from, 'noyear'), \" - \").concat(formatDate(rD.to, 'noyear'));\n        data.labels.push(label);\n      });\n      data.labels.reverse();\n      setGraphData(data);\n      setDataLoaded(true);\n    }).catch(function (err) {\n      console.warn(\"ERROR! \".concat(err));\n      setLoading(false);\n    } // err => alert(`ERROR! ${err}`)\n    );\n  }; // useEffect(() => {\n  //   fetchData({period: period,  groupBy: groupBy});\n  // }, []);\n\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        // setGenerator(response.generators[0].id);\n        setGeneratorsLoaded(true);\n        setGenerators(response.generators);\n        var gen = response.generators.map(function (name, index) {\n          return /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"secondary\",\n            className: \"mx-2\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, _this);\n        });\n        setGeneratorsButtons(gen);\n        fetchData({\n          period: dateRange,\n          groupBy: groupBy\n        });\n      }\n    });\n  };\n\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este aÃ±o'];\n\n  var change = function change(ev) {}; // const refreshChart = (period) => {\n  //   fetchData({generator: generator, period: dateRange,  groupBy: groupBy});\n  // }\n\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n  var state = {\n    options: [{\n      name: 'Option 1',\n      id: 1\n    }, {\n      name: 'Option 2',\n      id: 2\n    }, {\n      name: 'Option 3',\n      id: 3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"traffic\",\n          className: \"card-title mb-0\",\n          children: \"Choose de generators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"9\",\n            children: generatorsLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: generatorsButtons\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 13\n            }, _this) // \n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"3\",\n            children: /*#__PURE__*/_jsxDEV(CButton, {\n              color: \"primary\",\n              className: \"mx-2\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 13\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCard, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"7\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              id: \"traffic\",\n              className: \"card-title mb-0\",\n              children: \"Performance Index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"small text-medium-emphasis\",\n              children: getDateLabel(dateRange)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n            sm: \"5\",\n            className: \"text-right d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4,\n                minWidth: '60px'\n              },\n              children: \"Group by\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n              value: groupBy,\n              style: {\n                maxWidth: '150px'\n              },\n              disabled: loading,\n              onChange: function onChange(ev) {\n                setGroupBy(ev.target.value);\n                fetchData({\n                  generator: generator,\n                  period: dateRange,\n                  groupBy: ev.target.value\n                });\n              },\n              custom: true,\n              name: \"period\",\n              id: \"period\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"day\",\n                children: \"Day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"week\",\n                selected: true,\n                children: \"Week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"month\",\n                children: \"Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mr-2 ml-4\",\n              style: {\n                lineHeight: 2.4\n              },\n              children: \"Period\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n              value: dateRange,\n              options: ['cm', 'cy', '12w', '12m', 'x', 'xx'],\n              disabled: loading,\n              onChange: function onChange(value) {\n                setDateRange(value);\n                fetchData({\n                  generator: generator,\n                  period: value,\n                  groupBy: groupBy\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: graphData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"X6+IYpXit5A8hvAuFEzQU65xNcU=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/performance/performance.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CMultiSelect","Multiselect","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Bar","Chart","Line","Scatter","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","generator","setGenerator","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","park","setPark","date","setDate","dateRange","setDateRange","groupBy","setGroupBy","data","setData","loading","setLoading","dataLoaded","setDataLoaded","generatorsButtons","setGeneratorsButtons","fetchData","options","period","body","split","length","from","to","endpoint","method","then","responseData","error","message","alert","backgroundColor","colors","dataset100","label","pop","forEach","rDs","dataset","name","hidden","graph","rD","push","value","reverse","rDfrom","rDto","catch","err","console","warn","loadGenerators","response","gen","map","index","dataSets","parks","dates","change","ev","animation","duration","state","id","lineHeight","minWidth","maxWidth","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect\r\n} from '@coreui/react'\r\nimport { CMultiSelect } from '@coreui/react-pro'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\n\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\n// var mixedChart = new Chart(ctx, {\r\n//     data: {\r\n//         datasets: [\r\n//         {\r\n//             type: 'line',\r\n//             label: 'Line Dataset',\r\n//             data: [50, 50, 50, 50],\r\n//         }],\r\n//         labels: ['January', 'February', 'March', 'April']\r\n//     },\r\n//     // options: options\r\n// });\r\n\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [generatorsButtons, setGeneratorsButtons] = useState(null);\r\n\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    const {generator, period, groupBy} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (generator) body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      endpoint: 'chart/performanceIndex',\r\n      method: 'POST',\r\n      body: body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData.error) {\r\n           if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n           } else {\r\n            return(alert(responseData.error)) \r\n           }\r\n        }\r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: [],\r\n          backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n        }\r\n\r\n        const colors = [\r\n            '#003f5c',\r\n            '#374c80',\r\n            '#7a5195',\r\n            '#bc5090',\r\n            '#ef5675',\r\n            '#ff764a',\r\n            '#ffa600'\r\n          ];\r\n\r\n\r\n          const dataset100 = {\r\n            labels: [''],\r\n            label: '',\r\n            backgroundColor: colors.pop(),\r\n            data: []\r\n          };\r\n\r\n        responseData.data.forEach((rDs) => {\r\n\r\n          const dataset = {\r\n            labels: [],\r\n            label: rDs.name,\r\n            backgroundColor: colors.pop(),\r\n            data: [],\r\n            hidden: rDs.name!='Total'\r\n          };\r\n\r\n          rDs.data.graph.forEach((rD) => {\r\n            // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n            const label = (groupBy == \"day\") ? `${formatDate(rD.from)}` : `${formatDate(rD.from)} - ${formatDate(rD.to)}`\r\n            dataset.labels.push(label);\r\n            dataset.data.push(rD.value)\r\n\r\n            dataset100.data.push(100)\r\n\r\n          });\r\n\r\n          dataset.labels.reverse();\r\n          dataset.data.reverse();\r\n\r\n          data.datasets.push(dataset);\r\n          // data.datasets.push(dataset100);\r\n\r\n        });\r\n\r\n        responseData.data[0].data.graph.forEach((rD) => {\r\n          const rDfrom = rD.from;\r\n          const rDto = rD.to;\r\n          const label = (groupBy == \"day\") ? `${formatDate(rD.from, 'noyear')}` : `${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`\r\n          data.labels.push(label);\r\n\r\n        });\r\n\r\n        data.labels.reverse();\r\n\r\n        setGraphData(data);\r\n        setDataLoaded(true);\r\n\r\n      })\r\n      .catch(\r\n        err => {\r\n          console.warn(`ERROR! ${err}`)\r\n          setLoading(false);\r\n        }\r\n\r\n        // err => alert(`ERROR! ${err}`)\r\n      );\r\n\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   fetchData({period: period,  groupBy: groupBy});\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  const loadGenerators = () => {\r\n  \r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n  \r\n          // setGenerator(response.generators[0].id);\r\n          setGeneratorsLoaded(true);\r\n          setGenerators(response.generators);\r\n\r\n\r\n          \r\n          const gen = response.generators.map((name, index) => (  \r\n            <CButton color=\"secondary\" className=\"mx-2\">{name}</CButton>\r\n          ));\r\n          setGeneratorsButtons(gen);\r\n  \r\n          fetchData({period: dateRange, groupBy: groupBy});\r\n  \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este aÃ±o'\r\n  ]\r\n\r\n\r\n  const change = (ev) => {\r\n  }\r\n\r\n  // const refreshChart = (period) => {\r\n  //   fetchData({generator: generator, period: dateRange,  groupBy: groupBy});\r\n  // }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n  const state = {\r\n    options: [{name: 'Option 1', id: 1},{name: 'Option 2', id: 2},{name: 'Option 3', id: 3}]\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n        <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n          Choose de generators\r\n        </h4>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow>\r\n          <CCol sm=\"9\">\r\n          {generatorsLoaded && \r\n            <div>{generatorsButtons}</div>\r\n            // \r\n          }\r\n          </CCol>\r\n          <CCol sm=\"3\">\r\n            <CButton color=\"primary\" className=\"mx-2\">Submit</CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardBody>\r\n\r\n      </CCard>\r\n\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Performance Index\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n              <CCol sm=\"5\" className=\"text-right d-flex\">\r\n              {/* <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4,minWidth:'64px'}}>Generator</h6> */}\r\n\r\n              {/* <Multiselect\r\n                options={state.options} // Options to display in the dropdown\r\n                selectedValues={state.selectedValue} // Preselected value to persist in dropdown\r\n                //onSelect={this.onSelect} // Function will trigger on select event\r\n                //onRemove={this.onRemove} // Function will trigger on remove event\r\n                displayValue=\"name\" // Property name to display in the dropdown options\r\n                /> */}\r\n\r\n                {/* <CSelect disabled={loading} style={{maxWidth:'150px'}} onChange={(ev) => {setGenerator(ev.target.value); fetchData({period: dateRange, groupBy: groupBy, generator: ev.target.value});}} custom name=\"generator\" id=\"generator\">\r\n                  <option value=\"0\">All generators</option>\r\n                  {generators.map((oGenerator) => (\r\n                      <option value={oGenerator.id}>\r\n                        {oGenerator.code}\r\n                      </option>\r\n                    ))}\r\n                </CSelect> */}\r\n                <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4,minWidth:'60px'}}>Group by</h6>\r\n                <CSelect value={groupBy} style={{maxWidth:'150px'}} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); fetchData({generator: generator, period: dateRange, groupBy: ev.target.value});}} custom name=\"period\" id=\"period\">\r\n                  <option value=\"day\">Day</option>\r\n                  <option value=\"week\" selected>Week</option>\r\n                  <option value=\"month\">Month</option>\r\n                </CSelect>\r\n                <h6 className=\"mr-2 ml-4\" style={{lineHeight:2.4}}>Period</h6>\r\n                <DateFilter value={dateRange} options={['cm','cy','12w','12m','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData({generator: generator, period: value, groupBy: groupBy});}} />\r\n              </CCol>\r\n\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n         \r\n          <Line data={graphData} options={options} />\r\n        </CCardBody>\r\n\r\n      </CCard>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}