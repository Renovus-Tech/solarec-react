{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { lazy, useEffect } from 'react';\nexport function DataAPI() {\n  return _DataAPI.apply(this, arguments);\n}\n_c2 = DataAPI;\n\nfunction _DataAPI() {\n  _DataAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options,\n        _options$endpoint,\n        endpoint,\n        _options$method,\n        method,\n        _options$body,\n        body,\n        fetchOptions,\n        staging,\n        APIResponse,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _options$endpoint = options.endpoint, endpoint = _options$endpoint === void 0 ? {} : _options$endpoint, _options$method = options.method, method = _options$method === void 0 ? 'POST' : _options$method, _options$body = options.body, body = _options$body === void 0 ? {} : _options$body;\n            fetchOptions = {};\n            body.location = 4;\n            staging = process.env.REACT_APP_API_URL == '/data';\n            fetchOptions.method = staging ? 'GET' : method;\n            fetchOptions.headers = {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'credentials': 'include'\n            };\n            fetchOptions.credentials = 'include'; // fetchOptions.mode = 'no-cors';\n            // JSESSIONID\n\n            if (body && !staging && method != 'GET') fetchOptions.body = JSON.stringify(body); // console.log(`fetching... ${process.env.REACT_APP_API_URL}/${endpoint}`);\n\n            _context.next = 11;\n            return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/\").concat(endpoint), fetchOptions).then(function (response) {\n              return response.json();\n            }).catch(function (er) {\n              console.log('APIError!', er, \"\".concat(process.env.REACT_APP_API_URL, \"/\").concat(endpoint));\n              alert('APIError');\n            });\n\n          case 11:\n            APIResponse = _context.sent;\n            console.log('fetchOptions', fetchOptions);\n            console.log('APIResponse ', endpoint, APIResponse);\n            return _context.abrupt(\"return\", APIResponse);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _DataAPI.apply(this, arguments);\n}\n\n_c = DataAPI;\nexport default DataAPI;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataAPI\");\n$RefreshReg$(_c2, \"DataAPI\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/helpers/DataAPI.js"],"names":["React","lazy","useEffect","DataAPI","options","endpoint","method","body","fetchOptions","location","staging","process","env","REACT_APP_API_URL","headers","credentials","JSON","stringify","fetch","then","response","json","catch","er","console","log","alert","APIResponse"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AAEA,gBAAsBC,OAAtB;AAAA;AAAA;MAAsBA,O;;;sEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAuBC,YAAAA,OAAvB,2DAAiC,EAAjC;AAAA,gCAMFA,OANE,CAGJC,QAHI,EAGJA,QAHI,kCAGO,EAHP,wCAMFD,OANE,CAIHE,MAJG,EAIHA,MAJG,gCAIM,MAJN,oCAMFF,OANE,CAKHG,IALG,EAKHA,IALG,8BAKI,EALJ;AAQEC,YAAAA,YARF,GAQiB,EARjB;AAUJD,YAAAA,IAAI,CAACE,QAAL,GAAgB,CAAhB;AAEMC,YAAAA,OAZF,GAYaC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,IAAiC,OAZ9C;AAcLL,YAAAA,YAAY,CAACF,MAAb,GAAsBI,OAAO,GAAG,KAAH,GAAWJ,MAAxC;AACAE,YAAAA,YAAY,CAACM,OAAb,GAAuB;AACrB,8BAAgB,kBADK;AAErB,wBAAU,kBAFW;AAGrB,6BAAe;AAHM,aAAvB;AAKAN,YAAAA,YAAY,CAACO,WAAb,GAA2B,SAA3B,CApBK,CAqBL;AAGF;;AAEE,gBAAIR,IAAI,IAAI,CAACG,OAAT,IAAoBJ,MAAM,IAAI,KAAlC,EAAyCE,YAAY,CAACD,IAAb,GAAoBS,IAAI,CAACC,SAAL,CAAeV,IAAf,CAApB,CA1BpC,CA4BL;;AA5BK;AAAA,mBA+BoBW,KAAK,WAEzBP,OAAO,CAACC,GAAR,CAAYC,iBAFa,cAEQR,QAFR,GAEoBG,YAFpB,CAAL,CAEuCW,IAFvC,CAE4C,UAAUC,QAAV,EAAoB;AACnF,qBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,aAJoB,EAIlBC,KAJkB,CAKnB,UAAAC,EAAE,EAAI;AAEJC,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,EAAzB,YAAgCZ,OAAO,CAACC,GAAR,CAAYC,iBAA5C,cAAiER,QAAjE;AACAqB,cAAAA,KAAK,CAAC,UAAD,CAAL;AACD,aATkB,CA/BpB;;AAAA;AA+BAC,YAAAA,WA/BA;AA2CHH,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BjB,YAA5B;AACAgB,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BpB,QAA5B,EAAsCsB,WAAtC;AA5CG,6CA8CIA,WA9CJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAexB,O;AAkHtB,eAAeA,OAAf","sourcesContent":["import React, { lazy, useEffect } from 'react'\r\n\r\nexport async function DataAPI(options = {}) {\r\n\r\n\tconst {\r\n\t  endpoint = {},\r\n    method = 'POST',\r\n    body = {}\r\n\t} = options;\r\n\r\n   const fetchOptions = {};\r\n\r\n   body.location = 4;\r\n\r\n   const staging = (process.env.REACT_APP_API_URL == '/data');\r\n\r\n  fetchOptions.method = staging ? 'GET' : method;\r\n  fetchOptions.headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'credentials': 'include'\r\n  };\r\n  fetchOptions.credentials = 'include';\r\n  // fetchOptions.mode = 'no-cors';\r\n\r\n\r\n// JSESSIONID\r\n\r\n  if (body && !staging && method != 'GET') fetchOptions.body = JSON.stringify(body);\r\n\r\n  // console.log(`fetching... ${process.env.REACT_APP_API_URL}/${endpoint}`);\r\n  \r\n\r\n\tconst APIResponse = await fetch(\r\n\r\n    `${process.env.REACT_APP_API_URL}/${endpoint}`, fetchOptions).then(function (response) {\r\n        return response.json();\r\n      }).catch(\r\n        er => {\r\n          \r\n          console.log('APIError!', er, `${process.env.REACT_APP_API_URL}/${endpoint}`);\r\n          alert('APIError');\r\n        }\r\n      );\r\n\r\n    console.log('fetchOptions', fetchOptions);\r\n    console.log('APIResponse ', endpoint, APIResponse);\r\n\r\n    return APIResponse;\r\n\r\n\r\n      // .then(function (response) {\r\n      //   // console.log('response >>> ', response);\r\n      //   return response.json();\r\n      // })\r\n      // .then(function (responseData) {\r\n      //   const data = {\r\n      //     labels: [],\r\n      //     datasets: [],\r\n      //     backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n      //   }\r\n\r\n      //   console.log('responseData', responseData)\r\n\r\n\r\n      //   // setDateRange(`${responseData.chart.from.replace(\" 00:00:00\", \"\")} - ${responseData.chart.to.replace(\" 00:00:00\", \"\")}`);\r\n\r\n      //   const colors = [\r\n      //       '#003f5c',\r\n      //       '#374c80',\r\n      //       '#7a5195',\r\n      //       '#bc5090',\r\n      //       '#ef5675',\r\n      //       '#ff764a',\r\n      //       '#ffa600'\r\n      //     ];\r\n\r\n      //   responseData.data.forEach((rDs) => {\r\n\r\n      //     const dataset = {\r\n      //       labels: [],\r\n      //       label: rDs.name,\r\n      //       backgroundColor: colors.pop(),\r\n      //       data: []\r\n      //     };\r\n\r\n      //     rDs.data.graph.forEach((rD) => {\r\n      //       // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n      //       dataset.labels.push(rD.from.replace(\" 00:00:00\", \"\") + ' / ' + rD.to.replace(\" 00:00:00\", \"\"));\r\n      //       dataset.data.push(rD.value)\r\n      //     });\r\n\r\n      //     data.datasets.push(dataset);\r\n\r\n      //   });\r\n\r\n      //   responseData.data[0].data.graph.forEach((rD) => {\r\n      //     const rDfrom = rD.from;\r\n      //     const rDto = rD.to;\r\n      //     data.labels.push(rDfrom.replace(\" 00:00:00\", \"\").replace(\"2018-\", \"\") + ' / ' + rDto.replace(\" 00:00:00\", \"\").replace(\"2018-\", \"\"));\r\n\r\n      //   });\r\n\r\n\r\n      //   // setGraphData(data)\r\n\r\n      // })\r\n      // .catch(\r\n      //   err => console.warn(`ERROR! ${err}`)\r\n      //   // err => alert(`ERROR! ${err}`)\r\n      // );\r\n  }\r\n\r\n\r\n\r\nexport default DataAPI"]},"metadata":{},"sourceType":"module"}