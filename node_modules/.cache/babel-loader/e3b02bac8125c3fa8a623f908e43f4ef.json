{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\dashboard\\\\Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CDataTable, CRow, CCol, CSpinner, CSelect, CBadge } from '@coreui/react';\nimport { DocsLink } from 'src/reusable';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport DataAPI from '../../helpers/DataAPI.js';\nimport { DateFilter, round, formatDate, getDateLabel } from '../../helpers/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  var _useState = useState('cm'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('day'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generators = _useState6[0],\n      setGenerators = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      generator = _useState8[0],\n      setGenerator = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dataLoaded = _useState10[0],\n      setDataLoaded = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loading = _useState12[0],\n      setLoading = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dataLoadError = _useState14[0],\n      setDataLoadError = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      tubinesTablesData = _useState16[0],\n      setTurbinesTablesData = _useState16[1];\n\n  var fetchData = function fetchData() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var period = options.period,\n        groupBy = options.groupBy,\n        generator = options.generator;\n    var body = {};\n    if (generator && generator !== '0') body.generators = [generator];\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    setLoading(true);\n    DataAPI({\n      'endpoint': 'chart/dashboard',\n      'body': body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        setDataLoadError(true);\n\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var dataKeys = ['turbine', 'indicator', 'production', 'windSpeed', 'status'];\n      var alarms = responseData.data.map(function (d) {\n        d.from = formatDate(d.from);\n        d.to = formatDate(d.to);\n        return d;\n      });\n      setTableData({\n        items: alarms,\n        fields: dataKeys\n      });\n    });\n    responseData.locations.forEach(function (rL, index) {\n      var park = rL.name;\n      var turbinesStatus = rL.generators.map(function (d) {\n        var line = {};\n        line.turbine = d.code;\n        line.indicator = d.data.indicator;\n        line.production = d.data.production;\n        line.windSpeed = d.data.windSpeed;\n        line.status = d.data.status;\n        return line;\n      });\n      var tableData = {\n        park: park,\n        items: turbinesStatus,\n        fields: ['turbine', {\n          key: 'indicator',\n          label: ''\n        }, 'production', 'windSpeed', 'status']\n      };\n      setTurbinesTablesData(tubinesTablesData.concat([tableData]));\n    });\n  };\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerators(response.generators);\n        fetchData({\n          period: dateRange,\n          groupBy: groupBy\n        });\n      }\n    });\n  };\n\n  var getBadge = function getBadge(status) {\n    switch (status) {\n      case 'green':\n        return 'success';\n\n      case 'red':\n        return 'danger';\n\n      default:\n        return 'danger';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Monitor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-medium-emphasis\",\n            children: \"Turbines Current Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, _this), !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '50px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: tubinesTablesData.length > 0 && tubinesTablesData.map(function (park) {\n            return /*#__PURE__*/_jsxDEV(CCol, {\n              xl: \"6\",\n              className: \"px-sm-4 mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: park.park\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(CDataTable, {\n                addTableClasses: \"monitor-park-table\",\n                striped: true,\n                items: park.items,\n                fields: park.fields,\n                itemsPerPage: 15,\n                pagination: true,\n                sorter: true,\n                scopedSlots: {\n                  'indicator': function indicator(item) {\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(CBadge, {\n                        color: getBadge(item.indicator)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 31\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 205,\n                      columnNumber: 29\n                    }, _this);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }, _this) : /*#__PURE__*/_jsxDEV(CCardBody, {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CSpinner, {\n        className: \"loading-spinner\",\n        color: \"#321fdb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Dashboard, \"P9LzdBrgkZILzorQzXC+lKTij9M=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/dashboard/Dashboard.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CDataTable","CRow","CCol","CSpinner","CSelect","CBadge","DocsLink","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","DataAPI","DateFilter","round","formatDate","getDateLabel","register","Dashboard","dateRange","setDateRange","groupBy","setGroupBy","generators","setGenerators","generator","setGenerator","dataLoaded","setDataLoaded","loading","setLoading","dataLoadError","setDataLoadError","tubinesTablesData","setTurbinesTablesData","fetchData","options","period","body","split","length","from","to","then","responseData","error","message","alert","dataKeys","alarms","data","map","d","setTableData","items","fields","locations","forEach","rL","index","park","name","turbinesStatus","line","turbine","code","indicator","production","windSpeed","status","tableData","key","label","concat","loadGenerators","response","getBadge","marginBottom","item","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner,\r\n  CSelect,\r\n  CBadge\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport DataAPI from '../../helpers/DataAPI.js'\r\n\r\nimport {DateFilter, round, formatDate, getDateLabel} from '../../helpers/utils.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [tubinesTablesData, setTurbinesTablesData] = useState([]);\r\n\r\n  const fetchData = (options = {}) => {\r\n\r\n    const {period, groupBy, generator} = options\r\n\r\n    const body = {}\r\n\r\n    if (generator && generator !== '0') body.generators = [generator];\r\n    \r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/dashboard',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n      if (responseData.error) {\r\n        setDataLoadError(true);\r\n          if (responseData.error.message) {\r\n          return(alert(responseData.error.message))\r\n          } else {\r\n          return(alert(responseData.error)) \r\n          }\r\n      }\r\n\r\n      const dataKeys = ['turbine','indicator', 'production', 'windSpeed', 'status'];\r\n      const alarms = responseData.data.map((d) => {\r\n        d.from = formatDate(d.from);\r\n        d.to = formatDate(d.to);\r\n        return d;\r\n      });\r\n\r\n      setTableData({\r\n        items: alarms,\r\n        fields: dataKeys\r\n      })\r\n    });\r\n    \r\n\r\n    \r\n    \r\n    \r\n    responseData.locations.forEach((rL,index) => {\r\n      const park = rL.name;\r\n      const turbinesStatus = rL.generators.map((d) => {\r\n        let line = {}\r\n        line.turbine = d.code;\r\n        line.indicator = d.data.indicator;\r\n        line.production = d.data.production;\r\n        line.windSpeed = d.data.windSpeed;\r\n        line.status = d.data.status;\r\n        return line;\r\n      });\r\n  \r\n      const tableData = {\r\n        park: park,\r\n        items: turbinesStatus,\r\n        fields:  [\r\n          'turbine',\r\n          { key: 'indicator', label: '' },\r\n          'production',\r\n          'windSpeed', \r\n          'status'\r\n        ]\r\n      }\r\n\r\n      setTurbinesTablesData(tubinesTablesData.concat([tableData]));\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n  const loadGenerators = () => {\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        if (!dataLoaded && response  && !response.error) {\r\n          setGenerators(response.generators);\r\n          fetchData({period: dateRange, groupBy: groupBy});\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const getBadge = status => {\r\n    switch (status) {\r\n      case 'green': return 'success'\r\n      case 'red': return 'danger'\r\n      default: return 'danger'\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"12\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Monitor\r\n              </h3>\r\n              <div className=\"text-medium-emphasis\">Turbines Current Status</div>\r\n              </CCol>\r\n            \r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n            \r\n\r\n          <div style={{marginBottom:'50px'}}>\r\n            <CRow>\r\n            \r\n              { tubinesTablesData.length > 0 &&\r\n                 tubinesTablesData.map(park => (  \r\n                <CCol xl=\"6\" className=\"px-sm-4 mb-4\">\r\n                  <h5>{park.park}</h5>\r\n                  <CDataTable\r\n                      addTableClasses=\"monitor-park-table\"\r\n                      striped\r\n                      items={park.items}\r\n                      fields={park.fields}\r\n                      itemsPerPage={15}\r\n                      pagination\r\n                      sorter\r\n                      scopedSlots = {{\r\n                        'indicator':\r\n                          (item)=>(\r\n                            <td>\r\n                              <CBadge color={getBadge(item.indicator)}>\r\n                              </CBadge>\r\n                            </td>\r\n                          )\r\n                      }}\r\n                    />\r\n                </CCol>\r\n                ))\r\n              }\r\n\r\n            </CRow>\r\n          </div>\r\n\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"]},"metadata":{},"sourceType":"module"}