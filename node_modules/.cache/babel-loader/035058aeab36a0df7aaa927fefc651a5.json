{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\alarms\\\\alarms.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CDataTable, CRow, CCol, CSpinner } from '@coreui/react';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable'; // import {\n//   CTable,\n//   CTableHead,\n//   CTableRow,\n//   CTableHeaderCell,\n//   CTableBody,\n//   CTableDataCell,\n// } from '@coreui/react';\n\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, round, formatDate, getDateLabel } from '../../../helpers/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState('12w'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('week'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataLoadError = _useState8[0],\n      setDataLoadError = _useState8[1];\n\n  var _useState9 = useState({\n    items: [],\n    fields: []\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tablehData = _useState10[0],\n      setTablehData = _useState10[1];\n\n  useEffect(function () {\n    refreshChart({\n      period: dateRange,\n      groupBy: groupBy\n    });\n  }, []);\n\n  var refreshChart = function refreshChart() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var period = options.period,\n        groupBy = options.groupBy;\n    var body = {};\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    setLoading(true);\n    DataAPI({\n      'endpoint': 'chart/alarms',\n      'body': body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        setDataLoadError(true);\n\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var dataKeys = ['from', 'to'].concat(_toConsumableArray(responseData.dataKeys.map(function (x) {\n        return x.replace('.0', '');\n      })));\n      var alarms = responseData.data.map(function (d) {\n        d.from = formatDate(d.from);\n        d.to = formatDate(d.to);\n        d.alarms = d.alarms.map(function (alarm, index) {\n          var rAlarm = {};\n          d[responseData.dataKeys[index].replace('.0', '')] = round(alarm) + '%';\n        });\n        delete d.alarms;\n        return d;\n      });\n      setTablehData({\n        items: alarms,\n        fields: dataKeys\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Alarms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['y', 'cm', 'cy', '12w', '12m', 'x'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n              refreshChart({\n                period: value,\n                groupBy: groupBy\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, _this), !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(CDataTable, {\n        striped: true,\n        items: tablehData.items,\n        fields: tablehData.fields\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }, _this) : /*#__PURE__*/_jsxDEV(CCardBody, {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CSpinner, {\n        className: \"loading-spinner\",\n        color: \"#321fdb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Charts, \"1B63EUAZrHF+GvFqSyDssmWMZdc=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/alarms/alarms.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CDataTable","CRow","CCol","CSpinner","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","DataAPI","DateFilter","round","formatDate","getDateLabel","Charts","dateRange","setDateRange","groupBy","setGroupBy","loading","setLoading","dataLoadError","setDataLoadError","items","fields","tablehData","setTablehData","refreshChart","period","options","body","split","length","from","to","then","responseData","error","message","alert","dataKeys","map","x","replace","alarms","data","d","alarm","index","rAlarm","value","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CDataTable,\r\n  CRow,\r\n  CCol,\r\n  CSpinner\r\n} from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n// import {\r\n//   CTable,\r\n//   CTableHead,\r\n//   CTableRow,\r\n//   CTableHeaderCell,\r\n//   CTableBody,\r\n//   CTableDataCell,\r\n// } from '@coreui/react';\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {DateFilter, round, formatDate, getDateLabel} from '../../../helpers/utils.js'\r\n\r\nconst Charts = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n\r\n  const [tablehData, setTablehData] = useState({\r\n    items: [],\r\n    fields: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    \r\n    refreshChart({period: dateRange, groupBy: groupBy});\r\n    \r\n  }, []);\r\n\r\n\r\n  const refreshChart = (options = {}) => {\r\n\r\n    const {period, groupBy} = options\r\n\r\n    const body = {}\r\n    \r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    setLoading(true);\r\n\r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/alarms',\r\n      'body': body\r\n    }).then(function (responseData) {\r\n\r\n      setLoading(false);\r\n\r\n\r\n\r\n        if (responseData.error) {\r\n          setDataLoadError(true);\r\n           if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n           } else {\r\n            return(alert(responseData.error)) \r\n           }\r\n        }\r\n\r\n        const dataKeys = ['from', 'to', ...(responseData.dataKeys.map(x => {return x.replace('.0','')}))];\r\n\r\n        const alarms = responseData.data.map((d) => {\r\n\r\n          d.from = formatDate(d.from);\r\n          d.to = formatDate(d.to);\r\n          \r\n          d.alarms = d.alarms.map((alarm, index) => {\r\n\r\n            const rAlarm = {};\r\n\r\n            d[responseData.dataKeys[index].replace('.0','')] = round(alarm)+'%'\r\n\r\n          });\r\n          delete d.alarms;\r\n          return d;\r\n        });\r\n\r\n        setTablehData({\r\n          items: alarms,\r\n          fields: dataKeys\r\n        })\r\n      });\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"6\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Alarms\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n            \r\n\r\n            <CCol sm=\"6\" class=\"text-right\">\r\n              <DateFilter value={dateRange} options={['y','cm','cy','12w','12m','x']} disabled={loading} onChange={(value) => { setDateRange(value); refreshChart({period: value, groupBy: groupBy});}} />\r\n            </CCol>\r\n                            </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n        {!loading || dataLoadError\r\n                    ? \r\n          <CCardBody>\r\n            <CDataTable\r\n              striped\r\n              items={tablehData.items}\r\n              fields={tablehData.fields}\r\n            />\r\n          </CCardBody>\r\n          :\r\n          <CCardBody style={{textAlign:'center'}}>\r\n            <CSpinner \r\n              className=\"loading-spinner\"\r\n              color='#321fdb'\r\n            />\r\n          </CCardBody>\r\n        }\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}