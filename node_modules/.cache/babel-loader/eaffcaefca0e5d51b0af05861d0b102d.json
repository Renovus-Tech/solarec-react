{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\trends.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner, CLabel } from '@coreui/react';\nimport { CChartLine, CChartPolarArea } from '@coreui/react-chartjs';\nimport { Line } from 'react-chartjs-2';\nimport { DocsLink } from 'src/reusable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ClimateTrends = function ClimateTrends() {\n  _s();\n\n  var _useState = useState('y'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('hour'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataLoadError = _useState8[0],\n      setDataLoadError = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      generatorsLoaded = _useState12[0],\n      setGeneratorsLoaded = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedGenerators = _useState14[0],\n      setSelectedGenerators = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      filterSubmitted = _useState16[0],\n      setFilterSubmitted = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      generators = _useState18[0],\n      setGenerators = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      generatorColors = _useState20[0],\n      setGeneratorColors = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      generatorsSelected = _useState22[0],\n      setGeneratorsSelected = _useState22[1];\n\n  var _useState23 = useState(true),\n      _useState24 = _slicedToArray(_useState23, 2),\n      metMastSelected = _useState24[0],\n      setMetMastSelected = _useState24[1];\n\n  var _useState25 = useState(true),\n      _useState26 = _slicedToArray(_useState25, 2),\n      allSelected = _useState26[0],\n      setAllSelected = _useState26[1];\n\n  var _useState27 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      lineChartOneData = _useState28[0],\n      setLineChartOneData = _useState28[1];\n\n  var _useState29 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState30 = _slicedToArray(_useState29, 2),\n      lineChartTwoData = _useState30[0],\n      setLineChartTwoData = _useState30[1];\n\n  var _useState31 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState32 = _slicedToArray(_useState31, 2),\n      lineChartThreeData = _useState32[0],\n      setLineChartThreeData = _useState32[1];\n\n  var _useState33 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState34 = _slicedToArray(_useState33, 2),\n      lineChartFourData = _useState34[0],\n      setLineChartFourData = _useState34[1];\n\n  var colors = ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600', '#9ceb01'];\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var fetchData = function fetchData(period) {\n    setLoading(true);\n    var body = {};\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    body.generators = selectedGenerators;\n    DataAPI({\n      'endpoint': 'chart/climate',\n      'method': 'POST',\n      'body': body\n    }).then(function (responseData) {\n      if (responseData.error && responseData.error.message) {\n        setDataLoadError(true);\n        alert(responseData.error.message);\n      }\n\n      setLoading(false);\n\n      if (responseData && responseData.graphs) {\n        var labels = responseData.graphs[0].data.map(function (x, i) {\n          return x.datetimeFrom.split(' ')[0];\n        });\n        var graphData1 = {\n          labels: labels,\n          datasets: []\n        };\n        var graphData2 = {\n          labels: labels,\n          datasets: []\n        };\n        var graphData3 = {\n          labels: labels,\n          datasets: []\n        };\n        var graphData4 = {\n          labels: labels,\n          datasets: []\n        };\n\n        if (metMastSelected) {\n          var datasetMetMastDefault = {\n            label: 'Met Mast Average',\n            borderColor: '#f32e2e',\n            pointBackgroundColor: 'transparent',\n            pointBorderColor: 'transparent',\n            backgroundColor: 'transparent'\n          };\n\n          var dataset1MetMast = _objectSpread(_objectSpread({}, datasetMetMastDefault), {}, {\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.mmWindSpeed;\n            })\n          });\n\n          var dataset2MetMast = {\n            label: 'Met Mast Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.mmTemperature;\n            }),\n            backgroundColor: '#f32e2e'\n          };\n          var dataset3MetMast = {\n            label: 'Met Mast Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.mmAirDensity;\n            }),\n            backgroundColor: '#f32e2e'\n          };\n          var dataset4MetMast = {\n            label: 'Met Mast Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.mmWindDirection;\n            }),\n            backgroundColor: '#f32e2e'\n          };\n          var dataset5MetMast = {\n            label: 'Met Mast Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.mmTurbulenceIntensity;\n            }),\n            backgroundColor: '#f32e2e'\n          };\n          graphData1.datasets.push(dataset1MetMast);\n          graphData2.datasets.push(dataset2MetMast);\n          graphData3.datasets.push(dataset3MetMast);\n          graphData4.datasets.push(dataset4MetMast);\n          graphData5.datasets.push(dataset5MetMast);\n        }\n\n        if (allSelected) {\n          var dataset1All = {\n            label: 'Turbine Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.taWindSpeed;\n            }),\n            backgroundColor: '#222222'\n          };\n          var dataset2All = {\n            label: 'Turbine Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.taTemperature;\n            }),\n            backgroundColor: '#222222'\n          };\n          var dataset4All = {\n            label: 'Turbine Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.taWindDirection;\n            }),\n            backgroundColor: '#222222'\n          };\n          var dataset5All = {\n            label: 'Turbine Average',\n            data: responseData.graphs[0].data.map(function (x, i) {\n              return x.taTurbulenceIntensity;\n            }),\n            backgroundColor: '#222222'\n          };\n          graphData1.datasets.push(dataset1All);\n          graphData2.datasets.push(dataset2All);\n          graphData4.datasets.push(dataset4All);\n          graphData5.datasets.push(dataset5All);\n        }\n\n        var metMastWindSpeedDataSet = {\n          label: 'Met Mast',\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var turbinesAverageWindSpeedDataSet = {\n          label: 'Turbines Average',\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var metMastTemperatureDataSet = {\n          label: 'Met Mast Temperature',\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          yAxisID: 'yTemperature',\n          data: []\n        };\n        var turbinesAverageTemperatureDataSet = {\n          label: 'Turbines Average Temperature',\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          yAxisID: 'yTemperature',\n          data: []\n        };\n        var metMastAirDensityDataSet = {\n          labels: [],\n          label: \"Met Mast Air Density\",\n          borderColor: '#068bff',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          yAxisID: 'yAirDensity',\n          data: []\n        };\n        var metMastWindDirectionDataSet = {\n          labels: [],\n          label: \"Met Mast\",\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var turbinesAverageWindDirectionDataSet = {\n          labels: [],\n          label: \"Turbines Average\",\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var metMastTurbulenceIntensityDataSet = {\n          labels: [],\n          label: \"Met Mast\",\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var turbinesAverageTurbulenceIntensityDataSet = {\n          labels: [],\n          label: \"Turbines Average\",\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        responseData.graphs.find(function (item) {\n          item.data.forEach(function (rDs) {\n            var mmWindSpeed = (Math.round(rDs.mmWindSpeed * 100) / 100).toFixed(2);\n            metMastWindSpeedDataSet.data.push(mmWindSpeed);\n            var taWindSpeed = (Math.round(rDs.taWindSpeed * 100) / 100).toFixed(2);\n            turbinesAverageWindSpeedDataSet.data.push(taWindSpeed);\n            metMastTemperatureDataSet.data.push(rDs.mmTemperature);\n            turbinesAverageTemperatureDataSet.data.push(rDs.taTemperature);\n            metMastAirDensityDataSet.data.push(rDs.mmAirDensity);\n            metMastWindDirectionDataSet.data.push(rDs.mmWindDirection);\n            turbinesAverageWindDirectionDataSet.data.push(rDs.taWindDirection); // metMastTurbulenceIntensityDataSet.data.push(rDs.mmWindDirection);\n\n            turbinesAverageTurbulenceIntensityDataSet.data.push(rDs.taTurbulenceIntensity);\n            var date = rDs.datetimeFrom.split(' ')[0];\n            var time = rDs.datetimeFrom.split(' ')[1];\n            var timeArr = time.split(':');\n            var rDfrom = \"\".concat(date, \" - \").concat(timeArr[0], \":\").concat(timeArr[1]);\n            var rDto = rDs.datetimeTo;\n            windSpeedData.labels.push(rDfrom);\n            temperatureData.labels.push(rDfrom);\n            windDirectionData.labels.push(rDfrom);\n            turbulenceIntensityData.labels.push(rDfrom);\n          });\n          windSpeedData.datasets.push(metMastWindSpeedDataSet);\n          windSpeedData.datasets.push(turbinesAverageWindSpeedDataSet);\n          temperatureData.datasets.push(metMastTemperatureDataSet);\n          temperatureData.datasets.push(turbinesAverageTemperatureDataSet);\n          temperatureData.datasets.push(metMastAirDensityDataSet);\n          windDirectionData.datasets.push(metMastWindDirectionDataSet);\n          windDirectionData.datasets.push(turbinesAverageWindDirectionDataSet); // turbulenceIntensityData.datasets.push(metMastTurbulenceIntensityDataSet);\n\n          turbulenceIntensityData.datasets.push(turbinesAverageTurbulenceIntensityDataSet);\n          setLineChartOneData(windSpeedData);\n          setLineChartTwoData(temperatureData);\n          setLineChartThreeData(windDirectionData);\n          setLineChartFourData(turbulenceIntensityData);\n        });\n      }\n    });\n  };\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerators(response.generators); // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\n\n        var colorIndex = 0;\n        response.generators.forEach(function (gen) {\n          generatorColors[gen.code] = colors[colorIndex % colors.length];\n          setGeneratorColors(generatorColors);\n          colorIndex++;\n        });\n        setGeneratorsLoaded(true);\n      }\n    });\n  };\n\n  var selectGenerator = function selectGenerator(id) {\n    var newSelected = selectedGenerators;\n    newSelected = newSelected.includes(id) ? newSelected.filter(function (i) {\n      return i !== id;\n    }) // remove item\n    : [].concat(_toConsumableArray(newSelected), [id]); // add item\n\n    setSelectedGenerators(newSelected);\n  };\n\n  var filterGenerators = function filterGenerators() {\n    setDataLoaded(false);\n    setGeneratorsSelected(false);\n    setFilterSubmitted(true);\n\n    if (selectedGenerators.length > 0) {\n      setLoading(true);\n      setGeneratorsSelected(true);\n      fetchData(dateRange);\n    }\n  };\n\n  var options = {\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    tooltips: {\n      enabled: true\n    }\n  };\n  var optionsTemperature = {\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    stacked: false,\n    scales: {\n      yTemperature: {\n        type: 'linear',\n        display: true,\n        position: 'left'\n      },\n      yAirDensity: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        grid: {\n          drawOnChartArea: false // only want the grid lines for one axis to show up\n\n        }\n      }\n    },\n    elements: {\n      line: {\n        tension: .4\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"9\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"3\",\n          class: \"text-right d-flex flex-center\",\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            className: \"w-100 justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              className: \"d-flex flex-center px-md-1 py-2 px-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mr-2 ml-4 m-0\",\n                style: {\n                  lineHeight: 1.2\n                },\n                children: \"Period\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n                options: 'y,cm,cy,12w,12m,x,xx'.split(','),\n                disabled: loading,\n                onChange: function onChange(value) {\n                  setDateRange(value);\n                  fetchData(value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        className: \"py-3 mb-4 mx-0 bg-light\",\n        style: {\n          borderRadius: \"3px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"10\",\n          className: \"d-flex \",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mx-2 my-2 pt-1\",\n            style: {\n              lineHeight: 1.2,\n              minWidth: '110px'\n            },\n            children: \"Select generators:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, _this), generatorsLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(CButton, {\n              style: {\n                backgroundColor: '#f32e2e',\n                color: 'white'\n              },\n              className: (metMastSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\",\n              onClick: function onClick() {\n                return setMetMastSelected(!metMastSelected);\n              },\n              children: \"Met\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(CButton, {\n              style: {\n                backgroundColor: '#222222',\n                color: 'white'\n              },\n              className: (allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\",\n              onClick: function onClick() {\n                return setAllSelected(!allSelected);\n              },\n              children: \"ALL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, _this), generators.map(function (gen, index) {\n              return /*#__PURE__*/_jsxDEV(CButton, {\n                style: {\n                  backgroundColor: generatorColors[gen.code],\n                  color: 'white'\n                },\n                className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\",\n                onClick: function onClick() {\n                  return selectGenerator(gen.id);\n                },\n                id: gen.id,\n                children: gen.code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 21\n              }, _this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, _this) : /*#__PURE__*/_jsxDEV(CSpinner, {\n            size: \"sm\",\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"2\",\n          className: \"text-right d-flex flex-end flex-justify-end \",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            className: \"mx-2 mb-1\",\n            onClick: function onClick() {\n              return filterGenerators();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, _this), generatorsSelected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Wind Speed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"m/s\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n                datasets: lineChartOneData.datasets,\n                labels: lineChartOneData.labels,\n                options: options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Temperature and Air Density\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"\\xB0C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(Line, {\n                data: lineChartTwoData,\n                options: optionsTemperature\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              xs: \"12\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Wind Direction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Degrees\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n                datasets: lineChartThreeData.datasets,\n                labels: lineChartThreeData.labels,\n                options: options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              xs: \"12\",\n              className: 'mt-4',\n              children: /*#__PURE__*/_jsxDEV(CCard, {\n                className: 'pl-3 pr-2',\n                style: {\n                  maxWidth: '480px',\n                  marginLeft: 'auto',\n                  marginRight: 'auto'\n                },\n                children: /*#__PURE__*/_jsxDEV(CCardBody, {\n                  children: /*#__PURE__*/_jsxDEV(CRow, {\n                    children: [/*#__PURE__*/_jsxDEV(CCol, {\n                      sm: \"6\",\n                      xs: \"12\",\n                      children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \"0-45 North to Northeast\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 537,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \"45-90 NorthEast to East\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 538,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \" 90-135 East to SouthEast\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 539,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \"135-180 SouthEast to South\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 540,\n                        columnNumber: 29\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 536,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n                      sm: \"6\",\n                      xs: \"12\",\n                      children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \" 180-225 South to SouthWest\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 543,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \"225-270 SouthWest to West\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 544,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \" 270-315 West to NorthWest\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 545,\n                        columnNumber: 29\n                      }, _this), /*#__PURE__*/_jsxDEV(CLabel, {\n                        className: 'w-100 mb-0',\n                        children: \" 315-360 NorthWest to North\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 546,\n                        columnNumber: 29\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 542,\n                      columnNumber: 27\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 535,\n                    columnNumber: 25\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            className: 'mb-5',\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Turbulence Intensity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n                datasets: lineChartFourData.datasets,\n                labels: lineChartFourData.labels,\n                options: options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(CSpinner, {\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: filterSubmitted && /*#__PURE__*/_jsxDEV(CRow, {\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            className: \"text-center\",\n            children: \"Select one or more generators\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateTrends, \"GTb9IPIix940U7TRaoB0fIsmnSM=\");\n\n_c = ClimateTrends;\nexport default ClimateTrends;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateTrends\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/trends.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CLabel","CChartLine","CChartPolarArea","Line","DocsLink","ClimateTrends","dateRange","setDateRange","groupBy","setGroupBy","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","generatorsLoaded","setGeneratorsLoaded","selectedGenerators","setSelectedGenerators","filterSubmitted","setFilterSubmitted","generators","setGenerators","generatorColors","setGeneratorColors","generatorsSelected","setGeneratorsSelected","metMastSelected","setMetMastSelected","allSelected","setAllSelected","labels","datasets","lineChartOneData","setLineChartOneData","lineChartTwoData","setLineChartTwoData","lineChartThreeData","setLineChartThreeData","lineChartFourData","setLineChartFourData","colors","loadGenerators","fetchData","period","body","split","length","from","to","then","responseData","error","message","alert","graphs","data","map","x","i","datetimeFrom","graphData1","graphData2","graphData3","graphData4","datasetMetMastDefault","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","dataset1MetMast","mmWindSpeed","dataset2MetMast","mmTemperature","dataset3MetMast","mmAirDensity","dataset4MetMast","mmWindDirection","dataset5MetMast","mmTurbulenceIntensity","push","graphData5","dataset1All","taWindSpeed","dataset2All","taTemperature","dataset4All","taWindDirection","dataset5All","taTurbulenceIntensity","metMastWindSpeedDataSet","turbinesAverageWindSpeedDataSet","metMastTemperatureDataSet","yAxisID","turbinesAverageTemperatureDataSet","metMastAirDensityDataSet","metMastWindDirectionDataSet","turbinesAverageWindDirectionDataSet","metMastTurbulenceIntensityDataSet","turbinesAverageTurbulenceIntensityDataSet","find","item","forEach","rDs","Math","toFixed","date","time","timeArr","rDfrom","rDto","datetimeTo","windSpeedData","temperatureData","windDirectionData","turbulenceIntensityData","response","colorIndex","gen","code","selectGenerator","id","newSelected","includes","filter","filterGenerators","options","responsive","animation","duration","tooltips","enabled","optionsTemperature","stacked","scales","yTemperature","type","display","position","yAirDensity","grid","drawOnChartArea","elements","line","tension","lineHeight","value","borderRadius","minWidth","color","index","maxWidth","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateTrends = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('hour');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n  const [metMastSelected, setMetMastSelected] = useState(true);\r\n  const [allSelected, setAllSelected] = useState(true);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartThreeData, setLineChartThreeData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartFourData, setLineChartFourData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n\r\n  const fetchData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    body.generators = selectedGenerators;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) {\r\n          setDataLoadError(true)\r\n          alert(responseData.error.message)\r\n        } \r\n\r\n        setLoading(false);\r\n\r\n        if (responseData && responseData.graphs) {\r\n\r\n          const labels = responseData.graphs[0].data.map( (x,i) => {\r\n            return x.datetimeFrom.split(' ')[0];\r\n          })\r\n          const graphData1 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData2 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData3 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n          const graphData4 = {\r\n            labels: labels,\r\n            datasets: []\r\n          };\r\n\r\n\r\n          if (metMastSelected) {\r\n            const datasetMetMastDefault = {\r\n              label: 'Met Mast Average',\r\n              borderColor: '#f32e2e',\r\n              pointBackgroundColor: 'transparent',\r\n              pointBorderColor: 'transparent',\r\n              backgroundColor: 'transparent',\r\n            }\r\n            const dataset1MetMast = {\r\n              ...datasetMetMastDefault,\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindSpeed;\r\n                      }),\r\n            }\r\n            const dataset2MetMast = {\r\n              label: 'Met Mast Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTemperature;\r\n                      }),\r\n              backgroundColor: '#f32e2e',\r\n            }\r\n            const dataset3MetMast = {\r\n              label: 'Met Mast Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmAirDensity;\r\n                      }),\r\n              backgroundColor: '#f32e2e',\r\n            }\r\n            const dataset4MetMast = {\r\n              label: 'Met Mast Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmWindDirection;\r\n                      }),\r\n              backgroundColor: '#f32e2e',\r\n            }\r\n            const dataset5MetMast = {\r\n              label: 'Met Mast Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.mmTurbulenceIntensity;\r\n                      }),\r\n              backgroundColor: '#f32e2e',\r\n            }\r\n            graphData1.datasets.push(dataset1MetMast)\r\n            graphData2.datasets.push(dataset2MetMast)\r\n            graphData3.datasets.push(dataset3MetMast)\r\n            graphData4.datasets.push(dataset4MetMast)\r\n            graphData5.datasets.push(dataset5MetMast)\r\n          }\r\n\r\n          if (allSelected) {\r\n            const dataset1All = {\r\n              label: 'Turbine Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindSpeed;\r\n                      }),\r\n              backgroundColor: '#222222',\r\n            }\r\n            const dataset2All = {\r\n              label: 'Turbine Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTemperature;\r\n                      }),\r\n              backgroundColor: '#222222',\r\n            }\r\n            const dataset4All = {\r\n              label: 'Turbine Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taWindDirection;\r\n                      }),\r\n              backgroundColor: '#222222',\r\n            }\r\n            const dataset5All = {\r\n              label: 'Turbine Average',\r\n              data: responseData.graphs[0].data.map( (x,i) => {\r\n                        return x.taTurbulenceIntensity;\r\n                      }),\r\n              backgroundColor: '#222222',\r\n            }\r\n            graphData1.datasets.push(dataset1All)\r\n            graphData2.datasets.push(dataset2All)\r\n            graphData4.datasets.push(dataset4All)\r\n            graphData5.datasets.push(dataset5All)\r\n          }\r\n\r\n\r\n          const metMastWindSpeedDataSet = {\r\n            label: 'Met Mast',\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          const turbinesAverageWindSpeedDataSet = {\r\n            label: 'Turbines Average',\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          const metMastTemperatureDataSet = {\r\n            label: 'Met Mast Temperature',\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            yAxisID: 'yTemperature',\r\n            data: []\r\n          };\r\n          const turbinesAverageTemperatureDataSet = {\r\n            label: 'Turbines Average Temperature',\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            yAxisID: 'yTemperature',\r\n            data: []\r\n          };\r\n          const metMastAirDensityDataSet = {\r\n            labels: [],\r\n            label: \"Met Mast Air Density\",\r\n            borderColor: '#068bff',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            yAxisID: 'yAirDensity',\r\n            data: []\r\n          };\r\n          const metMastWindDirectionDataSet = {\r\n            labels: [],\r\n            label: \"Met Mast\",\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          const turbinesAverageWindDirectionDataSet = {\r\n            labels: [],\r\n            label: \"Turbines Average\",\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          const metMastTurbulenceIntensityDataSet = {\r\n            labels: [],\r\n            label: \"Met Mast\",\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          const turbinesAverageTurbulenceIntensityDataSet = {\r\n            labels: [],\r\n            label: \"Turbines Average\",\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n\r\n\r\n          responseData.graphs.find((item) => {\r\n            item.data.forEach((rDs) => {\r\n              const mmWindSpeed = (Math.round(rDs.mmWindSpeed * 100) / 100).toFixed(2);\r\n              metMastWindSpeedDataSet.data.push(mmWindSpeed);\r\n              const taWindSpeed = (Math.round(rDs.taWindSpeed * 100) / 100).toFixed(2);\r\n              turbinesAverageWindSpeedDataSet.data.push(taWindSpeed);\r\n\r\n              metMastTemperatureDataSet.data.push(rDs.mmTemperature);\r\n              turbinesAverageTemperatureDataSet.data.push(rDs.taTemperature);\r\n              metMastAirDensityDataSet.data.push(rDs.mmAirDensity);\r\n              metMastWindDirectionDataSet.data.push(rDs.mmWindDirection);\r\n              turbinesAverageWindDirectionDataSet.data.push(rDs.taWindDirection);\r\n              // metMastTurbulenceIntensityDataSet.data.push(rDs.mmWindDirection);\r\n              turbinesAverageTurbulenceIntensityDataSet.data.push(rDs.taTurbulenceIntensity);\r\n\r\n              let date = rDs.datetimeFrom.split(' ')[0];\r\n              let time = rDs.datetimeFrom.split(' ')[1];\r\n              let timeArr = time.split(':');\r\n\r\n              const rDfrom = `${date} - ${timeArr[0]}:${timeArr[1]}`;\r\n              const rDto = rDs.datetimeTo;\r\n              windSpeedData.labels.push(rDfrom);\r\n              temperatureData.labels.push(rDfrom);\r\n              windDirectionData.labels.push(rDfrom);\r\n              turbulenceIntensityData.labels.push(rDfrom);\r\n            });\r\n\r\n            windSpeedData.datasets.push(metMastWindSpeedDataSet);\r\n            windSpeedData.datasets.push(turbinesAverageWindSpeedDataSet);\r\n            temperatureData.datasets.push(metMastTemperatureDataSet);\r\n            temperatureData.datasets.push(turbinesAverageTemperatureDataSet);\r\n            temperatureData.datasets.push(metMastAirDensityDataSet);\r\n            windDirectionData.datasets.push(metMastWindDirectionDataSet);\r\n            windDirectionData.datasets.push(turbinesAverageWindDirectionDataSet);\r\n            // turbulenceIntensityData.datasets.push(metMastTurbulenceIntensityDataSet);\r\n            turbulenceIntensityData.datasets.push(turbinesAverageTurbulenceIntensityDataSet);\r\n            \r\n            \r\n            setLineChartOneData(windSpeedData)\r\n            setLineChartTwoData(temperatureData)\r\n            setLineChartThreeData(windDirectionData)\r\n            setLineChartFourData(turbulenceIntensityData)\r\n\r\n          });\r\n\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n\r\n          setGenerators(response.generators);\r\n          // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n\r\n          let colorIndex = 0\r\n          response.generators.forEach((gen) => {\r\n            generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n            setGeneratorColors(generatorColors);\r\n            colorIndex++\r\n          });\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const options =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    }\r\n  }\r\n\r\n  const optionsTemperature =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    stacked: false,\r\n    scales: {\r\n      yTemperature: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n      },\r\n      yAirDensity: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        grid: {\r\n          drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n        },\r\n      },\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"3\" class=\"text-right d-flex flex-center\">\r\n              <CRow className={\"w-100 justify-content-end\"}>\r\n                <CCol className=\"d-flex flex-center px-md-1 py-2 px-4\">\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n                  <DateFilter options={'y,cm,cy,12w,12m,x,xx'.split(',')} disabled={loading} onChange={(value) => { setDateRange(value); fetchData(value);}} />\r\n                </CCol>\r\n              </CRow>\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select generators:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  <CButton \r\n                    style={{backgroundColor:'#f32e2e',color: 'white'}} \r\n                    className={(metMastSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setMetMastSelected(!metMastSelected)}\r\n                    >\r\n                    Met\r\n                  </CButton>\r\n                  <CButton \r\n                    style={{backgroundColor:'#222222',color: 'white'}} \r\n                    className={(allSelected ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                    onClick={() => setAllSelected(!allSelected)}\r\n                    >\r\n                    ALL\r\n                  </CButton>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >Submit</CButton>\r\n            </CCol>\r\n        </CRow>\r\n\r\n        { generatorsSelected ?\r\n\r\n          <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <CChartLine\r\n                      datasets={lineChartOneData.datasets}\r\n                      labels={lineChartOneData.labels}\r\n                      options={options}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\">Temperature and Air Density</h4>\r\n                    <div>°C</div>\r\n                    <Line data={lineChartTwoData}\r\n                          options={optionsTemperature} />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol xs=\"12\">\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Direction</h4>\r\n                    <div>Degrees</div>\r\n                    <CChartLine\r\n                      datasets={lineChartThreeData.datasets}\r\n                      labels={lineChartThreeData.labels}\r\n                      options={options}\r\n                    />\r\n                  </CCol>\r\n                  <CCol xs=\"12\" className={'mt-4'}>\r\n                    <CCard className={'pl-3 pr-2'} style={{maxWidth: '480px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                      <CCardBody>\r\n                        <CRow>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}>0-45 North to Northeast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>45-90 NorthEast to East</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 90-135 East to SouthEast</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>135-180 SouthEast to South</CLabel>\r\n                          </CCol>\r\n                          <CCol sm=\"6\" xs=\"12\">\r\n                            <CLabel className={'w-100 mb-0'}> 180-225 South to SouthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}>225-270 SouthWest to West</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 270-315 West to NorthWest</CLabel>\r\n                            <CLabel className={'w-100 mb-0'}> 315-360 NorthWest to North</CLabel>\r\n                          </CCol>\r\n                        </CRow>\r\n                      </CCardBody>\r\n                    </CCard>\r\n                    \r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Turbulence Intensity</h4>\r\n                    <div>%</div>\r\n                    <CChartLine\r\n                      datasets={lineChartFourData.datasets}\r\n                      labels={lineChartFourData.labels}\r\n                      options={options}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateTrends\r\n"]},"metadata":{},"sourceType":"module"}