{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\wind\\\\data-availability\\\\data-availability.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CBadge, CCard, CCardBody, CCardHeader, CCol, CDataTable, CRow, CSelect, CSpinner, CButton } from '@coreui/react';\nimport { DocsLink } from 'src/reusable';\nimport DataAPI from '../../../../helpers/DataAPI.js';\nimport { formatDate, DateFilter, getDateLabel, round } from '../../../../helpers/utils.js';\nimport { setCookie, getCookie } from '../../../../helpers/sessionCookie.js';\nimport ChartLoading from '../../../others/ChartLoading.js'; // const getBadge = status => {\n//   switch (status) {\n//     case '1': return 'success'\n//     case '0': return 'danger'\n//     default: return 'success'\n//   }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar fields = ['from', 'to', 'turbineData', 'metMastWindSpeed', 'matMastTemperature', 'metMastWindDirection', 'metMastPressure', 'metMastHumidity', 'gridCurtailmentStatus'];\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tableData = _useState4[0],\n      setTableData = _useState4[1];\n\n  var _useState5 = useState('y'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      period = _useState6[0],\n      setPeriod = _useState6[1];\n\n  var _useState7 = useState('week'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      groupBy = _useState8[0],\n      setGroupBy = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      generators = _useState10[0],\n      setGenerators = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      generator = _useState12[0],\n      setGenerator = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      generatorsLoaded = _useState14[0],\n      setGeneratorsLoaded = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      dataLoaded = _useState16[0],\n      setDataLoaded = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      dataLoadError = _useState18[0],\n      setDataLoadError = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      loading = _useState20[0],\n      setLoading = _useState20[1];\n\n  var fetchData = function fetchData() {\n    setLoading(true);\n    var body = {};\n    body.location = getCookie('location');\n    if (generator && generator !== '0') body.generators = [generator];\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    DataAPI({\n      'endpoint': 'chart/dataAvailability',\n      'body': body,\n      'method': 'POST'\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      var tableData = [];\n\n      if (response && response.data) {\n        // response.data.table.forEach(\n        //   row => {\n        //     tableData.push({\n        //       from: formatDate(row.from),\n        //       to: formatDate(row.to),\n        //       metMastWindDirection: round(row.metMast.direction)+'%',\n        //       metMastWindSpeed: round(row.metMast.speed)+'%',\n        //       temperature: round(row.metMast.temperature)+'%',\n        //       turbineAlarmCode: round(row.turbineState.alarm)+'%',\n        //       turbineStatus: round(row.turbineState.state)+'%',\n        //       turbineWindDirection: round(row.windAverages.direction)+'%',\n        //       turbineWindPower: round(row.windAverages.powerAverage)+'%',\n        //       turbineWindSpeed: round(row.windAverages.speed)+'%',\n        //     })\n        //   }\n        // );\n        response.data.table.forEach(function (row) {\n          tableData.push({\n            from: formatDate(row.from),\n            to: formatDate(row.to),\n            turbineData: round(row.total.turbineData) + '%',\n            metMastWindDirection: round(row.metMast.direction) + '%',\n            metMastWindSpeed: round(row.metMast.speed) + '%',\n            matMastTemperature: round(row.metMast.temperature) + '%',\n            metMastPressure: round(row.metMast.pressure) + '%',\n            metMastHumidity: round(row.metMast.humidity) + '%',\n            gridCurtailmentStatus: row.turbineState.state + '%'\n          });\n        });\n        setTableData(tableData);\n        setDataLoaded(true);\n      }\n    }).catch(function (e) {\n      setLoading(false);\n      alert(e);\n    });\n  };\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response && response.error) {\n        setCookie('lastTimeStamp', '');\n        setCookie('name', '');\n        window.location.reload();\n      } else if (!dataLoaded && response && !response.error) {\n        if (response.generators != null) setGenerators(response.generators);\n        setGeneratorsLoaded(true);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CRow, {\n    children: /*#__PURE__*/_jsxDEV(CCol, {\n      xs: \"12\",\n      lg: \"12\",\n      children: /*#__PURE__*/_jsxDEV(CCard, {\n        children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"3\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                id: \"traffic\",\n                className: \"card-title mb-0\",\n                children: \"Data Availability\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"small text-medium-emphasis\",\n                children: getDateLabel(period)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              sm: \"9\",\n              className: \"text-right d-flex px-2 flex-center flex-justify-end\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mr-2 ml-1 ml-xl-2 m-0\",\n                style: {\n                  lineHeight: 2.4\n                },\n                children: \"Turbine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n                className: 'input-md',\n                disabled: loading,\n                onChange: function onChange(ev) {\n                  setGenerator(ev.target.value);\n                },\n                custom: true,\n                name: \"generator\",\n                id: \"generator\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\",\n                  children: \"All turbines\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 21\n                }, _this), generators.map(function (oGenerator) {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: oGenerator.id,\n                    children: oGenerator.code\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 39\n                  }, _this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mr-2 ml-1 ml-xl-2 m-0\",\n                style: {\n                  lineHeight: 2.4,\n                  minWidth: '58px'\n                },\n                children: \"Group by\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n                className: 'input-md',\n                value: groupBy,\n                disabled: loading,\n                onChange: function onChange(ev) {\n                  setGroupBy(ev.target.value);\n                },\n                custom: true,\n                name: \"groupby\",\n                id: \"groupby\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"day\",\n                  children: \"Day\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"week\",\n                  children: \"Week\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"month\",\n                  children: \"Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 21\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mr-2 ml-1 ml-xl-2 m-0\",\n                style: {\n                  lineHeight: 2.4\n                },\n                children: \"Period\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n                value: period,\n                options: ['y', 'cm', 'cy', 'x', 'xx'],\n                disabled: loading,\n                onChange: function onChange(value) {\n                  setPeriod(value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(CButton, {\n                color: \"primary\",\n                disabled: loading || !generatorsLoaded,\n                className: \"mr-2 ml-3\",\n                onClick: function onClick() {\n                  fetchData();\n                },\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n          children: (loading || dataLoaded) && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'right'\n            },\n            children: dataLoaded || dataLoadError ? /*#__PURE__*/_jsxDEV(CDataTable, {\n              items: tableData,\n              fields: fields,\n              striped: true,\n              itemsPerPage: 50,\n              pagination: true,\n              theadTopSlot: [/*#__PURE__*/_jsxDEV(\"th\", {\n                colSpan: 2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(\"th\", {\n                colSpan: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(\"th\", {\n                colSpan: 5,\n                className: 'text-center border-left border-right',\n                children: \"MetMast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(\"th\", {\n                colSpan: 1,\n                className: 'text-center border-left border-right'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 29\n              }, _this)] // scopedSlots = {{\n              //   'gridCurtailmentStatus':\n              //     (item)=>(\n              //       <td>\n              //         <CBadge color={getBadge(item.gridCurtailmentStatus)}>\n              //           {item.gridCurtailmentStatus}\n              //         </CBadge>\n              //       </td>\n              //     )\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, _this) : /*#__PURE__*/_jsxDEV(ChartLoading, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 21\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Charts, \"zro9dEzXu5HCd37DgwDt5xZ+5DM=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/wind/data-availability/data-availability.js"],"names":["React","useEffect","useState","CBadge","CCard","CCardBody","CCardHeader","CCol","CDataTable","CRow","CSelect","CSpinner","CButton","DocsLink","DataAPI","formatDate","DateFilter","getDateLabel","round","setCookie","getCookie","ChartLoading","fields","Charts","data","setData","tableData","setTableData","period","setPeriod","groupBy","setGroupBy","generators","setGenerators","generator","setGenerator","generatorsLoaded","setGeneratorsLoaded","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","fetchData","body","location","split","length","from","to","then","response","error","message","alert","table","forEach","row","push","turbineData","total","metMastWindDirection","metMast","direction","metMastWindSpeed","speed","matMastTemperature","temperature","metMastPressure","pressure","metMastHumidity","humidity","gridCurtailmentStatus","turbineState","state","catch","e","loadGenerators","window","reload","lineHeight","ev","target","value","map","oGenerator","id","code","minWidth","textAlign"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CSelect,\r\n  CSpinner,\r\n  CButton\r\n} from '@coreui/react'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport DataAPI from '../../../../helpers/DataAPI.js'\r\nimport {formatDate, DateFilter, getDateLabel, round} from '../../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../../helpers/sessionCookie.js'\r\n\r\nimport ChartLoading from '../../../others/ChartLoading.js'\r\n\r\n// const getBadge = status => {\r\n//   switch (status) {\r\n//     case '1': return 'success'\r\n//     case '0': return 'danger'\r\n//     default: return 'success'\r\n//   }\r\n// }\r\n\r\nconst fields = [\r\n  'from',\r\n  'to',\r\n  'turbineData',\r\n  'metMastWindSpeed',\r\n  'matMastTemperature',\r\n  'metMastWindDirection',\r\n  'metMastPressure',\r\n  'metMastHumidity',\r\n  'gridCurtailmentStatus'\r\n]\r\n\r\n\r\n\r\n\r\nconst Charts = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  \r\n  const [period, setPeriod] = useState('y');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generator, setGenerator] = useState(null);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n   const fetchData = () => {\r\n\r\n    setLoading(true);\r\n\r\n\r\n    const body = {}\r\n    body.location = getCookie('location');\r\n    if (generator && generator !== '0') body.generators = [generator];\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy\r\n\r\n    DataAPI({\r\n      'endpoint': 'chart/dataAvailability',\r\n      'body': body,\r\n      'method': 'POST'\r\n    }).then(\r\n      response => {\r\n\r\n        setLoading(false);\r\n\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n           if (response.error.message) {\r\n            return(alert(response.error.message))\r\n           } else {\r\n            return(alert(response.error)) \r\n           }\r\n        }\r\n\r\n          const tableData = [];\r\n        if (response && response.data){\r\n\r\n          // response.data.table.forEach(\r\n          //   row => {\r\n          //     tableData.push({\r\n          //       from: formatDate(row.from),\r\n          //       to: formatDate(row.to),\r\n          //       metMastWindDirection: round(row.metMast.direction)+'%',\r\n          //       metMastWindSpeed: round(row.metMast.speed)+'%',\r\n          //       temperature: round(row.metMast.temperature)+'%',\r\n          //       turbineAlarmCode: round(row.turbineState.alarm)+'%',\r\n          //       turbineStatus: round(row.turbineState.state)+'%',\r\n          //       turbineWindDirection: round(row.windAverages.direction)+'%',\r\n          //       turbineWindPower: round(row.windAverages.powerAverage)+'%',\r\n          //       turbineWindSpeed: round(row.windAverages.speed)+'%',\r\n          //     })\r\n          //   }\r\n          // );\r\n          response.data.table.forEach(\r\n            row => {\r\n              tableData.push({\r\n                from: formatDate(row.from),\r\n                to: formatDate(row.to),\r\n                turbineData: round(row.total.turbineData)+'%',\r\n                metMastWindDirection: round(row.metMast.direction)+'%',\r\n                metMastWindSpeed: round(row.metMast.speed)+'%',\r\n                matMastTemperature: round(row.metMast.temperature)+'%',\r\n                metMastPressure: round(row.metMast.pressure)+'%',\r\n                metMastHumidity: round(row.metMast.humidity)+'%',\r\n                gridCurtailmentStatus: row.turbineState.state+'%',\r\n              })\r\n            }\r\n          );\r\n\r\n          setTableData(tableData);\r\n          setDataLoaded(true);\r\n        }\r\n      }\r\n    ).catch(\r\n      e => {\r\n        setLoading(false);\r\n        alert(e);\r\n\r\n      }\r\n    );\r\n\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n\r\n   const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (response && response.error) {\r\n          setCookie('lastTimeStamp', '');\r\n          setCookie('name', '');\r\n          window.location.reload();\r\n        }\r\n        else if (!dataLoaded && response  && !response.error) {\r\n\r\n          if (response.generators != null)\r\n            setGenerators(response.generators);\r\n          setGeneratorsLoaded(true)\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  return (\r\n\r\n      <CRow>\r\n        <CCol xs=\"12\" lg=\"12\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm=\"3\">\r\n                  <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                    Data Availability\r\n                  </h3>\r\n                  <div className=\"small text-medium-emphasis\">{getDateLabel(period)}</div>\r\n                  </CCol>\r\n                \r\n                <CCol sm=\"9\" className=\"text-right d-flex px-2 flex-center flex-justify-end\">\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4}}>Turbine</h6>\r\n                  <CSelect className={'input-md'} disabled={loading} onChange={(ev) => {setGenerator(ev.target.value); }} custom name=\"generator\" id=\"generator\">\r\n                    <option value=\"0\">All turbines</option>\r\n                  {generators.map((oGenerator) => (\r\n                                      <option value={oGenerator.id}>\r\n                                        {oGenerator.code}\r\n                                      </option>\r\n                                    ))}</CSelect>\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4,minWidth:'58px'}}>Group by</h6>\r\n                  <CSelect className={'input-md'} value={groupBy} disabled={loading} onChange={(ev) => { setGroupBy(ev.target.value); }} custom name=\"groupby\" id=\"groupby\">\r\n                    <option value=\"day\">Day</option>\r\n                    <option value=\"week\">Week</option>\r\n                    <option value=\"month\">Month</option>\r\n                  </CSelect>\r\n\r\n                  <h6 className=\"mr-2 ml-1 ml-xl-2 m-0\" style={{lineHeight:2.4}}>Period</h6>\r\n                  <DateFilter value={period} options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setPeriod(value);}} />\r\n                  <CButton color=\"primary\" disabled={loading || !generatorsLoaded} className=\"mr-2 ml-3\" onClick={() => { fetchData();}} >Submit</CButton>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n\r\n            <CCardBody>\r\n             { (loading || dataLoaded) &&\r\n              <div style={{textAlign: 'right'}}>\r\n                { dataLoaded || dataLoadError\r\n                      ? \r\n                    <CDataTable\r\n                      items={tableData}\r\n                      fields={fields}\r\n                      striped\r\n                      itemsPerPage={50}\r\n                      pagination\r\n                      theadTopSlot={[\r\n                            <th colSpan={2}></th>,\r\n                            <th colSpan={1}></th>,\r\n                            <th colSpan={5} className={'text-center border-left border-right'}>MetMast</th>,\r\n                            <th colSpan={1} className={'text-center border-left border-right'}></th>\r\n                          \r\n                      ]}\r\n                      // scopedSlots = {{\r\n                      //   'gridCurtailmentStatus':\r\n                      //     (item)=>(\r\n                      //       <td>\r\n                      //         <CBadge color={getBadge(item.gridCurtailmentStatus)}>\r\n                      //           {item.gridCurtailmentStatus}\r\n                      //         </CBadge>\r\n                      //       </td>\r\n                      //     )\r\n\r\n                      // }}\r\n                    />\r\n                    : \r\n                    <ChartLoading/>\r\n              }\r\n              </div>\r\n            }\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}