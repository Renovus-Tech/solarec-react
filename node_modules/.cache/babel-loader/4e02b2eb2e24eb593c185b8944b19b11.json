{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\helpers\\\\SessionTimeout.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef, Fragment } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar SessionTimeout = function SessionTimeout() {\n  _s();\n\n  var _useState = useState(['click', 'load', 'scroll']),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      second = _useState4[0],\n      setSecond = _useState4[1];\n\n  var _useAuth = useAuth(),\n      authenticated = _useAuth.authState.authenticated,\n      logout = _useAuth.logout;\n\n  var timeStamp;\n  var warningInactiveInterval = useRef();\n  var startTimerInterval = useRef(); // start inactive check\n\n  var timeChecker = function timeChecker() {\n    startTimerInterval.current = setTimeout(function () {\n      var storedTimeStamp = sessionStorage.getItem('lastTimeStamp');\n      warningInactive(storedTimeStamp);\n    }, 60000);\n  }; // warning timer\n\n\n  var warningInactive = function warningInactive(timeString) {\n    clearTimeout(startTimerInterval.current);\n    warningInactiveInterval.current = setInterval(function () {\n      var maxTime = 2; // Maximum ideal time given before logout \n\n      var popTime = 1; // remaining time (notification) left to logout.\n\n      var diff = moment.duration(moment().diff(moment(timeString)));\n      var minPast = diff.minutes();\n      var leftSecond = 60 - diff.seconds();\n\n      if (minPast === popTime) {\n        setSecond(leftSecond);\n      }\n\n      if (minPast === maxTime) {\n        clearInterval(warningInactiveInterval.current);\n        sessionStorage.removeItem('lastTimeStamp'); // your logout function here\n      }\n    }, 1000);\n  }; // reset interval timer\n\n\n  var resetTimer = useCallback(function () {\n    clearTimeout(startTimerInterval.current);\n    clearInterval(warningInactiveInterval.current);\n\n    if (authenticated) {\n      timeStamp = moment();\n      sessionStorage.setItem('lastTimeStamp', timeStamp);\n    } else {\n      clearInterval(warningInactiveInterval.current);\n      sessionStorage.removeItem('lastTimeStamp');\n    }\n\n    timeChecker();\n  }, [authenticated]);\n  useEffect(function () {\n    events.forEach(function (event) {\n      window.addEventListener(event, resetTimer);\n    });\n    timeChecker();\n    return function () {\n      clearTimeout(startTimerInterval.current);\n    };\n  }, [resetTimer, events, timeChecker]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(SessionTimeout, \"S4bzp7ht9WDSOOvPA4vUnUo0bQ0=\", true);\n\n_c = SessionTimeout;\nexport default SessionTimeout;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionTimeout\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/helpers/SessionTimeout.js"],"names":["React","useState","useEffect","useCallback","useRef","Fragment","moment","SessionTimeout","events","setEvents","second","setSecond","useAuth","authenticated","authState","logout","timeStamp","warningInactiveInterval","startTimerInterval","timeChecker","current","setTimeout","storedTimeStamp","sessionStorage","getItem","warningInactive","timeString","clearTimeout","setInterval","maxTime","popTime","diff","duration","minPast","minutes","leftSecond","seconds","clearInterval","removeItem","resetTimer","setItem","forEach","event","window","addEventListener"],"mappings":"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","sourcesContent":["import React, {\r\n    useState,\r\n    useEffect,\r\n    useCallback,\r\n    useRef,\r\n    Fragment,\r\n  } from 'react';\r\nimport moment from 'moment';\r\n  \r\nconst SessionTimeout =()=> {\r\n\r\n    const [events, setEvents] = useState(['click', 'load', 'scroll']);\r\n    const [second, setSecond] = useState(0);\r\n    const {\r\n        authState: { authenticated },\r\n        logout,\r\n      } = useAuth();\r\n\r\n    let timeStamp;\r\n    let warningInactiveInterval = useRef();\r\n    let startTimerInterval = useRef();\r\n\r\n    // start inactive check\r\n    let timeChecker = () => {\r\n        startTimerInterval.current = setTimeout(() => {\r\n            let storedTimeStamp = sessionStorage.getItem('lastTimeStamp');\r\n            warningInactive(storedTimeStamp);\r\n        }, 60000);\r\n    };\r\n\r\n    // warning timer\r\n    let warningInactive = (timeString) => {\r\n        clearTimeout(startTimerInterval.current);\r\n    \r\n        warningInactiveInterval.current = setInterval(() => {\r\n        const maxTime = 2; // Maximum ideal time given before logout \r\n        const popTime = 1; // remaining time (notification) left to logout.\r\n    \r\n        const diff = moment.duration(moment().diff(moment(timeString)));\r\n        const minPast = diff.minutes();\r\n        const leftSecond = 60 - diff.seconds();\r\n    \r\n        if (minPast === popTime) {\r\n            setSecond(leftSecond);\r\n        }\r\n    \r\n        if (minPast === maxTime) {\r\n            clearInterval(warningInactiveInterval.current);\r\n            sessionStorage.removeItem('lastTimeStamp');\r\n            // your logout function here\r\n        }\r\n        }, 1000);\r\n    };\r\n\r\n    // reset interval timer\r\n    let resetTimer = useCallback(() => {\r\n        clearTimeout(startTimerInterval.current);\r\n        clearInterval(warningInactiveInterval.current);\r\n    \r\n        if (authenticated) {\r\n            timeStamp = moment();\r\n            sessionStorage.setItem('lastTimeStamp', timeStamp);\r\n        } else {\r\n            clearInterval(warningInactiveInterval.current);\r\n            sessionStorage.removeItem('lastTimeStamp');\r\n        }\r\n        timeChecker();\r\n    }, [authenticated]);\r\n    \r\n    \r\n    useEffect(() => {\r\n        events.forEach((event) => {\r\n        window.addEventListener(event, resetTimer);\r\n        });\r\n    \r\n        timeChecker();\r\n    \r\n        return () => {\r\n        clearTimeout(startTimerInterval.current);\r\n        };\r\n    }, [resetTimer, events, timeChecker]);\r\n\r\n\r\n    return <Fragment />;\r\n};\r\n\r\nexport default SessionTimeout;"]},"metadata":{},"sourceType":"module"}