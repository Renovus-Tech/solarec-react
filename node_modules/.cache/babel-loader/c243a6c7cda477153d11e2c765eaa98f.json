{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populatePlaceholders;\n\nvar _t = require(\"@babel/types\");\n\nvar blockStatement = _t.blockStatement,\n    cloneNode = _t.cloneNode,\n    emptyStatement = _t.emptyStatement,\n    expressionStatement = _t.expressionStatement,\n    identifier = _t.identifier,\n    isStatement = _t.isStatement,\n    isStringLiteral = _t.isStringLiteral,\n    stringLiteral = _t.stringLiteral,\n    validate = _t.validate;\n\nfunction populatePlaceholders(metadata, replacements) {\n  var ast = cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(function (placeholder) {\n      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {\n        var placeholderName = placeholder.name;\n        throw new Error(\"Error: No substitution given for \\\"\".concat(placeholderName, \"\\\". If this is not meant to be a\\n            placeholder you may want to consider passing one of the following options to @babel/template:\\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['\").concat(placeholderName, \"'])}\\n            - { placeholderPattern: /^\").concat(placeholderName, \"$/ }\"));\n      }\n    });\n    Object.keys(replacements).forEach(function (key) {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(\"Unknown substitution \\\"\".concat(key, \"\\\" given\"));\n      }\n    });\n  }\n\n  metadata.placeholders.slice().reverse().forEach(function (placeholder) {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = \"@babel/template placeholder \\\"\".concat(placeholder.name, \"\\\": \").concat(e.message);\n      throw e;\n    }\n  });\n  return ast;\n}\n\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(function (node) {\n        return cloneNode(node);\n      });\n    } else if (typeof replacement === \"object\") {\n      replacement = cloneNode(replacement);\n    }\n  }\n\n  var _placeholder$resolve = placeholder.resolve(ast),\n      parent = _placeholder$resolve.parent,\n      key = _placeholder$resolve.key,\n      index = _placeholder$resolve.index;\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = stringLiteral(replacement);\n    }\n\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = identifier(replacement);\n        }\n\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    validate(parent, key, replacement);\n    parent[key] = replacement;\n  } else {\n    var items = parent[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice.apply(items, [index, 1].concat(_toConsumableArray(replacement)));\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    validate(parent, key, items);\n    parent[key] = items;\n  }\n}","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/node_modules/@babel/template/lib/populate.js"],"names":["Object","defineProperty","exports","value","default","populatePlaceholders","_t","require","blockStatement","cloneNode","emptyStatement","expressionStatement","identifier","isStatement","isStringLiteral","stringLiteral","validate","metadata","replacements","ast","placeholders","forEach","placeholder","prototype","hasOwnProperty","call","name","placeholderName","Error","keys","key","placeholderNames","has","slice","reverse","applyReplacement","e","message","replacement","isDuplicate","Array","isArray","map","node","resolve","parent","index","type","undefined","items","splice"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populatePlaceholders;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  blockStatement,\n  cloneNode,\n  emptyStatement,\n  expressionStatement,\n  identifier,\n  isStatement,\n  isStringLiteral,\n  stringLiteral,\n  validate\n} = _t;\n\nfunction populatePlaceholders(metadata, replacements) {\n  const ast = cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n        throw new Error(`Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`);\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  metadata.placeholders.slice().reverse().forEach(placeholder => {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n      throw e;\n    }\n  });\n  return ast;\n}\n\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = cloneNode(replacement);\n    }\n  }\n\n  const {\n    parent,\n    key,\n    index\n  } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = stringLiteral(replacement);\n    }\n\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = identifier(replacement);\n        }\n\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    validate(parent, key, replacement);\n    parent[key] = replacement;\n  } else {\n    const items = parent[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    validate(parent, key, items);\n    parent[key] = items;\n  }\n}"]},"metadata":{},"sourceType":"script"}