{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\diagnostics\\\\diagnostics.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x'); // var mixedChart = new Chart(ctx, {\n//     data: {\n//         datasets: [\n//         {\n//             type: 'line',\n//             label: 'Line Dataset',\n//             data: [50, 50, 50, 50],\n//         }],\n//         labels: ['January', 'February', 'March', 'April']\n//     },\n//     // options: options\n// });\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generators = _useState4[0],\n      setGenerators = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generatorsLoaded = _useState6[0],\n      setGeneratorsLoaded = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      park = _useState8[0],\n      setPark = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setDate = _useState10[1];\n\n  var _useState11 = useState('12w'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dateRange = _useState12[0],\n      setDateRange = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      data = _useState14[0],\n      setData = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loading = _useState16[0],\n      setLoading = _useState16[1];\n\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n\n  var fetchData = function fetchData(dateRange) {\n    var period = options.period,\n        generator = options.generator;\n    setLoading(true);\n    var body = {};\n    if (generator) body.generators = [generator]; // console.log('.....', period, period.split('-').length)\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    DataAPI({\n      'endpoint': 'chart/pitchWindspeed',\n      'method': 'POST',\n      'body': body\n    }).then(function (response) {\n      setLoading(false);\n\n      if (response.error) {\n        setDataLoadError(true);\n\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      } // if (!response.generator) return(alert('No generator datasets'));\n\n\n      var generatorData = response.generator && response.generator[0].data;\n      setDataLoaded(true);\n      setData(response);\n\n      if (generatorData && generatorData.hasOwnProperty('curves')) {\n        setCurves(generatorData.curves);\n        refreshChart(generatorData.curves);\n      } else {\n        setCurves([]);\n      }\n\n      if (generatorData) {\n        if (generatorData.hasOwnProperty('dataUse')) processTableData1(generatorData.dataUse);\n        if (generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData2(generatorData.dataFilteredDueTo);\n        if (generatorData.hasOwnProperty('performance')) setPerformance(generatorData.performance);\n      }\n    });\n  };\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerator(response.generators[0].id);\n        setGenerators(response.generators);\n        fetchData({\n          period: dateRange,\n          generator: response.generators[0].id\n        });\n      }\n    });\n  };\n\n  var refreshChart = function refreshChart(curves) {\n    if (curves.length == 0) return;\n    var graphData = {\n      labels: [],\n      datasets: [],\n      backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    };\n    var dataset = {\n      title: '',\n      labels: [],\n      label: \"Reference Power Curve\",\n      backgroundColor: 'red',\n      data: []\n    };\n    var dataset2 = {\n      labels: [],\n      label: \"Turbine Power Curve\",\n      backgroundColor: 'blue',\n      data: []\n    };\n    var dataset3 = {\n      labels: [],\n      label: \"Time percentage\",\n      backgroundColor: 'blue',\n      data: []\n    };\n    var labels = [];\n    var labels2 = [];\n    var graphData2 = {\n      labels: [],\n      datasets: [],\n      backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n    };\n    curves[0].x.forEach(function (x) {\n      labels.push(round(x));\n    });\n    var data2 = {\n      datasets: [{\n        label: curves[0].label,\n        data: curves[0].x.map(function (x, i) {\n          return {\n            x: x,\n            y: curves[0].y[i]\n          };\n        }),\n        backgroundColor: 'rgba(255, 99, 132, 1)'\n      }, {\n        label: curves[1].label,\n        data: curves[0].x.map(function (x, i) {\n          return {\n            x: x,\n            y: curves[0].y[i]\n          };\n        }),\n        backgroundColor: 'rgba(44, 99, 132, 1)'\n      }]\n    };\n    /*curves[0].x.forEach(\r\n      x => {\r\n        labels.push(round(x))\r\n      }\r\n    );\r\n      dataset.data = curves[0].y;\r\n    dataset2.data = curves[1].y;\r\n        const max = Math.ceil(Math.max(...curves[2].x));\r\n    const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\r\n    const percentages = [];\r\n    let aux;\r\n    let qty;\r\n    let percentage;\r\n    const qtyTotal = curves[2].x.length;\r\n    windSpeeds.forEach(\r\n      function process(windSpeed) { \r\n        aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\r\n        qty = aux.length;\r\n        percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\r\n          // percentage = (qty*100/qtyTotal) * 100 / 100;\r\n        // percentage = +(Math.round(percentage + \"e+2\")  + \"e-2\");\r\n          percentages.push(percentage);\r\n        graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\r\n      }\r\n    );\r\n      dataset3.data = percentages;\r\n    */\n\n    graphData.datasets.push(dataset);\n    graphData.datasets.push(dataset2);\n    graphData.labels = labels;\n    setGraphData(graphData);\n  };\n\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este aÃ±o']; // const data2 = {\n  //   datasets: [\n  //     {\n  //       label: 'A dataset',\n  //       data: [{x:4,y:55},{x:66,y:43}],\n  //       backgroundColor: 'rgba(255, 99, 132, 1)',\n  //     },\n  //   ],\n  // }\n  // const change = (ev) => {\n  // }\n  // const refreshChart = (dateRange) => {\n  //   fetchData(dateRange);\n  // }\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"7\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Diagnostics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"5\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['cm', 'cy', '12w', '12m', 'x'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n              fetchData(value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 16\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: graphData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Charts, \"iZBFfzIYvHGR6KIP9QtTE9Jf5Is=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/diagnostics/diagnostics.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Bar","Chart","Line","Scatter","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","park","setPark","date","setDate","dateRange","setDateRange","data","setData","loading","setLoading","loadGenerators","fetchData","period","options","generator","body","split","length","from","to","then","response","error","setDataLoadError","message","alert","generatorData","setDataLoaded","hasOwnProperty","setCurves","curves","refreshChart","processTableData1","dataUse","processTableData2","dataFilteredDueTo","setPerformance","performance","dataLoaded","setGenerator","id","backgroundColor","dataset","title","label","dataset2","dataset3","labels2","graphData2","x","forEach","push","data2","map","i","y","dataSets","parks","dates","animation","duration","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect\r\n} from '@coreui/react'\r\n\r\n\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\n// var mixedChart = new Chart(ctx, {\r\n//     data: {\r\n//         datasets: [\r\n//         {\r\n//             type: 'line',\r\n//             label: 'Line Dataset',\r\n//             data: [50, 50, 50, 50],\r\n//         }],\r\n//         labels: ['January', 'February', 'March', 'April']\r\n//     },\r\n//     // options: options\r\n// });\r\n\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n\r\n  const fetchData = (dateRange) => {\r\n\r\n    const {period, generator} = options\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (generator) body.generators = [generator];\r\n\r\n    // console.log('.....', period, period.split('-').length)\r\n\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n\r\n    \r\n    DataAPI({\r\n      'endpoint': 'chart/pitchWindspeed',\r\n      'method': 'POST',\r\n      'body': body\r\n    }).then(\r\n      response => {\r\n\r\n\r\n        setLoading(false);\r\n\r\n        if (response.error) {\r\n          setDataLoadError(true);\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n          // if (!response.generator) return(alert('No generator datasets'));\r\n\r\n\r\n          const generatorData = response.generator && response.generator[0].data;\r\n\r\n          setDataLoaded(true);\r\n          setData(response);\r\n          \r\n\r\n          if(generatorData && generatorData.hasOwnProperty('curves')){\r\n            setCurves(generatorData.curves);\r\n            refreshChart(generatorData.curves);\r\n          } else {\r\n            setCurves([]);\r\n          }\r\n\r\n          if (generatorData){\r\n            if(generatorData.hasOwnProperty('dataUse')) processTableData1(generatorData.dataUse);\r\n            if(generatorData.hasOwnProperty('dataFilteredDueTo')) processTableData2(generatorData.dataFilteredDueTo);\r\n            if(generatorData.hasOwnProperty('performance')) setPerformance(generatorData.performance);\r\n          }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n\r\n          setGenerator(response.generators[0].id);\r\n          setGenerators(response.generators);\r\n\r\n          fetchData({period: dateRange,  generator: response.generators[0].id});\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const refreshChart = (curves) => {\r\n\r\n\r\n    if (curves.length==0) return;\r\n    \r\n\r\n      const graphData = {\r\n        labels: [],\r\n        datasets: [],\r\n        backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n      }\r\n\r\n    \r\n      const dataset = {\r\n        title: '',\r\n        labels: [],\r\n        label: \"Reference Power Curve\",\r\n        backgroundColor: 'red',\r\n        data: []\r\n      };\r\n\r\n      const dataset2 = {\r\n        labels: [],\r\n        label: \"Turbine Power Curve\",\r\n        backgroundColor: 'blue',\r\n        data: []\r\n      };\r\n\r\n      const dataset3 = {\r\n        labels: [],\r\n        label: \"Time percentage\",\r\n        backgroundColor: 'blue',\r\n        data: []\r\n      };\r\n\r\n      const labels = [];\r\n\r\n      const labels2 = [];\r\n\r\n\r\n      const graphData2 = {\r\n        labels: [],\r\n        datasets: [],\r\n        backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n      }\r\n\r\n\r\n      curves[0].x.forEach(\r\n        x => {\r\n          labels.push(round(x))\r\n        }\r\n      );\r\n\r\n      const data2 = {\r\n        datasets: [\r\n          {\r\n            label:  curves[0].label,\r\n            data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n            backgroundColor: 'rgba(255, 99, 132, 1)',\r\n          },\r\n          {\r\n            label:  curves[1].label,\r\n            data: curves[0].x.map((x, i) => ({ x, y: curves[0].y[i] })),\r\n            backgroundColor: 'rgba(44, 99, 132, 1)',\r\n          },\r\n        ],\r\n    \r\n      }\r\n\r\n\r\n      /*curves[0].x.forEach(\r\n        x => {\r\n          labels.push(round(x))\r\n        }\r\n      );\r\n\r\n      dataset.data = curves[0].y;\r\n      dataset2.data = curves[1].y;\r\n\r\n\r\n      const max = Math.ceil(Math.max(...curves[2].x));\r\n      const windSpeeds = Array(max - 1 + 1).fill().map((_, idx) => 1 + idx)\r\n      const percentages = [];\r\n      let aux;\r\n      let qty;\r\n      let percentage;\r\n      const qtyTotal = curves[2].x.length;\r\n      windSpeeds.forEach(\r\n        function process(windSpeed) { \r\n          aux = curves[2].x.filter(x => x < windSpeed && x > windSpeed-1);\r\n          qty = aux.length;\r\n          percentage = (Math.round((qty*100/qtyTotal) * 100) / 100).toFixed(2);\r\n\r\n          // percentage = (qty*100/qtyTotal) * 100 / 100;\r\n          // percentage = +(Math.round(percentage + \"e+2\")  + \"e-2\");\r\n\r\n          percentages.push(percentage);\r\n          graphData2.labels.push(windSpeed-1 + \" - \" + windSpeed);\r\n        }\r\n      );\r\n\r\n      dataset3.data = percentages;\r\n*/\r\n\r\n      graphData.datasets.push(dataset);\r\n      graphData.datasets.push(dataset2);\r\n\r\n      graphData.labels = labels;\r\n\r\n      setGraphData(graphData);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este aÃ±o'\r\n  ]\r\n\r\n\r\n  // const data2 = {\r\n  //   datasets: [\r\n  //     {\r\n  //       label: 'A dataset',\r\n  //       data: [{x:4,y:55},{x:66,y:43}],\r\n  //       backgroundColor: 'rgba(255, 99, 132, 1)',\r\n  //     },\r\n  //   ],\r\n\r\n  // }\r\n\r\n\r\n  // const change = (ev) => {\r\n  // }\r\n\r\n  // const refreshChart = (dateRange) => {\r\n  //   fetchData(dateRange);\r\n  // }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Diagnostics\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n               <CCol sm=\"5\" class=\"text-right\">\r\n\r\n            <DateFilter value={dateRange} options={['cm','cy','12w','12m','x']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData(value);}} />\r\n\r\n                            </CCol>\r\n\r\n            \r\n                            </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n         \r\n          {/* <Scatter data={data2} options={options} /> */}\r\n          <Scatter data={graphData} options={options} />\r\n        </CCardBody>\r\n\r\n      </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}