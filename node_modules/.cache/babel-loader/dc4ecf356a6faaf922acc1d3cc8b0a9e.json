{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = optimiseCallExpression;\n\nvar _t = require(\"@babel/types\");\n\nvar callExpression = _t.callExpression,\n    identifier = _t.identifier,\n    isIdentifier = _t.isIdentifier,\n    isSpreadElement = _t.isSpreadElement,\n    memberExpression = _t.memberExpression,\n    optionalCallExpression = _t.optionalCallExpression,\n    optionalMemberExpression = _t.optionalMemberExpression;\n\nfunction optimiseCallExpression(callee, thisNode, args, optional) {\n  if (args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, {\n    name: \"arguments\"\n  })) {\n    if (optional) {\n      return optionalCallExpression(optionalMemberExpression(callee, identifier(\"apply\"), false, true), [thisNode, args[0].argument], false);\n    }\n\n    return callExpression(memberExpression(callee, identifier(\"apply\")), [thisNode, args[0].argument]);\n  } else {\n    if (optional) {\n      return optionalCallExpression(optionalMemberExpression(callee, identifier(\"call\"), false, true), [thisNode].concat(_toConsumableArray(args)), false);\n    }\n\n    return callExpression(memberExpression(callee, identifier(\"call\")), [thisNode].concat(_toConsumableArray(args)));\n  }\n}","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/@babel/core/node_modules/@babel/helper-optimise-call-expression/lib/index.js"],"names":["Object","defineProperty","exports","value","default","optimiseCallExpression","_t","require","callExpression","identifier","isIdentifier","isSpreadElement","memberExpression","optionalCallExpression","optionalMemberExpression","callee","thisNode","args","optional","length","argument","name"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,sBAAlB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAhB;;AAEA,IACEC,cADF,GAQIF,EARJ,CACEE,cADF;AAAA,IAEEC,UAFF,GAQIH,EARJ,CAEEG,UAFF;AAAA,IAGEC,YAHF,GAQIJ,EARJ,CAGEI,YAHF;AAAA,IAIEC,eAJF,GAQIL,EARJ,CAIEK,eAJF;AAAA,IAKEC,gBALF,GAQIN,EARJ,CAKEM,gBALF;AAAA,IAMEC,sBANF,GAQIP,EARJ,CAMEO,sBANF;AAAA,IAOEC,wBAPF,GAQIR,EARJ,CAOEQ,wBAPF;;AAUA,SAAST,sBAAT,CAAgCU,MAAhC,EAAwCC,QAAxC,EAAkDC,IAAlD,EAAwDC,QAAxD,EAAkE;AAChE,MAAID,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBR,eAAe,CAACM,IAAI,CAAC,CAAD,CAAL,CAApC,IAAiDP,YAAY,CAACO,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAT,EAAmB;AAClFC,IAAAA,IAAI,EAAE;AAD4E,GAAnB,CAAjE,EAEI;AACF,QAAIH,QAAJ,EAAc;AACZ,aAAOL,sBAAsB,CAACC,wBAAwB,CAACC,MAAD,EAASN,UAAU,CAAC,OAAD,CAAnB,EAA8B,KAA9B,EAAqC,IAArC,CAAzB,EAAqE,CAACO,QAAD,EAAWC,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAnB,CAArE,EAAmG,KAAnG,CAA7B;AACD;;AAED,WAAOZ,cAAc,CAACI,gBAAgB,CAACG,MAAD,EAASN,UAAU,CAAC,OAAD,CAAnB,CAAjB,EAAgD,CAACO,QAAD,EAAWC,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAnB,CAAhD,CAArB;AACD,GARD,MAQO;AACL,QAAIF,QAAJ,EAAc;AACZ,aAAOL,sBAAsB,CAACC,wBAAwB,CAACC,MAAD,EAASN,UAAU,CAAC,MAAD,CAAnB,EAA6B,KAA7B,EAAoC,IAApC,CAAzB,GAAqEO,QAArE,4BAAkFC,IAAlF,IAAyF,KAAzF,CAA7B;AACD;;AAED,WAAOT,cAAc,CAACI,gBAAgB,CAACG,MAAD,EAASN,UAAU,CAAC,MAAD,CAAnB,CAAjB,GAAgDO,QAAhD,4BAA6DC,IAA7D,GAArB;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = optimiseCallExpression;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  callExpression,\n  identifier,\n  isIdentifier,\n  isSpreadElement,\n  memberExpression,\n  optionalCallExpression,\n  optionalMemberExpression\n} = _t;\n\nfunction optimiseCallExpression(callee, thisNode, args, optional) {\n  if (args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, {\n    name: \"arguments\"\n  })) {\n    if (optional) {\n      return optionalCallExpression(optionalMemberExpression(callee, identifier(\"apply\"), false, true), [thisNode, args[0].argument], false);\n    }\n\n    return callExpression(memberExpression(callee, identifier(\"apply\")), [thisNode, args[0].argument]);\n  } else {\n    if (optional) {\n      return optionalCallExpression(optionalMemberExpression(callee, identifier(\"call\"), false, true), [thisNode, ...args], false);\n    }\n\n    return callExpression(memberExpression(callee, identifier(\"call\")), [thisNode, ...args]);\n  }\n}"]},"metadata":{},"sourceType":"script"}