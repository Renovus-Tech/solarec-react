{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\forecast.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { setCookie, getCookie } from '../../../helpers/sessionCookie.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner, CLabel } from '@coreui/react';\nimport { Chart, Plugin } from 'chart.js';\nimport { CChartLine } from '@coreui/react-chartjs';\nimport { Line } from 'react-chartjs-2';\nimport { OPEN_WEATHER_API } from '../../../constants';\nimport arrow from '../../../assets/renovus-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ClimateForecast = function ClimateForecast() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lineChartOneData = _useState8[0],\n      setLineChartOneData = _useState8[1];\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var APIResponse, responseData, graphData1;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return fetch(OPEN_WEATHER_API);\n\n            case 3:\n              APIResponse = _context.sent;\n              _context.next = 6;\n              return APIResponse.json();\n\n            case 6:\n              responseData = _context.sent;\n\n              if (responseData.error && responseData.error.message) {\n                setDataLoadError(true);\n                alert(responseData.error.message);\n              }\n\n              if (responseData) {\n                graphData1 = {\n                  labels: responseData.list.map(function (x, i) {\n                    return x.wind.deg;\n                  }),\n                  datasets: [{\n                    label: '',\n                    borderColor: '#003f5c',\n                    pointBackgroundColor: '#003f5c',\n                    pointBorderColor: 'transparent',\n                    backgroundColor: 'transparent',\n                    data: responseData.list.map(function (x, i) {\n                      return x.wind.speed;\n                    })\n                  }]\n                }; // responseData.graphs[0].gen_code.forEach((gen,index) => {\n                //   const dataset1 = {\n                //     label:  gen,\n                //     borderColor: '#003f5c',\n                //     pointBackgroundColor: '#003f5c',\n                //     pointBorderColor: 'transparent',\n                //     backgroundColor: 'transparent',\n                //     data: responseData.graphs[0].data.map( (x,i) => {\n                //       return x.genWindSpeed[index];\n                //     })\n                //   }\n                //   graphData1.datasets.push(dataset1)\n                // });\n\n                setLineChartOneData(graphData1);\n                setLoading(false);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var plugins = [{\n    afterDraw: function afterDraw(chart) {\n      var ctx = chart.ctx;\n      var xAxis = chart.scales['x'];\n      var yAxis = chart.scales['y'];\n      xAxis.ticks.forEach(function (value, index) {\n        var x = xAxis.getPixelForTick(index); // var image = new Image();\n        // image.src = images[index],\n\n        var imgSrc = arrow;\n        ctx.drawImage(arrow, x - 12, yAxis.bottom + 10);\n      });\n    }\n  }];\n  var options = {\n    type: 'line',\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    elements: {\n      line: {\n        tension: .4\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw, 1) + ' m/s';\n          }\n        }\n      },\n      legend: {\n        display: false\n      },\n      afterDraw: function afterDraw(chart) {\n        var ctx = chart.chart.ctx;\n        var xAxis = chart.scales['x'];\n        var yAxis = chart.scales['y-axis-0'];\n        xAxis.ticks.forEach(function (value, index) {\n          var x = xAxis.getPixelForTick(index); // var image = new Image();\n          // image.src = images[index],\n\n          ctx.drawImage(arrow, x - 12, yAxis.bottom + 10);\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate - Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"8\",\n          className: \"text-right d-flex flex-center flex-justify-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          className: 'mb-5',\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Wind Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"m/s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: lineChartOneData,\n              options: options,\n              plugins: plugins // datasets={[{\n              //   label:  '',\n              //   borderColor: '#003f5c',\n              //   pointBackgroundColor: '#003f5c',\n              //   pointBorderColor: 'transparent',\n              //   backgroundColor: 'transparent',\n              //   data: [1,2,3]\n              // }]}\n              // options={options}\n              // labels={['a','b','c']}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(CSpinner, {\n          className: \"loading-spinner\",\n          color: \"#321fdb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateForecast, \"VQM/y7XYTO9RBQDArM7QvEYlYls=\");\n\n_c = ClimateForecast;\nexport default ClimateForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateForecast\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/forecast.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","setCookie","getCookie","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CLabel","Chart","Plugin","CChartLine","Line","OPEN_WEATHER_API","arrow","ClimateForecast","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","labels","datasets","lineChartOneData","setLineChartOneData","fetchData","fetch","APIResponse","json","responseData","error","message","alert","graphData1","list","map","x","i","wind","deg","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","data","speed","plugins","afterDraw","chart","ctx","xAxis","scales","yAxis","ticks","forEach","value","index","getPixelForTick","imgSrc","drawImage","bottom","options","type","responsive","animation","duration","tooltips","enabled","legend","display","elements","line","tension","tooltip","callbacks","tooltipItem","dataset","raw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  Chart,\r\n  Plugin\r\n} from 'chart.js';\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport { OPEN_WEATHER_API } from '../../../constants'\r\nimport arrow from '../../../assets/renovus-logo.png'\r\n\r\n\r\nconst ClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n\r\n    setLoading(true);\r\n\r\n    const APIResponse = await fetch(OPEN_WEATHER_API);\r\n    const responseData = await APIResponse.json();\r\n\r\n    if (responseData.error && responseData.error.message) {\r\n      setDataLoadError(true)\r\n      alert(responseData.error.message)\r\n    } \r\n\r\n    \r\n\r\n    if (responseData) {\r\n\r\n      const graphData1 = {\r\n        labels: responseData.list.map( (x,i) => {\r\n          return x.wind.deg;\r\n        }),\r\n        datasets: [{\r\n          label:  '',\r\n          borderColor: '#003f5c',\r\n          pointBackgroundColor: '#003f5c',\r\n          pointBorderColor: 'transparent',\r\n          backgroundColor: 'transparent',\r\n          data: responseData.list.map( (x,i) => {\r\n            return x.wind.speed;\r\n          })\r\n        }]\r\n      }\r\n      \r\n      // responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n      //   const dataset1 = {\r\n      //     label:  gen,\r\n      //     borderColor: '#003f5c',\r\n      //     pointBackgroundColor: '#003f5c',\r\n      //     pointBorderColor: 'transparent',\r\n      //     backgroundColor: 'transparent',\r\n      //     data: responseData.graphs[0].data.map( (x,i) => {\r\n      //       return x.genWindSpeed[index];\r\n      //     })\r\n      //   }\r\n      \r\n      //   graphData1.datasets.push(dataset1)\r\n      // });\r\n\r\n      setLineChartOneData(graphData1)\r\n\r\n      setLoading(false);\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const plugins = [{\r\n    afterDraw: (chart) => {\r\n      let ctx = chart.ctx;\r\n      var xAxis = chart.scales['x'];\r\n      var yAxis = chart.scales['y'];\r\n      xAxis.ticks.forEach((value, index) => {\r\n        var x = xAxis.getPixelForTick(index);\r\n        // var image = new Image();\r\n        // image.src = images[index],\r\n        let imgSrc = arrow;\r\n          ctx.drawImage(arrow, x - 12, yAxis.bottom + 10);\r\n      });\r\n    }\r\n  }];\r\n\r\n  const options =  {\r\n    type: 'line',\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' m/s';\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n      afterDraw: chart => {\r\n        var ctx = chart.chart.ctx;\r\n        var xAxis = chart.scales['x'];\r\n        var yAxis = chart.scales['y-axis-0'];\r\n        xAxis.ticks.forEach((value, index) => {\r\n          var x = xAxis.getPixelForTick(index);\r\n          // var image = new Image();\r\n          // image.src = images[index],\r\n            ctx.drawImage(arrow, x - 12, yAxis.bottom + 10);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                      plugins={plugins}\r\n                      // datasets={[{\r\n                      //   label:  '',\r\n                      //   borderColor: '#003f5c',\r\n                      //   pointBackgroundColor: '#003f5c',\r\n                      //   pointBorderColor: 'transparent',\r\n                      //   backgroundColor: 'transparent',\r\n                      //   data: [1,2,3]\r\n                      // }]}\r\n                      // options={options}\r\n                      // labels={['a','b','c']}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateForecast\r\n"]},"metadata":{},"sourceType":"module"}