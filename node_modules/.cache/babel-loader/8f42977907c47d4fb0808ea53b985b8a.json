{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\reports\\\\settings.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CAlert, CLabel, CDataTable } from '@coreui/react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Reports = function Reports() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      parksRows = _useState2[0],\n      setParksRows = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tableData = _useState4[0],\n      setTableData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tableFields = _useState6[0],\n      setTableFields = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loaded = _useState10[0],\n      setLoaded = _useState10[1];\n\n  useEffect(function () {\n    loadConfiguration();\n  }, []);\n\n  var loadConfiguration = function loadConfiguration() {\n    setLoading(true);\n    DataAPI({\n      'endpoint': 'report/configure',\n      'method': 'GET'\n    }).then(function (response) {\n      if (response.error) {\n        if (response.error.message) {\n          return alert(response.error.message);\n        } else {\n          return alert(response.error);\n        }\n      }\n\n      if (response.loaded) {\n        setLoaded(true); // const tablefields = response.reports.map((x, i) => { \n        //   return x.title\n        // });\n        // tablefields.push('Wind Farm');\n\n        var reports = [];\n        response.reports.forEach(function (report, index) {\n          reports[report.id] = report.title;\n        });\n        var locations = [];\n        var rows = [];\n        response.locations.forEach(function (location, index) {\n          locations[location.id] = location.name;\n          rows[location.id] = [];\n        }); // tableData.push({\n        //   'Wind Farm': dataUse.info,\n        //   'Used Data': round(dataUse.usedData)+'%',\n        //   'Filtered Data': round(dataUse.filteredData)+'%',\n        //   'Total': round(dataUse.total)+'%'\n        // })\n\n        response.settings.forEach(function (setting, index) {\n          // reports[setting.repId];\n          rows[setting.locId][setting.repId] = setting.selected;\n        });\n        var _tableData = [];\n        rows.map(function (row, locId) {\n          var rowData = {};\n          row.map(function (setting, repId) {\n            rowData[repId] = setting ? \"yes\" : \"no\";\n          });\n          rowData['windFarm'] = locations[locId];\n\n          _tableData.push(rowData);\n        }); // tableData.push({\n        //   'Wind Farm': locations[setting.locId],\n        //   reports[setting.repId]+'' : setting.selected,\n        // });\n\n        var _tableFields = reports.map(function (title, id) {\n          return {\n            key: id,\n            label: title\n          };\n        });\n\n        _tableFields.unshift({\n          key: 'windFarm',\n          label: 'Wind Farm'\n        });\n\n        setTableData(_tableData);\n        setTableFields(_tableFields);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Reports\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(CLabel, {\n            children: \"Please select reports you wish to receive by e-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 9\n          }, _this), /*#__PURE__*/_jsxDEV(CDataTable, {\n            items: tableData,\n            fields: tableFields,\n            striped: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 9\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Reports, \"EE8FAMxtGCIKtL4pFJYxyi4na5E=\");\n\n_c = Reports;\nexport default Reports;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/reports/settings.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CAlert","CLabel","CDataTable","DataAPI","Reports","parksRows","setParksRows","tableData","setTableData","tableFields","setTableFields","loading","setLoading","loaded","setLoaded","loadConfiguration","then","response","error","message","alert","reports","forEach","report","index","id","title","locations","rows","location","name","settings","setting","locId","repId","selected","map","row","rowData","push","key","label","unshift"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,KADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,MAPF,EAQEC,MARF,EASEC,UATF,QAUO,eAVP;AAYA,OAAOC,OAAP,MAAoB,6BAApB;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAEpB,kBAAkCZ,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOa,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkCd,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOe,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAsChB,QAAQ,CAAC,KAAD,CAA9C;AAAA;AAAA,MAAOiB,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAA8BlB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOmB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA4BpB,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOqB,MAAP;AAAA,MAAeC,SAAf;;AAGArB,EAAAA,SAAS,CAAC,YAAM;AACdsB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAKA,MAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAE9BH,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAT,IAAAA,OAAO,CAAC;AACN,kBAAY,kBADN;AAEN,gBAAU;AAFJ,KAAD,CAAP,CAGGa,IAHH,CAIE,UAAAC,QAAQ,EAAI;AAEV,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,YAAID,QAAQ,CAACC,KAAT,CAAeC,OAAnB,EAA4B;AAC1B,iBAAOC,KAAK,CAACH,QAAQ,CAACC,KAAT,CAAeC,OAAhB,CAAZ;AACD,SAFD,MAEO;AACL,iBAAOC,KAAK,CAACH,QAAQ,CAACC,KAAV,CAAZ;AACD;AACF;;AAED,UAAID,QAAQ,CAACJ,MAAb,EAAqB;AACnBC,QAAAA,SAAS,CAAC,IAAD,CAAT,CADmB,CAKnB;AACA;AACA;AACA;;AAEA,YAAIO,OAAO,GAAG,EAAd;AACAJ,QAAAA,QAAQ,CAACI,OAAT,CAAiBC,OAAjB,CAAyB,UAACC,MAAD,EAAQC,KAAR,EAAkB;AACzCH,UAAAA,OAAO,CAACE,MAAM,CAACE,EAAR,CAAP,GAAqBF,MAAM,CAACG,KAA5B;AACD,SAFD;AAIA,YAAIC,SAAS,GAAG,EAAhB;AACA,YAAIC,IAAI,GAAG,EAAX;AACAX,QAAAA,QAAQ,CAACU,SAAT,CAAmBL,OAAnB,CAA2B,UAACO,QAAD,EAAUL,KAAV,EAAoB;AAC3CG,UAAAA,SAAS,CAACE,QAAQ,CAACJ,EAAV,CAAT,GAAyBI,QAAQ,CAACC,IAAlC;AACAF,UAAAA,IAAI,CAACC,QAAQ,CAACJ,EAAV,CAAJ,GAAoB,EAApB;AACH,SAHD,EAjBmB,CAsBnB;AACA;AACA;AACA;AACA;AACA;;AAEAR,QAAAA,QAAQ,CAACc,QAAT,CAAkBT,OAAlB,CAA0B,UAACU,OAAD,EAASR,KAAT,EAAmB;AAC3C;AACAI,UAAAA,IAAI,CAACI,OAAO,CAACC,KAAT,CAAJ,CAAoBD,OAAO,CAACE,KAA5B,IAAqCF,OAAO,CAACG,QAA7C;AAED,SAJD;AAMA,YAAI5B,UAAS,GAAG,EAAhB;AACAqB,QAAAA,IAAI,CAACQ,GAAL,CAAS,UAACC,GAAD,EAAMJ,KAAN,EAAgB;AAEvB,cAAIK,OAAO,GAAG,EAAd;AACAD,UAAAA,GAAG,CAACD,GAAJ,CAAQ,UAACJ,OAAD,EAAUE,KAAV,EAAoB;AAC1BI,YAAAA,OAAO,CAACJ,KAAD,CAAP,GAAiBF,OAAO,GAAG,KAAH,GAAW,IAAnC;AACD,WAFD;AAGAM,UAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBX,SAAS,CAACM,KAAD,CAA/B;;AAEA1B,UAAAA,UAAS,CAACgC,IAAV,CAAeD,OAAf;AAED,SAVD,EApCmB,CAgDnB;AACA;AACA;AAEA;;AAGA,YAAM7B,YAAW,GAAGY,OAAO,CAACe,GAAR,CAAY,UAACV,KAAD,EAAQD,EAAR;AAAA,iBAAgB;AAC5Ce,YAAAA,GAAG,EAAEf,EADuC;AAE5CgB,YAAAA,KAAK,EAAEf;AAFqC,WAAhB;AAAA,SAAZ,CAApB;;AAKAjB,QAAAA,YAAW,CAACiC,OAAZ,CAAoB;AAClBF,UAAAA,GAAG,EAAE,UADa;AAElBC,UAAAA,KAAK,EAAE;AAFW,SAApB;;AAKAjC,QAAAA,YAAY,CAACD,UAAD,CAAZ;AACAG,QAAAA,cAAc,CAACD,YAAD,CAAd;AAED;AAEF,KApFH;AAwFD,GA5FD;;AAkGA,sBACE,QAAC,KAAD;AAAA,4BACE,QAAC,WAAD;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,kCACE;AAAI,YAAA,EAAE,EAAC,SAAP;AAAiB,YAAA,SAAS,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAIE;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,eAWE,QAAC,SAAD;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,kCACF,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADE,eAIF,QAAC,UAAD;AACU,YAAA,KAAK,EAAEF,SADjB;AAEU,YAAA,MAAM,EAAEE,WAFlB;AAGU,YAAA,OAAO;AAHjB;AAAA;AAAA;AAAA;AAAA,mBAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAXF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA6BD,CA7ID;;GAAML,O;;KAAAA,O;AA+IN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CAlert,\r\n  CLabel,\r\n  CDataTable\r\n} from '@coreui/react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\n\r\nconst Reports = () => {\r\n\r\n  const [parksRows, setParksRows] = useState('');\r\n  const [tableData, setTableData] = useState(false);\r\n  const [tableFields, setTableFields] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    loadConfiguration();\r\n  }, []);\r\n\r\n\r\n  const loadConfiguration = () => {\r\n\r\n    setLoading(true);\r\n    \r\n    DataAPI({\r\n      'endpoint': 'report/configure',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n\r\n        if (response.error) {\r\n          if (response.error.message) {\r\n            return(alert(response.error.message))\r\n          } else {\r\n            return(alert(response.error)) \r\n          }\r\n        }\r\n\r\n        if (response.loaded) {\r\n          setLoaded(true);\r\n\r\n\r\n          \r\n          // const tablefields = response.reports.map((x, i) => { \r\n          //   return x.title\r\n          // });\r\n          // tablefields.push('Wind Farm');\r\n\r\n          let reports = [];\r\n          response.reports.forEach((report,index) => {\r\n            reports[report.id] = report.title;\r\n          });\r\n\r\n          let locations = [];\r\n          let rows = [];\r\n          response.locations.forEach((location,index) => {\r\n              locations[location.id] = location.name;\r\n              rows[location.id] = [];\r\n          });\r\n\r\n          // tableData.push({\r\n          //   'Wind Farm': dataUse.info,\r\n          //   'Used Data': round(dataUse.usedData)+'%',\r\n          //   'Filtered Data': round(dataUse.filteredData)+'%',\r\n          //   'Total': round(dataUse.total)+'%'\r\n          // })\r\n\r\n          response.settings.forEach((setting,index) => {\r\n            // reports[setting.repId];\r\n            rows[setting.locId][setting.repId] = setting.selected;\r\n\r\n          });\r\n\r\n          let tableData = [];\r\n          rows.map((row, locId) => {\r\n\r\n            let rowData = {};\r\n            row.map((setting, repId) => {\r\n              rowData[repId] = setting ? \"yes\" : \"no\";\r\n            });\r\n            rowData['windFarm'] = locations[locId];\r\n\r\n            tableData.push(rowData);\r\n\r\n          });\r\n\r\n          // tableData.push({\r\n          //   'Wind Farm': locations[setting.locId],\r\n          //   reports[setting.repId]+'' : setting.selected,\r\n\r\n          // });\r\n\r\n\r\n          const tableFields = reports.map((title, id) => ({\r\n              key: id,\r\n              label: title\r\n            }\r\n          ));\r\n          tableFields.unshift({\r\n            key: 'windFarm',\r\n            label: 'Wind Farm'\r\n          });\r\n\r\n          setTableData(tableData);\r\n          setTableFields(tableFields);\r\n\r\n        }\r\n\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n            <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n              Reports\r\n            </h3>\r\n            <div className=\"small text-medium-emphasis\">Settings</div>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow>\r\n          <CCol sm=\"6\">\r\n        <CLabel>Please select reports you wish to receive by e-mail</CLabel>\r\n\r\n        {/* {parksRows} */}\r\n        <CDataTable\r\n                  items={tableData}\r\n                  fields={tableFields}\r\n                  striped\r\n                />\r\n            </CCol>\r\n        </CRow>\r\n\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n"]},"metadata":{},"sourceType":"module"}