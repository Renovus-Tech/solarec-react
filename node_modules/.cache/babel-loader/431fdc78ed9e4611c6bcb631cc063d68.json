{"ast":null,"code":"var $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar RangeError = global.RangeError;\nvar fromCharCode = String.fromCharCode; // eslint-disable-next-line es/no-string-fromcodepoint -- required for testing\n\nvar $fromCodePoint = String.fromCodePoint;\nvar join = uncurryThis([].join); // length should be 1, old FF problem\n\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1; // `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n\n$({\n  target: 'String',\n  stat: true,\n  forced: INCORRECT_LENGTH\n}, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements[i] = code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\n    }\n\n    return join(elements, '');\n  }\n});","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/solarec2/renovusUnicef/ui_web/node_modules/core-js/modules/es.string.from-code-point.js"],"names":["$","require","global","uncurryThis","toAbsoluteIndex","RangeError","fromCharCode","String","$fromCodePoint","fromCodePoint","join","INCORRECT_LENGTH","length","target","stat","forced","x","elements","arguments","i","code"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,gCAAD,CAA7B;;AAEA,IAAII,UAAU,GAAGH,MAAM,CAACG,UAAxB;AACA,IAAIC,YAAY,GAAGC,MAAM,CAACD,YAA1B,C,CACA;;AACA,IAAIE,cAAc,GAAGD,MAAM,CAACE,aAA5B;AACA,IAAIC,IAAI,GAAGP,WAAW,CAAC,GAAGO,IAAJ,CAAtB,C,CAEA;;AACA,IAAIC,gBAAgB,GAAG,CAAC,CAACH,cAAF,IAAoBA,cAAc,CAACI,MAAf,IAAyB,CAApE,C,CAEA;AACA;;AACAZ,CAAC,CAAC;AAAEa,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,IAAI,EAAE,IAA1B;AAAgCC,EAAAA,MAAM,EAAEJ;AAAxC,CAAD,EAA6D;AAC5D;AACAF,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBO,CAAvB,EAA0B;AACvC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIL,MAAM,GAAGM,SAAS,CAACN,MAAvB;AACA,QAAIO,CAAC,GAAG,CAAR;AACA,QAAIC,IAAJ;;AACA,WAAOR,MAAM,GAAGO,CAAhB,EAAmB;AACjBC,MAAAA,IAAI,GAAG,CAACF,SAAS,CAACC,CAAC,EAAF,CAAjB;AACA,UAAIf,eAAe,CAACgB,IAAD,EAAO,QAAP,CAAf,KAAoCA,IAAxC,EAA8C,MAAMf,UAAU,CAACe,IAAI,GAAG,4BAAR,CAAhB;AAC9CH,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcC,IAAI,GAAG,OAAP,GACVd,YAAY,CAACc,IAAD,CADF,GAEVd,YAAY,CAAC,CAAC,CAACc,IAAI,IAAI,OAAT,KAAqB,EAAtB,IAA4B,MAA7B,EAAqCA,IAAI,GAAG,KAAP,GAAe,MAApD,CAFhB;AAGD;;AAAC,WAAOV,IAAI,CAACO,QAAD,EAAW,EAAX,CAAX;AACH;AAd2D,CAA7D,CAAD","sourcesContent":["var $ = require('../internals/export');\r\nvar global = require('../internals/global');\r\nvar uncurryThis = require('../internals/function-uncurry-this');\r\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\r\n\r\nvar RangeError = global.RangeError;\r\nvar fromCharCode = String.fromCharCode;\r\n// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing\r\nvar $fromCodePoint = String.fromCodePoint;\r\nvar join = uncurryThis([].join);\r\n\r\n// length should be 1, old FF problem\r\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\r\n\r\n// `String.fromCodePoint` method\r\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\r\n$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {\r\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\r\n  fromCodePoint: function fromCodePoint(x) {\r\n    var elements = [];\r\n    var length = arguments.length;\r\n    var i = 0;\r\n    var code;\r\n    while (length > i) {\r\n      code = +arguments[i++];\r\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\r\n      elements[i] = code < 0x10000\r\n        ? fromCharCode(code)\r\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\r\n    } return join(elements, '');\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}