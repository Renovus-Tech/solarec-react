{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\helpers\\\\utils.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CSelect, CSpinner, CRow, CSwitch, CInput, CButton, CModal, CModalHeader, CModalFooter, CModalBody, CModalTitle, CInputGroup, CFormControl, CInputGroupText } from '@coreui/react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var formatDate = function formatDate(date) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (!date) return date;\n  var dateArr = date.split(' ')[0].split('-');\n\n  if (flags.includes('noyear')) {\n    return \"\".concat(dateArr[2], \"/\").concat(dateArr[1]);\n  } else if (flags.includes('time')) {\n    return \"\".concat(dateArr[2], \"/\").concat(dateArr[1], \"/\").concat(dateArr[0], \" \").concat(dateArr[3]);\n  } else {\n    return \"\".concat(dateArr[2], \"/\").concat(dateArr[1], \"/\").concat(dateArr[0]);\n  }\n};\nexport var formatDate2 = function formatDate2(sourceDate) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var dateArr = sourceDate.split(' ');\n  var date = dateArr[0].split('-');\n  var time = dateArr[1];\n  var timeArr = time.split(':');\n  var hours = timeArr[0];\n  var minutes = timeArr[1];\n  return \"\".concat(date[2], \"/\").concat(date[1], \"/\").concat(date[0], \" \").concat(hours, \":\").concat(minutes);\n};\nexport var round = function round(number) {\n  if (!number) return number;\n  return Math.round(number * 10) / 10;\n};\nexport var getDateLabel = function getDateLabel(dateValue) {\n  switch (dateValue) {\n    case 'y':\n      return 'Yesterday';\n      break;\n\n    case '30d':\n      return '30 days';\n      break;\n\n    case '12w':\n      return '12 weeks';\n      break;\n\n    case '12m':\n      return '12 month';\n      break;\n\n    case 'cy':\n      return 'Current year';\n      break;\n\n    case 'cm':\n      return 'Current month';\n      break;\n\n    case 'cw':\n      return 'Current week';\n      break;\n\n    case 'x':\n      return 'Custom range';\n      break;\n\n    default:\n      return \"{\".concat(dateValue, \"}\");\n      break;\n  }\n};\nexport var DateFilter = function DateFilter(props) {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modal = _useState2[0],\n      setModal = _useState2[1];\n\n  var _useState3 = useState(props.disabled),\n      _useState4 = _slicedToArray(_useState3, 2),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      from = _useState6[0],\n      setFrom = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      to = _useState8[0],\n      setTo = _useState8[1];\n\n  var _useState9 = useState(props.value),\n      _useState10 = _slicedToArray(_useState9, 2),\n      value = _useState10[0],\n      setValue = _useState10[1];\n\n  var options = [];\n\n  if (props.options) {\n    options = props.options;\n  } else {\n    options = 'y,cw,cm,cy,12m,x'.split(',');\n  }\n\n  var setDate = function setDate(x) {\n    alert(x);\n  };\n\n  var changeListener = function changeListener(ev) {\n    if (ev.target.value == 'x') {\n      setModal(true);\n    } else {\n      props.onChange(ev.target.value);\n      setValue(ev.target.value);\n    }\n  };\n\n  var applyCustomRange = function applyCustomRange(value) {\n    if (modal) {\n      props.onChange(\"\".concat(startDate, \"--\").concat(endDate));\n      setModal(false);\n      setValue('x');\n      setFrom(startDate.toLocaleDateString());\n      setTo(endDate.toLocaleDateString());\n    } else {\n      props.onChange(value);\n    }\n  }; // const [dateRange, setDateRange] = useState([null, null]);\n  // const [startDate, endDate] = dateRange;\n\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      startDate = _useState12[0],\n      setStartDate = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      endDate = _useState14[0],\n      setEndDate = _useState14[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CModal, {\n      show: modal,\n      onClose: setModal,\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(CModalHeader, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(CModalTitle, {\n          children: \"Rango de fechas variable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(CModalBody, {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          dateFormat: \"yyyy-MM-dd\",\n          selectsRange: true,\n          startDate: startDate,\n          endDate: endDate,\n          maxDate: new Date(),\n          onChange: function onChange(dates) {\n            // setDateRange(update);\n            var _dates = _slicedToArray(dates, 2),\n                start = _dates[0],\n                end = _dates[1];\n\n            var date = new Date();\n            setStartDate(date.toLocaleDateString());\n            setEndDate(end);\n          },\n          inline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }, _this), /*#__PURE__*/_jsxDEV(CModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(CButton, {\n          color: \"primary\",\n          onClick: applyCustomRange,\n          children: \"Aplicar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, _this), ' ', /*#__PURE__*/_jsxDEV(CButton, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            return setModal(false);\n          },\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(CSelect, {\n      value: value,\n      disabled: props.disabled,\n      onChange: changeListener,\n      custom: true,\n      name: \"ccmonth\",\n      id: \"ccmonth\",\n      children: options.map(function (option) {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          selected: props.selected == option,\n          value: option,\n          children: getDateLabel(option)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 24\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(DateFilter, \"LSpECqVFz4u8t2E1ew3yXS1SjB8=\");\n\n_c = DateFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateFilter\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/helpers/utils.js"],"names":["React","useEffect","useState","CSelect","CSpinner","CRow","CSwitch","CInput","CButton","CModal","CModalHeader","CModalFooter","CModalBody","CModalTitle","CInputGroup","CFormControl","CInputGroupText","DatePicker","formatDate","date","flags","dateArr","split","includes","formatDate2","sourceDate","options","time","timeArr","hours","minutes","round","number","Math","getDateLabel","dateValue","DateFilter","props","modal","setModal","disabled","setDisabled","from","setFrom","to","setTo","value","setValue","setDate","x","alert","changeListener","ev","target","onChange","applyCustomRange","startDate","endDate","toLocaleDateString","setStartDate","setEndDate","Date","dates","start","end","map","option","selected"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nimport {CSelect,\r\n  CSpinner,\r\n  \tCRow,\r\n  CSwitch,\r\n  CInput,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CModalBody,\r\n  CModalTitle,\r\n  CInputGroup,\r\n  CFormControl,\r\n  CInputGroupText\r\n} from '@coreui/react'\r\n\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nexport const formatDate = (date, flags = '') => {\r\n\r\n  if (!date) return date;\r\n\r\n\tconst dateArr = date.split(' ')[0].split('-');\r\n\r\n  if (flags.includes('noyear')){\r\n    return `${dateArr[2]}/${dateArr[1]}`; \r\n  }else if (flags.includes('time')){\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]} ${dateArr[3]}`;\r\n  } else {\r\n    return `${dateArr[2]}/${dateArr[1]}/${dateArr[0]}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const formatDate2 = (sourceDate, options = '') => {\r\n\r\n  const dateArr = sourceDate.split(' ');\r\n  const date = dateArr[0].split('-');\r\n  const time = dateArr[1];\r\n\r\n  const timeArr = time.split(':');\r\n\r\n  const hours = timeArr[0];\r\n  const minutes = timeArr[1];\r\n\r\n\r\n  return `${date[2]}/${date[1]}/${date[0]} ${hours}:${minutes}`;\r\n\r\n  \r\n\r\n}\r\n\r\nexport const round = (number) => {\r\n\r\n  if (!number) return number;\r\n\r\n  return Math.round(number * 10) / 10;\r\n\r\n}\r\n\r\n\r\nexport const getDateLabel = (dateValue) => {\r\n\r\n  switch(dateValue) {\r\n    case 'y' : return 'Yesterday'; break;\r\n    case '30d' : return '30 days'; break;\r\n    case '12w' : return '12 weeks'; break;\r\n    case '12m' : return '12 month'; break;\r\n    case 'cy' : return 'Current year'; break;\r\n    case 'cm' : return 'Current month'; break;\r\n    case 'cw' : return 'Current week'; break;\r\n    case 'x' : return 'Custom range'; break;\r\n    default : return `{${dateValue}}`; break;\r\n  }\r\n\r\n}\r\n\r\nexport const DateFilter = (props) => {\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const [disabled, setDisabled] = useState(props.disabled);\r\n  const [from, setFrom] = useState('');\r\n  const [to, setTo] = useState('');\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  let options = [];\r\n\r\n  if(props.options) {\r\n\r\n    options = props.options;\r\n\r\n  } else {\r\n\r\n    options = 'y,cw,cm,cy,12m,x'.split(',');\r\n\r\n  }\r\n\r\n\r\n  const setDate = (x) => {\r\n    alert(x);\r\n  }\r\n\r\n\r\n  const changeListener = (ev) => {\r\n\r\n    if (ev.target.value == 'x') {\r\n      setModal(true);\r\n    } else {\r\n      props.onChange(ev.target.value);\r\n      setValue(ev.target.value)\r\n    }\r\n\r\n  }\r\n\r\n  const applyCustomRange = (value) => {\r\n\r\n    if (modal) {\r\n      props.onChange(`${startDate}--${endDate}`);\r\n      setModal(false)\r\n      setValue('x')\r\n      setFrom(startDate.toLocaleDateString())\r\n      setTo(endDate.toLocaleDateString())\r\n    } else {\r\n      props.onChange(value);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // const [dateRange, setDateRange] = useState([null, null]);\r\n  // const [startDate, endDate] = dateRange;\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  \r\n  \r\n\r\n\treturn (<>\r\n\r\n\r\n\r\n\r\n\r\n            <CModal \r\n              show={modal} \r\n              onClose={setModal}\r\n              size=\"sm\"\r\n            >\r\n              <CModalHeader closeButton>\r\n                <CModalTitle>Rango de fechas variable</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody className={\"text-center\"}>\r\n                \r\n                {/* <p>Seleccionar el intervalo temporal para filtrar los datos, utlizando el formato \"YYYY-MM-DD\".</p>\r\n\r\n                {props.warning && <p><strong>{props.warning}</strong></p>}\r\n\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInput placeholder=\"Desde\" onChange={(ev) => { setFrom(ev.target.value) }} aria-label=\"Username\" />\r\n                  &nbsp;\r\n                  <CInput placeholder=\"Hasta\" onChange={(ev) => { setTo(ev.target.value) }} aria-label=\"Server\" />\r\n                </CInputGroup> */}\r\n\r\n                <DatePicker\r\n                  dateFormat=\"yyyy-MM-dd\"\r\n                  selectsRange={true}\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  maxDate={new Date()}\r\n                  onChange={(dates) => {\r\n                    // setDateRange(update);\r\n                    const [start, end] = dates;\r\n                    var date = new Date();\r\n                    setStartDate(date.toLocaleDateString())\r\n                    setEndDate(end)\r\n                  }}\r\n                  inline\r\n                  \r\n                />\r\n\r\n\r\n              </CModalBody>\r\n              <CModalFooter>\r\n                <CButton color=\"primary\"  onClick={applyCustomRange} >Aplicar</CButton>{' '}\r\n                <CButton \r\n                  color=\"secondary\" \r\n                  onClick={() => setModal(false)}\r\n                >Cancelar</CButton>\r\n              </CModalFooter>\r\n            </CModal>\r\n\r\n      <CSelect value={value}  disabled={props.disabled} onChange={changeListener} custom name=\"ccmonth\" id=\"ccmonth\">{options.map((option) => {\r\n\r\n                return <option selected={props.selected==option} value={option}>\r\n                  {getDateLabel(option)}\r\n                </option>\r\n              })}</CSelect>\r\n\r\n\r\n\r\n             \r\n              \r\n\r\n              </>)\r\n\r\n}"]},"metadata":{},"sourceType":"module"}