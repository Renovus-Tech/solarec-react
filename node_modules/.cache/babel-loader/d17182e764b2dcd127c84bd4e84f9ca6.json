{"ast":null,"code":"import _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\performance-index\\\\performance-index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CButtonGroup, CProgress, CCardFooter, CFormSelect, CSelect } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { CChartBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { formatDate, round, getDateLabel, DateFilter } from '../../../helpers/utils.js';\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar rand = function rand() {\n  return 2;\n};\n\nvar ctx = document.getElementById('x'); // var mixedChart = new Chart(ctx, {\n//     data: {\n//         datasets: [\n//         {\n//             type: 'line',\n//             label: 'Line Dataset',\n//             data: [50, 50, 50, 50],\n//         }],\n//         labels: ['January', 'February', 'March', 'April']\n//     },\n//     // options: options\n// });\n\nvar Charts = function Charts() {\n  _s();\n\n  var _useState = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generators = _useState4[0],\n      setGenerators = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generatorsLoaded = _useState6[0],\n      setGeneratorsLoaded = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      park = _useState8[0],\n      setPark = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setDate = _useState10[1];\n\n  var _useState11 = useState('12w'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dateRange = _useState12[0],\n      setDateRange = _useState12[1];\n\n  var _useState13 = useState('week'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      groupBy = _useState14[0],\n      setGroupBy = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      data = _useState16[0],\n      setData = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      loading = _useState18[0],\n      setLoading = _useState18[1];\n\n  var fetchData = function fetchData(dateRange) {\n    // DataAPI({\n    //   'endpoint': 'admin/generators',\n    //   'body': {\n    //     'period' : dateRange\n    //   }\n    // }).then(\n    //   response => {\n    //     if (!generatorsLoaded) {\n    //       setGenerators(response);\n    //       setGeneratorsLoaded(true);\n    //     }\n    //   }\n    // );\n    setLoading(true);\n    var body = {};\n\n    if (dateRange && dateRange.split('--').length == 2) {\n      body.from = dateRange.split('--')[0];\n      body.to = dateRange.split('--')[1];\n    } else {\n      body.period = dateRange;\n    }\n\n    DataAPI({\n      endpoint: 'chart/performanceIndex',\n      method: 'POST',\n      body: body\n    }).then(function (responseData) {\n      setLoading(false);\n\n      if (responseData.error) {\n        if (responseData.error.message) {\n          return alert(responseData.error.message);\n        } else {\n          return alert(responseData.error);\n        }\n      }\n\n      var data = {\n        labels: [],\n        datasets: [],\n        backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\n      };\n      var colors = ['#003f5c', '#374c80', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600'];\n      var dataset100 = {\n        labels: [''],\n        label: '',\n        backgroundColor: colors.pop(),\n        data: []\n      };\n      responseData.data.forEach(function (rDs) {\n        var dataset = {\n          labels: [],\n          label: rDs.name,\n          backgroundColor: colors.pop(),\n          data: [],\n          hidden: rDs.name != 'Total'\n        };\n        rDs.data.graph.forEach(function (rD) {\n          // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\n          dataset.labels.push(\"\".concat(formatDate(rD.from), \" - \").concat(formatDate(rD.to)));\n          dataset.data.push(rD.value);\n          dataset100.data.push(100);\n        });\n        dataset.labels.reverse();\n        dataset.data.reverse();\n        data.datasets.push(dataset); // data.datasets.push(dataset100);\n      });\n      responseData.data[0].data.graph.forEach(function (rD) {\n        var rDfrom = rD.from;\n        var rDto = rD.to;\n        data.labels.push(\"\".concat(formatDate(rD.from, 'noyear'), \" - \").concat(formatDate(rD.to, 'noyear')));\n      });\n      data.labels.reverse();\n      setGraphData(data);\n    }).catch(function (err) {\n      console.warn(\"ERROR! \".concat(err));\n      setLoading(false);\n    } // err => alert(`ERROR! ${err}`)\n    );\n  };\n\n  useEffect(function () {\n    fetchData(dateRange);\n  }, []);\n  var dataSets = [];\n  var parks = [{\n    \"id\": 2,\n    \"code\": \"location #2\",\n    \"name\": \"location sample\",\n    \"address\": \"Location for sample\",\n    \"latitude\": -34.288322967923214,\n    \"longitude\": -54.050271841125806,\n    \"outputCapacity\": 3.0,\n    \"dataDefinitionId\": 2,\n    \"dataDefinition\": null,\n    \"stations\": null,\n    \"generators\": null\n  }];\n  var dates = ['Hoy', 'Ayer', 'Esta semana', 'Este mes', 'Este a√±o'];\n\n  var change = function change(ev) {};\n\n  var refreshChart = function refreshChart(dateRange) {\n    fetchData({\n      period: dateRange,\n      groupby: groupBy\n    });\n  };\n\n  var options = {\n    animation: {\n      duration: loading ? 0 : 1000\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"7\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Performance Index\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"2\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(CSelect, {\n            disabled: loading,\n            options: ['day', 'week', 'month'],\n            onChange: function onChange(value) {\n              setGraphData(value);\n              fetchData({\n                period: dateRange,\n                groupby: value\n              });\n            },\n            custom: true,\n            name: \"ccmonth\",\n            id: \"ccmonth\",\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"3\",\n          class: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(DateFilter, {\n            value: dateRange,\n            options: ['cm', 'cy', '12w', '12m', 'x'],\n            disabled: loading,\n            onChange: function onChange(value) {\n              setDateRange(value);\n              fetchData({\n                period: value,\n                groupby: groupby\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: graphData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(Charts, \"p7jL1Va/7PsTTmBwzUIBghH0KfQ=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/performance-index/performance-index.js"],"names":["React","useState","useEffect","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CButtonGroup","CProgress","CCardFooter","CFormSelect","CSelect","CIcon","DataAPI","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","DocsLink","formatDate","round","getDateLabel","DateFilter","Bar","Chart","Line","Scatter","rand","ctx","document","getElementById","Charts","labels","datasets","graphData","setGraphData","generators","setGenerators","generatorsLoaded","setGeneratorsLoaded","park","setPark","date","setDate","dateRange","setDateRange","groupBy","setGroupBy","data","setData","loading","setLoading","fetchData","body","split","length","from","to","period","endpoint","method","then","responseData","error","message","alert","backgroundColor","colors","dataset100","label","pop","forEach","rDs","dataset","name","hidden","graph","rD","push","value","reverse","rDfrom","rDto","catch","err","console","warn","dataSets","parks","dates","change","ev","refreshChart","groupby","options","animation","duration"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CButtonGroup,\r\n  CProgress,\r\n  CCardFooter,\r\n  CFormSelect,\r\n  CSelect\r\n} from '@coreui/react'\r\n\r\n\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\n\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nimport {formatDate, round, getDateLabel, DateFilter} from '../../../helpers/utils.js'\r\n\r\nimport { Bar, Chart, Line, Scatter } from 'react-chartjs-2';\r\n\r\nconst rand = () => {\r\n  return 2;\r\n}\r\n\r\n\r\nconst ctx = document.getElementById('x');\r\n\r\n// var mixedChart = new Chart(ctx, {\r\n//     data: {\r\n//         datasets: [\r\n//         {\r\n//             type: 'line',\r\n//             label: 'Line Dataset',\r\n//             data: [50, 50, 50, 50],\r\n//         }],\r\n//         labels: ['January', 'February', 'March', 'April']\r\n//     },\r\n//     // options: options\r\n// });\r\n\r\n\r\nconst Charts = () => {\r\n\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [park, setPark] = useState();\r\n  const [date, setDate] = useState();\r\n  const [dateRange, setDateRange] = useState('12w');\r\n  const [groupBy, setGroupBy] = useState('week');\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n  const fetchData = (dateRange) => {\r\n\r\n    // DataAPI({\r\n    //   'endpoint': 'admin/generators',\r\n    //   'body': {\r\n    //     'period' : dateRange\r\n    //   }\r\n    // }).then(\r\n    //   response => {\r\n        \r\n    //     if (!generatorsLoaded) {\r\n    //       setGenerators(response);\r\n    //       setGeneratorsLoaded(true);\r\n    //     }\r\n    //   }\r\n    // );\r\n\r\n    setLoading(true);\r\n\r\n\r\n    const body = {}\r\n\r\n    if (dateRange && dateRange.split('--').length==2) {\r\n      body.from = dateRange.split('--')[0]\r\n      body.to = dateRange.split('--')[1]\r\n    } else {\r\n      body.period = dateRange\r\n    }\r\n\r\n    DataAPI({\r\n      endpoint: 'chart/performanceIndex',\r\n      method: 'POST',\r\n      body: body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData.error) {\r\n           if (responseData.error.message) {\r\n            return(alert(responseData.error.message))\r\n           } else {\r\n            return(alert(responseData.error)) \r\n           }\r\n        }\r\n\r\n        const data = {\r\n          labels: [],\r\n          datasets: [],\r\n          backgroundColor: [\"red\", \"blue\", \"green\", \"blue\", \"red\", \"blue\"]\r\n\r\n        }\r\n\r\n\r\n\r\n        const colors = [\r\n            '#003f5c',\r\n            '#374c80',\r\n            '#7a5195',\r\n            '#bc5090',\r\n            '#ef5675',\r\n            '#ff764a',\r\n            '#ffa600'\r\n          ];\r\n\r\n\r\n          const dataset100 = {\r\n            labels: [''],\r\n            label: '',\r\n            backgroundColor: colors.pop(),\r\n            data: []\r\n          };\r\n\r\n        responseData.data.forEach((rDs) => {\r\n\r\n          const dataset = {\r\n            labels: [],\r\n            label: rDs.name,\r\n            backgroundColor: colors.pop(),\r\n            data: [],\r\n            hidden: rDs.name!='Total'\r\n          };\r\n\r\n          rDs.data.graph.forEach((rD) => {\r\n            // const dsData = rD.dataSet.find((dS) => dS.id === rDs.id);\r\n            dataset.labels.push(`${formatDate(rD.from)} - ${formatDate(rD.to)}`);\r\n            dataset.data.push(rD.value)\r\n\r\n            dataset100.data.push(100)\r\n\r\n          });\r\n\r\n          dataset.labels.reverse();\r\n          dataset.data.reverse();\r\n\r\n          data.datasets.push(dataset);\r\n          // data.datasets.push(dataset100);\r\n\r\n        });\r\n\r\n        responseData.data[0].data.graph.forEach((rD) => {\r\n          const rDfrom = rD.from;\r\n          const rDto = rD.to;\r\n          data.labels.push(`${formatDate(rD.from, 'noyear')} - ${formatDate(rD.to, 'noyear')}`);\r\n\r\n        });\r\n\r\n        data.labels.reverse();\r\n\r\n        setGraphData(data)\r\n\r\n      })\r\n      .catch(\r\n        err => {\r\n          console.warn(`ERROR! ${err}`)\r\n          setLoading(false);\r\n        }\r\n\r\n        // err => alert(`ERROR! ${err}`)\r\n      );\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    fetchData(dateRange);\r\n\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  const dataSets = [];\r\n\r\n\r\n    const parks = [\r\n    {\r\n        \"id\": 2,\r\n        \"code\": \"location #2\",\r\n        \"name\": \"location sample\",\r\n        \"address\": \"Location for sample\",\r\n        \"latitude\": -34.288322967923214,\r\n        \"longitude\": -54.050271841125806,\r\n        \"outputCapacity\": 3.0,\r\n        \"dataDefinitionId\": 2,\r\n        \"dataDefinition\": null,\r\n        \"stations\": null,\r\n        \"generators\": null\r\n    }\r\n]\r\n\r\n\r\n\r\n  const dates = [\r\n    'Hoy',\r\n    'Ayer',\r\n    'Esta semana',\r\n    'Este mes',\r\n    'Este a√±o'\r\n  ]\r\n\r\n\r\n  const change = (ev) => {\r\n  }\r\n\r\n  const refreshChart = (dateRange) => {\r\n    fetchData({period: dateRange,  groupby: groupBy});\r\n  }\r\n\r\n  const options = {animation: {duration: loading ? 0 : 1000}};\r\n\r\n  return (\r\n      <CCard className=\"mb-4\">\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"7\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Performance Index\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n              </CCol>\r\n\r\n              <CCol sm=\"2\" class=\"text-right\">\r\n                {/* <DateFilter value={groupBy} options={['day','week','month']} disabled={loading} onChange={(value) => { setGroupBy(value); fetchData(value);}} /> */}\r\n\r\n                <CSelect disabled={loading} options={['day','week','month']} onChange={(value) => { setGraphData(value); fetchData({period: dateRange, groupby: value});}} custom name=\"ccmonth\" id=\"ccmonth\"> </CSelect>\r\n              </CCol>\r\n\r\n              <CCol sm=\"3\" class=\"text-right\">\r\n                <DateFilter value={dateRange} options={['cm','cy','12w','12m','x']} disabled={loading} onChange={(value) => { setDateRange(value); fetchData({period: value, groupby: groupby});}} />\r\n              </CCol>\r\n\r\n          </CRow>\r\n\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n         \r\n          <Line data={graphData} options={options} />\r\n        </CCardBody>\r\n\r\n      </CCard>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"]},"metadata":{},"sourceType":"module"}