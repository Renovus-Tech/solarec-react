{"ast":null,"code":"import _toConsumableArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\trends.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner } from '@coreui/react';\nimport { CChartLine, CChartPolarArea } from '@coreui/react-chartjs';\nimport { DocsLink } from 'src/reusable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar ClimateTrends = function ClimateTrends() {\n  _s();\n\n  var _useState = useState('cm'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState('day'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupBy = _useState4[0],\n      setGroupBy = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataLoadError = _useState8[0],\n      setDataLoadError = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      generatorsLoaded = _useState12[0],\n      setGeneratorsLoaded = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedGenerators = _useState14[0],\n      setSelectedGenerators = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      filterSubmitted = _useState16[0],\n      setFilterSubmitted = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      generators = _useState18[0],\n      setGenerators = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      generatorColors = _useState20[0],\n      setGeneratorColors = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      generatorsSelected = _useState22[0],\n      setGeneratorsSelected = _useState22[1];\n\n  var _useState23 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState24 = _slicedToArray(_useState23, 2),\n      lineChartOneData = _useState24[0],\n      setLineChartOneData = _useState24[1];\n\n  var _useState25 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState26 = _slicedToArray(_useState25, 2),\n      lineChartTwoData = _useState26[0],\n      setLineChartTwoData = _useState26[1];\n\n  var _useState27 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      polarChartData = _useState28[0],\n      setPolarChartData = _useState28[1];\n\n  var colors = ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600', '#9ceb01'];\n  useEffect(function () {\n    loadGenerators();\n  }, []);\n  var colorCounter = 0;\n  var windRoseLabels = ['0-3', '3-6', '6-9', '9-12', '12-15', '15*'];\n\n  var windRoseColor = function windRoseColor(value) {\n    var n = 0;\n\n    if (value < 3) {\n      n = 0;\n    } else if (value < 6) {\n      n = 1;\n    } else if (value < 9) {\n      n = 2;\n    } else if (value < 12) {\n      n = 3;\n    } else if (value < 15) {\n      n = 4;\n    } else {\n      n = 5;\n    }\n\n    console.log('windRoseColor', value, n);\n    var x = colors;\n    return x[n];\n  };\n\n  var fetchData = function fetchData(period) {\n    setLoading(true);\n    var body = {};\n\n    if (period && period.split('--').length == 2) {\n      body.from = period.split('--')[0];\n      body.to = period.split('--')[1];\n    } else {\n      body.period = period;\n    }\n\n    body.groupBy = groupBy;\n    DataAPI({\n      'endpoint': 'chart/climate',\n      'method': 'POST',\n      'body': body\n    }).then(function (responseData) {\n      if (responseData.error && responseData.error.message) alert(responseData.error.message);\n      setLoading(false);\n\n      if (responseData && responseData.graphs) {\n        var windSpeedData = {\n          labels: [],\n          datasets: []\n        };\n        var temperatureData = {\n          labels: [],\n          datasets: []\n        };\n        var windRoseData = {\n          labels: [],\n          datasets: []\n        };\n        var metMastWindSpeedDataSet = {\n          label: 'Met Mast',\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var turbinesAverageWindSpeedDataSet = {\n          label: 'Turbines Average',\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var metMastTemperatureDataSet = {\n          label: 'Met Mast',\n          borderColor: '#f32e2e',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        };\n        var turbinesAverageTemperatureDataSet = {\n          label: 'Turbines Average',\n          borderColor: '#930303',\n          pointBackgroundColor: 'transparent',\n          pointBorderColor: 'transparent',\n          backgroundColor: 'transparent',\n          data: []\n        }; // const datasetMetMast = {\n        //   label: 'Met Mast',\n        //   borderColor: '#f87979',\n        //   pointBackgroundColor: 'transparent',\n        //   pointBorderColor: 'transparent',\n        //   backgroundColor: 'transparent',\n        //   data: []\n        // };\n        // windSpeedData.datasets.push(datasetMetMast);\n\n        responseData.graphs.find(function (item) {\n          // switch (item.type) {\n          //   case 'WindSpeed':\n          item.data.forEach(function (rDs) {\n            var mmWindSpeed = (Math.round(rDs.mmWindSpeed * 100) / 100).toFixed(2);\n            metMastWindSpeedDataSet.data.push(mmWindSpeed);\n            var taWindSpeed = (Math.round(rDs.taWindSpeed * 100) / 100).toFixed(2);\n            turbinesAverageWindSpeedDataSet.data.push(taWindSpeed);\n            var date = rDs.datetimeFrom.split(' ')[0];\n            var time = rDs.datetimeFrom.split(' ')[1];\n            var timeArr = time.split(':');\n            var rDfrom = \"\".concat(date); // - ${timeArr[0]}:${timeArr[1]}`;\n\n            var rDto = rDs.datetimeTo;\n            windSpeedData.labels.push(rDfrom);\n          });\n          windSpeedData.datasets.push(metMastWindSpeedDataSet);\n          windSpeedData.datasets.push(turbinesAverageWindSpeedDataSet);\n          setLineChartOneData(windSpeedData); // break;\n          //   case 'Temperature':\n          //     item.data.forEach((rDs) => {\n          //       temperatureDataSets.data.push(round(rDs.temperature))\n          //       const rDfrom = rDs.datetimeFrom;\n          //       const rDto = rDs.datetimeTo;\n          //       temperatureData.labels.push(formatDate2(rDfrom, 'time'));\n          //     });\n          //     temperatureData.datasets.push(temperatureDataSets);\n          //     setLineChartTwoData(temperatureData)\n          //     break;\n          //   case 'WindRose':\n          //     item.data.forEach((rDs) => {\n          //       let windRoseDataSets = {}\n          //       const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\n          //       const color = windRoseColor(rDs);\n          //       windRoseDataSets.data = rDs.radiuses;\n          //       windRoseDataSets.backgroundColor=[];\n          //       rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\n          //       if (diff > 0) {\n          //         for (let i = 0; i <= diff; i++) {\n          //           windRoseDataSets.data.push(0);\n          //         }\n          //       }\n          //       windRoseDataSets.pointBackgroundColor = color;\n          //       // windRoseDataSets.pointBorderColor = \"white\",\n          //       windRoseDataSets.pointHoverBackgroundColor = color;\n          //       windRoseDataSets.pointHoverBorderColor = color;\n          //       windRoseData.datasets.push(windRoseDataSets);\n          //       // console.log('windRoseRange',rDfrom,rDs.angle.from)\n          //     });\n          //     windRoseData.datasets.backgroundColor = ['red','blue'];\n          //     setPolarChartData(windRoseData)\n          //     break;\n          // }\n        });\n      }\n    });\n  };\n\n  var loadGenerators = function loadGenerators() {\n    DataAPI({\n      'endpoint': 'admin/locations/current',\n      'method': 'GET'\n    }).then(function (response) {\n      if (!dataLoaded && response && !response.error) {\n        setGenerators(response.generators); // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\n\n        var colorIndex = 0;\n        response.generators.forEach(function (gen) {\n          generatorColors[gen.code] = colors[colorIndex % colors.length];\n          setGeneratorColors(generatorColors);\n          colorIndex++;\n        });\n        setGeneratorsLoaded(true);\n      }\n    });\n  };\n\n  var selectGenerator = function selectGenerator(id) {\n    var newSelected = selectedGenerators;\n    newSelected = newSelected.includes(id) ? newSelected.filter(function (i) {\n      return i !== id;\n    }) // remove item\n    : [].concat(_toConsumableArray(newSelected), [id]); // add item\n\n    setSelectedGenerators(newSelected);\n  };\n\n  var filterGenerators = function filterGenerators() {\n    setDataLoaded(false);\n    setGeneratorsSelected(false);\n    setFilterSubmitted(true);\n\n    if (selectedGenerators.length > 0) {\n      setLoading(true);\n      setGeneratorsSelected(true);\n      fetchData(dateRange);\n    }\n  };\n\n  var windRoseLabelsMap = windRoseLabels.map(function (v, m) {\n    var color = colors[m];\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginRight: '20px'\n      },\n      children: [v, /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          backgroundColor: color,\n          width: '30px',\n          height: '10px',\n          display: 'inline-block',\n          'marginLeft': '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 52\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 14\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"9\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-medium-emphasis\",\n            children: getDateLabel(dateRange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"3\",\n          class: \"text-right d-flex flex-center\",\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            className: \"w-100 justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              className: \"d-flex flex-center px-md-1 py-2 px-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mr-2 ml-4 m-0\",\n                style: {\n                  lineHeight: 1.2\n                },\n                children: \"Period\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(DateFilter, {\n                options: 'cm,cy,12w,12m,x,xx'.split(','),\n                disabled: loading,\n                onChange: function onChange(value) {\n                  setDateRange(value);\n                  fetchData(value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        className: \"py-3 mb-4 mx-0 bg-light\",\n        style: {\n          borderRadius: \"3px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"10\",\n          className: \"d-flex \",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"mx-2 my-2 pt-1\",\n            style: {\n              lineHeight: 1.2,\n              minWidth: '110px'\n            },\n            children: \"Select generators:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, _this), generatorsLoaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: generators.map(function (gen, index) {\n              return /*#__PURE__*/_jsxDEV(CButton, {\n                style: {\n                  backgroundColor: generatorColors[gen.code],\n                  color: 'white'\n                },\n                className: (selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\",\n                onClick: function onClick() {\n                  return selectGenerator(gen.id);\n                },\n                id: gen.id,\n                children: gen.code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, _this) : /*#__PURE__*/_jsxDEV(CSpinner, {\n            size: \"sm\",\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"2\",\n          className: \"text-right d-flex flex-end flex-justify-end \",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"primary\",\n            className: \"mx-2 mb-1\",\n            onClick: function onClick() {\n              return filterGenerators();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, _this), generatorsSelected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(CRow, {\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Wind Speed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"m/s\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n                datasets: lineChartOneData.datasets,\n                labels: lineChartOneData.labels,\n                options: {\n                  tooltips: {\n                    enabled: true\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: false && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"pb-2 mb-4 border-bottom\",\n                  children: \"Wind Rose\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 33\n                }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    maxWidth: '600px',\n                    margin: 'auto'\n                  },\n                  children: windRoseLabelsMap\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(CChartPolarArea, {\n                  datasets: polarChartData.datasets,\n                  labels: polarChartData.labels,\n                  options: {\n                    tooltips: {\n                      enabled: true\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 21\n                }, _this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n            children: /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"pb-2 mb-4 border-bottom\",\n                children: \"Temperature\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"\\xB0C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(CChartLine, {\n                datasets: lineChartTwoData.datasets,\n                labels: lineChartTwoData.labels,\n                options: {\n                  tooltips: {\n                    enabled: true\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(CSpinner, {\n            className: \"loading-spinner\",\n            color: \"#321fdb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: filterSubmitted && /*#__PURE__*/_jsxDEV(CRow, {\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            className: \"text-center\",\n            children: \"Select one or more generators\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateTrends, \"l7jyMDnTl0jtUZ4ySmgRrSdz2vw=\");\n\n_c = ClimateTrends;\nexport default ClimateTrends;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateTrends\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/trends.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CChartLine","CChartPolarArea","DocsLink","ClimateTrends","dateRange","setDateRange","groupBy","setGroupBy","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","generatorsLoaded","setGeneratorsLoaded","selectedGenerators","setSelectedGenerators","filterSubmitted","setFilterSubmitted","generators","setGenerators","generatorColors","setGeneratorColors","generatorsSelected","setGeneratorsSelected","labels","datasets","lineChartOneData","setLineChartOneData","lineChartTwoData","setLineChartTwoData","polarChartData","setPolarChartData","colors","loadGenerators","colorCounter","windRoseLabels","windRoseColor","value","n","console","log","x","fetchData","period","body","split","length","from","to","then","responseData","error","message","alert","graphs","windSpeedData","temperatureData","windRoseData","metMastWindSpeedDataSet","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","data","turbinesAverageWindSpeedDataSet","metMastTemperatureDataSet","turbinesAverageTemperatureDataSet","find","item","forEach","rDs","mmWindSpeed","Math","toFixed","push","taWindSpeed","date","datetimeFrom","time","timeArr","rDfrom","rDto","datetimeTo","response","colorIndex","gen","code","selectGenerator","id","newSelected","includes","filter","i","filterGenerators","windRoseLabelsMap","map","v","m","color","marginRight","width","height","display","lineHeight","borderRadius","minWidth","index","tooltips","enabled","maxWidth","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n} from '@coreui/react'\r\n\r\nimport {\r\n  CChartLine,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst ClimateTrends = () => {\r\n\r\n  const [dateRange, setDateRange] = useState('cm');\r\n  const [groupBy, setGroupBy] = useState('day');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataLoadError, setDataLoadError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatorsLoaded, setGeneratorsLoaded] = useState(false);\r\n  const [selectedGenerators, setSelectedGenerators] = useState([]);\r\n  const [filterSubmitted, setFilterSubmitted] = useState(false);\r\n  const [generators, setGenerators] = useState([]);\r\n  const [generatorColors, setGeneratorColors] = useState([]);\r\n  const [generatorsSelected, setGeneratorsSelected] = useState(false);\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [lineChartTwoData, setLineChartTwoData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n  const [polarChartData, setPolarChartData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  });\r\n\r\n  const colors =  ['#003f5c', '#7a5195', '#bc5090', '#ef5675', '#ff764a', '#ffa600','#9ceb01']\r\n\r\n\r\n  useEffect(() => {\r\n    loadGenerators();\r\n  }, []);\r\n  \r\n  \r\n  var colorCounter=0;\r\n\r\n  const windRoseLabels = [\r\n            '0-3','3-6','6-9', '9-12', '12-15', '15*', \r\n          ];\r\n\r\n  const windRoseColor = (value) => {\r\n\r\n\r\n\r\n    let n=0;\r\n\r\n    if (value < 3) {\r\n      n=0;\r\n    } else if (value < 6){\r\n      n=1;\r\n    } else if (value < 9){\r\n      n=2;\r\n    } else if (value < 12){\r\n      n=3;\r\n    } else if (value < 15){\r\n      n=4;\r\n    } else {\r\n      n=5;\r\n\r\n    }\r\n\r\n    console.log('windRoseColor', value, n)\r\n\r\n    const x = colors;\r\n\r\n    return x[n];\r\n  }\r\n\r\n\r\n\r\n  const fetchData = (period) => {\r\n\r\n    setLoading(true);\r\n\r\n    const body = {}\r\n\r\n    if (period && period.split('--').length==2) {\r\n      body.from = period.split('--')[0]\r\n      body.to = period.split('--')[1]\r\n    } else {\r\n      body.period = period\r\n    }\r\n    body.groupBy = groupBy;\r\n    \r\n    DataAPI(\r\n      {\r\n      'endpoint': 'chart/climate',\r\n      'method': 'POST',\r\n      'body': body\r\n    })\r\n      .then(function (responseData) {\r\n\r\n        if (responseData.error && responseData.error.message) alert(responseData.error.message)\r\n\r\n        setLoading(false);\r\n\r\n        if (responseData && responseData.graphs) {\r\n\r\n          var windSpeedData = {\r\n            labels: [],\r\n            datasets: []\r\n          }\r\n          var temperatureData = {\r\n            labels: [],\r\n            datasets: []\r\n          }\r\n          var windRoseData = {\r\n            labels: [],\r\n            datasets: []\r\n          }\r\n\r\n\r\n          var metMastWindSpeedDataSet = {\r\n            label: 'Met Mast',\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          var turbinesAverageWindSpeedDataSet = {\r\n            label: 'Turbines Average',\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          var metMastTemperatureDataSet = {\r\n            label: 'Met Mast',\r\n            borderColor: '#f32e2e',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n          var turbinesAverageTemperatureDataSet = {\r\n            label: 'Turbines Average',\r\n            borderColor: '#930303',\r\n            pointBackgroundColor: 'transparent',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: []\r\n          };\r\n\r\n\r\n\r\n\r\n          // const datasetMetMast = {\r\n          //   label: 'Met Mast',\r\n          //   borderColor: '#f87979',\r\n          //   pointBackgroundColor: 'transparent',\r\n          //   pointBorderColor: 'transparent',\r\n          //   backgroundColor: 'transparent',\r\n          //   data: []\r\n            \r\n          // };\r\n          // windSpeedData.datasets.push(datasetMetMast);\r\n\r\n\r\n\r\n\r\n        responseData.graphs.find((item) => {\r\n          // switch (item.type) {\r\n          //   case 'WindSpeed':\r\n              item.data.forEach((rDs) => {\r\n                const mmWindSpeed = (Math.round(rDs.mmWindSpeed * 100) / 100).toFixed(2);\r\n                metMastWindSpeedDataSet.data.push(mmWindSpeed);\r\n                const taWindSpeed = (Math.round(rDs.taWindSpeed * 100) / 100).toFixed(2);\r\n                turbinesAverageWindSpeedDataSet.data.push(taWindSpeed);\r\n                \r\n\r\n                let date = rDs.datetimeFrom.split(' ')[0];\r\n                let time = rDs.datetimeFrom.split(' ')[1];\r\n                let timeArr = time.split(':')\r\n\r\n                const rDfrom = `${date}`;// - ${timeArr[0]}:${timeArr[1]}`;\r\n                const rDto = rDs.datetimeTo;\r\n                windSpeedData.labels.push(rDfrom);\r\n              });\r\n\r\n              windSpeedData.datasets.push(metMastWindSpeedDataSet);\r\n              windSpeedData.datasets.push(turbinesAverageWindSpeedDataSet);\r\n              \r\n              setLineChartOneData(windSpeedData)\r\n              // break;\r\n\r\n          //   case 'Temperature':\r\n          //     item.data.forEach((rDs) => {\r\n          //       temperatureDataSets.data.push(round(rDs.temperature))\r\n          //       const rDfrom = rDs.datetimeFrom;\r\n          //       const rDto = rDs.datetimeTo;\r\n          //       temperatureData.labels.push(formatDate2(rDfrom, 'time'));\r\n          //     });\r\n          //     temperatureData.datasets.push(temperatureDataSets);\r\n          //     setLineChartTwoData(temperatureData)\r\n          //     break;\r\n          //   case 'WindRose':\r\n          //     item.data.forEach((rDs) => {\r\n          //       let windRoseDataSets = {}\r\n          //       const diff = parseInt(item.data.length) - parseInt(rDs.radiuses.length);\r\n                \r\n          //       const color = windRoseColor(rDs);\r\n\r\n          //       windRoseDataSets.data = rDs.radiuses;\r\n          //       windRoseDataSets.backgroundColor=[];\r\n\r\n          //       rDs.radiuses.forEach(radius => windRoseDataSets.backgroundColor.push(windRoseColor(radius)));\r\n\r\n          //       if (diff > 0) {\r\n          //         for (let i = 0; i <= diff; i++) {\r\n          //           windRoseDataSets.data.push(0);\r\n          //         }\r\n          //       }\r\n                \r\n          //       windRoseDataSets.pointBackgroundColor = color;\r\n          //       // windRoseDataSets.pointBorderColor = \"white\",\r\n          //       windRoseDataSets.pointHoverBackgroundColor = color;\r\n          //       windRoseDataSets.pointHoverBorderColor = color;\r\n                \r\n          //       windRoseData.datasets.push(windRoseDataSets);\r\n\r\n          //       // console.log('windRoseRange',rDfrom,rDs.angle.from)\r\n                \r\n\r\n                \r\n          //     });\r\n\r\n          //     windRoseData.datasets.backgroundColor = ['red','blue'];\r\n\r\n          //     setPolarChartData(windRoseData)\r\n          //     break;\r\n          // }\r\n        });\r\n\r\n      }\r\n      });\r\n\r\n  }\r\n\r\n  const loadGenerators = () => {\r\n\r\n    DataAPI({\r\n      'endpoint': 'admin/locations/current',\r\n      'method': 'GET'\r\n    }).then(\r\n      response => {\r\n        \r\n        if (!dataLoaded && response  && !response.error) {\r\n\r\n          setGenerators(response.generators);\r\n          // setSelectedGenerators(response.generators.map((gen) => (gen.id)));\r\n\r\n          let colorIndex = 0\r\n          response.generators.forEach((gen) => {\r\n            generatorColors[gen.code] = colors[colorIndex%colors.length];\r\n            setGeneratorColors(generatorColors);\r\n            colorIndex++\r\n          });\r\n\r\n          setGeneratorsLoaded(true);\r\n\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  const selectGenerator = (id) => {\r\n\r\n    let newSelected = selectedGenerators;\r\n    newSelected = newSelected.includes(id)\r\n                          ? newSelected.filter(i => i !== id) // remove item\r\n                          : [ ...newSelected, id ]; // add item\r\n    setSelectedGenerators(newSelected);\r\n  }\r\n\r\n  const filterGenerators = () => {\r\n\r\n    setDataLoaded(false);\r\n    setGeneratorsSelected(false);\r\n    setFilterSubmitted(true);\r\n    if (selectedGenerators.length > 0) {\r\n      setLoading(true);\r\n      setGeneratorsSelected(true);\r\n      fetchData(dateRange);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const windRoseLabelsMap = windRoseLabels.map(\r\n    (v,m) => {\r\n      const color = colors[m];\r\n      return <span style={{marginRight:'20px'}}>{v}<span style={{backgroundColor:color, width: '30px', height: '10px', display: 'inline-block', 'marginLeft':'10px' }}></span></span>;\r\n    }\r\n  )\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"9\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate\r\n              </h3>\r\n              <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div>\r\n            </CCol>\r\n\r\n            <CCol sm=\"3\" class=\"text-right d-flex flex-center\">\r\n              <CRow className={\"w-100 justify-content-end\"}>\r\n                <CCol className=\"d-flex flex-center px-md-1 py-2 px-4\">\r\n                  <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n                  <DateFilter options={'cm,cy,12w,12m,x,xx'.split(',')} disabled={loading} onChange={(value) => { setDateRange(value); fetchData(value);}} />\r\n                </CCol>\r\n              </CRow>\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n          <CRow className={\"py-3 mb-4 mx-0 bg-light\"} style={{borderRadius:\"3px\"}}>\r\n            <CCol sm=\"10\" className={\"d-flex \"} >\r\n              <h6 className=\"mx-2 my-2 pt-1\" style={{lineHeight:1.2,minWidth:'110px'}}>Select generators:</h6>   \r\n              {generatorsLoaded ? \r\n                <div>\r\n                  { generators.map((gen, index) => (  \r\n                    <CButton \r\n                      style={{backgroundColor:generatorColors[gen.code],color: 'white'}} \r\n                      className={(selectedGenerators.includes(gen.id) ? \"selected\" : \"\") + \" btn-generator mx-1 my-1\"}\r\n                      onClick={() => selectGenerator(gen.id)} \r\n                      id={gen.id}\r\n                      >\r\n                        {gen.code}\r\n                    </CButton>\r\n                  )) }\r\n                </div>\r\n                :\r\n                <CSpinner \r\n                  size=\"sm\"\r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              }\r\n            </CCol>\r\n            <CCol sm=\"2\" className=\"text-right d-flex flex-end flex-justify-end \">\r\n              <CButton color=\"primary\" className=\"mx-2 mb-1\" onClick={() => filterGenerators()} >Submit</CButton>\r\n            </CCol>\r\n        </CRow>\r\n\r\n        { generatorsSelected ?\r\n\r\n          <div>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n                <CRow>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n\r\n                    <div>m/s</div>\r\n                    <CChartLine\r\n                      datasets={lineChartOneData.datasets}\r\n                      labels={lineChartOneData.labels}\r\n                      options={{\r\n                        tooltips: {\r\n                          enabled: true\r\n                        }\r\n                      }}\r\n                    />\r\n\r\n\r\n                    <br />\r\n                    <br />\r\n                  \r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol>\r\n                  \r\n                    {false && <><h4 className=\"pb-2 mb-4 border-bottom\">Wind Rose</h4>\r\n\r\n                    <div style={{maxWidth:'600px', margin:'auto'}}>{windRoseLabelsMap}</div>\r\n\r\n                    <CChartPolarArea\r\n                      datasets={polarChartData.datasets}\r\n                      labels={polarChartData.labels}\r\n                      options={{\r\n                        tooltips: {\r\n                          enabled: true\r\n                        }\r\n                      }}\r\n                    />\r\n\r\n\r\n                    <br />\r\n                    <br /></>}\r\n\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol>\r\n\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\">Temperature</h4>\r\n\r\n                    <div>°C</div>\r\n                    <CChartLine\r\n                      datasets={lineChartTwoData.datasets}\r\n                      labels={lineChartTwoData.labels}\r\n                      options={{\r\n                        tooltips: {\r\n                          enabled: true\r\n                        }\r\n                      }}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          { filterSubmitted &&\r\n            <CRow>\r\n              <CCol className=\"text-center\">\r\n                Select one or more generators\r\n              </CCol>\r\n            </CRow>\r\n          }\r\n        </div>\r\n\r\n}\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateTrends\r\n"]},"metadata":{},"sourceType":"module"}