{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nicob\\\\Desktop\\\\Renovus\\\\renovus\\\\falconer_ui_web\\\\src\\\\views\\\\pages\\\\climate\\\\forecast.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DataAPI from '../../../helpers/DataAPI.js';\nimport { DateFilter, getDateLabel, formatDate, formatDate2, round } from '../../../helpers/utils.js';\nimport { setCookie, getCookie } from '../../../helpers/sessionCookie.js';\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CRow, CCol, CButton, CSpinner, CLabel } from '@coreui/react';\nimport { Line } from 'react-chartjs-2';\nimport { OPEN_WEATHER_API } from '../../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ClimateForecast = function ClimateForecast() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoadError = _useState4[0],\n      setDataLoadError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState({\n    labels: [],\n    datasets: []\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lineChartOneData = _useState8[0],\n      setLineChartOneData = _useState8[1];\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fetchOptions, APIResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              fetchOptions = {};\n              fetchOptions.method = 'POST';\n              fetchOptions.headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'credentials': 'include',\n                'Origin': window.location.href,\n                'Access-Control-Request-Method': 'POST'\n              };\n              fetchOptions.credentials = 'include';\n              APIResponse = fetch(OPEN_WEATHER_API).then(function (response) {\n                responseData = response.json();\n\n                if (responseData.error && responseData.error.message) {\n                  setDataLoadError(true);\n                  alert(responseData.error.message);\n                }\n\n                setLoading(false);\n\n                if (responseData && responseData.graphs) {\n                  var labels = responseData.graphs[0].data.map(function (x, i) {\n                    return x.datetimeFrom;\n                  });\n                  var graphData1 = {\n                    labels: labels,\n                    datasets: []\n                  };\n                  responseData.graphs[0].gen_code.forEach(function (gen, index) {\n                    var dataset1 = {\n                      label: gen,\n                      borderColor: '#003f5c',\n                      pointBackgroundColor: '#003f5c',\n                      pointBorderColor: 'transparent',\n                      backgroundColor: 'transparent',\n                      data: responseData.graphs[0].data.map(function (x, i) {\n                        return x.genWindSpeed[index];\n                      })\n                    };\n                    graphData1.datasets.push(dataset1);\n                  });\n                  setLineChartOneData(graphData1);\n                }\n              }).catch(function (er) {\n                console.log('APIError!', er, OPEN_WEATHER_API);\n              }); // DataAPI(\n              //   {\n              //   'endpoint': OPEN_WEATHER_API,\n              //   'method': 'POST',\n              // })\n              //   .then(function (responseData) {\n              //     if (responseData.error && responseData.error.message) {\n              //       setDataLoadError(true)\n              //       alert(responseData.error.message)\n              //     } \n              //     setLoading(false);\n              //     if (responseData && responseData.graphs) {\n              //       const labels = responseData.graphs[0].data.map( (x,i) => {\n              //         return x.datetimeFrom;\n              //       })\n              //       const graphData1 = {\n              //         labels: labels,\n              //         datasets: []\n              //       }\n              //       responseData.graphs[0].gen_code.forEach((gen,index) => {\n              //         const dataset1 = {\n              //           label:  gen,\n              //           borderColor: '#003f5c',\n              //           pointBackgroundColor: '#003f5c',\n              //           pointBorderColor: 'transparent',\n              //           backgroundColor: 'transparent',\n              //           data: responseData.graphs[0].data.map( (x,i) => {\n              //             return x.genWindSpeed[index];\n              //           })\n              //         }\n              //         graphData1.datasets.push(dataset1)\n              //       });\n              //       setLineChartOneData(graphData1)\n              //     }\n              //   });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var options = {\n    responsive: true,\n    animation: {\n      duration: loading ? 0 : 1000\n    },\n    tooltips: {\n      enabled: true\n    },\n    elements: {\n      line: {\n        tension: .4\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: function label(tooltipItem, data) {\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw, 1) + ' m/s';\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CCard, {\n    children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"traffic\",\n            className: \"card-title mb-0\",\n            children: \"Climate - Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          sm: \"8\",\n          className: \"text-right d-flex flex-center flex-justify-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n      children: !loading || dataLoadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          className: 'mb-5',\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"pb-2 mb-4 border-bottom\",\n              children: \"Wind Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"m/s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Line, {\n              data: lineChartOneData,\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(CSpinner, {\n          className: \"loading-spinner\",\n          color: \"#321fdb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ClimateForecast, \"tiOzZkyyCq9LKsLSPobTj2mgOO8=\");\n\n_c = ClimateForecast;\nexport default ClimateForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClimateForecast\");","map":{"version":3,"sources":["C:/Users/nicob/Desktop/Renovus/renovus/falconer_ui_web/src/views/pages/climate/forecast.js"],"names":["React","useEffect","useState","DataAPI","DateFilter","getDateLabel","formatDate","formatDate2","round","setCookie","getCookie","CCard","CCardBody","CCardGroup","CCardHeader","CRow","CCol","CButton","CSpinner","CLabel","Line","OPEN_WEATHER_API","ClimateForecast","dataLoaded","setDataLoaded","dataLoadError","setDataLoadError","loading","setLoading","labels","datasets","lineChartOneData","setLineChartOneData","fetchData","fetchOptions","method","headers","window","location","href","credentials","APIResponse","fetch","then","response","responseData","json","error","message","alert","graphs","data","map","x","i","datetimeFrom","graphData1","gen_code","forEach","gen","index","dataset1","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","genWindSpeed","push","catch","er","console","log","options","responsive","animation","duration","tooltips","enabled","elements","line","tension","plugins","tooltip","callbacks","tooltipItem","dataset","raw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DataAPI from '../../../helpers/DataAPI.js'\r\nimport {DateFilter, getDateLabel, formatDate, formatDate2, round} from '../../../helpers/utils.js'\r\nimport {setCookie,getCookie} from '../../../helpers/sessionCookie.js'\r\n\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CSpinner,\r\n  CLabel,\r\n} from '@coreui/react'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport { OPEN_WEATHER_API } from '../../../constants'\r\n\r\n\r\nconst ClimateForecast = () => {\r\n\r\n  const [dataLoaded, setDataLoaded] = useState(false)\r\n  const [dataLoadError, setDataLoadError] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [lineChartOneData, setLineChartOneData] = useState({\r\n    labels: [],\r\n    datasets: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n\r\n    setLoading(true);\r\n\r\n    const fetchOptions = {};\r\n    fetchOptions.method = 'POST';\r\n    fetchOptions.headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'credentials': 'include',\r\n      'Origin': window.location.href,\r\n      'Access-Control-Request-Method' : 'POST'\r\n    };\r\n    fetchOptions.credentials = 'include';\r\n\r\n    const APIResponse = fetch(OPEN_WEATHER_API).then(function (response) {\r\n      responseData = response.json();\r\n\r\n      if (responseData.error && responseData.error.message) {\r\n        setDataLoadError(true)\r\n        alert(responseData.error.message)\r\n      } \r\n\r\n      setLoading(false);\r\n\r\n      if (responseData && responseData.graphs) {\r\n\r\n        const labels = responseData.graphs[0].data.map( (x,i) => {\r\n          return x.datetimeFrom;\r\n        })\r\n        const graphData1 = {\r\n          labels: labels,\r\n          datasets: []\r\n        }\r\n        \r\n        responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n          const dataset1 = {\r\n            label:  gen,\r\n            borderColor: '#003f5c',\r\n            pointBackgroundColor: '#003f5c',\r\n            pointBorderColor: 'transparent',\r\n            backgroundColor: 'transparent',\r\n            data: responseData.graphs[0].data.map( (x,i) => {\r\n              return x.genWindSpeed[index];\r\n            })\r\n          }\r\n        \r\n          graphData1.datasets.push(dataset1)\r\n        });\r\n\r\n        setLineChartOneData(graphData1)\r\n\r\n      }\r\n\r\n    }).catch(\r\n      er => {\r\n        console.log('APIError!', er, OPEN_WEATHER_API);\r\n      }\r\n    );\r\n\r\n        \r\n    // DataAPI(\r\n    //   {\r\n    //   'endpoint': OPEN_WEATHER_API,\r\n    //   'method': 'POST',\r\n    // })\r\n    //   .then(function (responseData) {\r\n\r\n    //     if (responseData.error && responseData.error.message) {\r\n    //       setDataLoadError(true)\r\n    //       alert(responseData.error.message)\r\n    //     } \r\n\r\n    //     setLoading(false);\r\n\r\n    //     if (responseData && responseData.graphs) {\r\n\r\n    //       const labels = responseData.graphs[0].data.map( (x,i) => {\r\n    //         return x.datetimeFrom;\r\n    //       })\r\n    //       const graphData1 = {\r\n    //         labels: labels,\r\n    //         datasets: []\r\n    //       }\r\n          \r\n    //       responseData.graphs[0].gen_code.forEach((gen,index) => {\r\n    //         const dataset1 = {\r\n    //           label:  gen,\r\n    //           borderColor: '#003f5c',\r\n    //           pointBackgroundColor: '#003f5c',\r\n    //           pointBorderColor: 'transparent',\r\n    //           backgroundColor: 'transparent',\r\n    //           data: responseData.graphs[0].data.map( (x,i) => {\r\n    //             return x.genWindSpeed[index];\r\n    //           })\r\n    //         }\r\n          \r\n    //         graphData1.datasets.push(dataset1)\r\n    //       });\r\n\r\n    //       setLineChartOneData(graphData1)\r\n\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n\r\n  const options =  {\r\n    responsive: true,\r\n    animation: {duration: loading ? 0 : 1000},\r\n    tooltips: {\r\n      enabled: true\r\n    },\r\n    elements: {\r\n      line: {\r\n          tension: .4\r\n      }\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem, data) {\r\n            return tooltipItem.dataset.label + \": \" + round(tooltipItem.raw,1) + ' m/s';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n      <CCard>\r\n\r\n      <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"4\">\r\n              <h3 id=\"traffic\" className=\"card-title mb-0\">\r\n                Climate - Forecast\r\n              </h3>\r\n              {/* <div className=\"small text-medium-emphasis\">{getDateLabel(dateRange)}</div> */}\r\n            </CCol>\r\n\r\n            <CCol sm=\"8\" className=\"text-right d-flex flex-center flex-justify-end\">\r\n              {/* <h6 className=\"mr-2 ml-4 m-0\" style={{lineHeight:1.2}}>Period</h6>\r\n              <DateFilter options={['y','cm','cy','x','xx']} disabled={loading} onChange={(value) => { setDateRange(value); }} /> */}\r\n            </CCol>\r\n          </CRow>\r\n\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n\r\n            {!loading || dataLoadError ? \r\n\r\n              <div>\r\n\r\n                <CRow className={'mb-5'}>\r\n                  <CCol>\r\n                    <h4 className=\"pb-2 mb-4 border-bottom\" >Wind Speed</h4>\r\n                    <div>m/s</div>\r\n                    <Line\r\n                      data={lineChartOneData}\r\n                      options={options}\r\n                    />\r\n                  </CCol>\r\n                </CRow>\r\n\r\n\r\n              </div>\r\n            : \r\n              <div className='text-center'>\r\n                <CSpinner \r\n                  className=\"loading-spinner\"\r\n                  color='#321fdb'\r\n                />\r\n              </div>\r\n            }\r\n\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n  )\r\n}\r\n\r\nexport default ClimateForecast\r\n"]},"metadata":{},"sourceType":"module"}